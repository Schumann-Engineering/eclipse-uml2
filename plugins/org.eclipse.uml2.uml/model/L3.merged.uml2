<?xml version="1.0" encoding="UTF-8"?>
<uml:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:Ecore_2="http:///Ecore_2_1RgZIMezEdmTJL3rR1ioJg.profile.uml2" xmlns:uml="http://www.eclipse.org/uml2/1.0.0/UML" xsi:schemaLocation="http:///Ecore_2_1RgZIMezEdmTJL3rR1ioJg.profile.uml2 pathmap://UML2_PROFILES/Ecore.profile.uml2#_1RgZIcezEdmTJL3rR1ioJg" xmi:id="_EBtHcBmMEdqvcs97umGEYQ" name="L3" appliedProfile="_EF31wBmMEdqvcs97umGEYQ">
  <eAnnotations xmi:id="_s2FfIxTaEdqZu-3Jy1-uYg" source="appliedStereotypes">
    <contents xmi:type="Ecore_2:Ecore__EPackage" xmi:id="_uCzrIGDwEdq21OYWcNiX5A" packageName="uml" nsPrefix="uml" nsURI="http://www.eclipse.org/uml2/2.0.0/UML" basePackage="org.eclipse.uml2" prefix="UML"/>
  </eAnnotations>
  <eAnnotations xmi:id="_N-wy8GEIEdqmfMQqVJOcWQ" source="capabilities">
    <eAnnotations xmi:id="_N-wy8WEIEdqmfMQqVJOcWQ" source="UML::Actions::IntermediateActions" references="_NuYNlWEIEdqmfMQqVJOcWQ _NtxwuGEIEdqmfMQqVJOcWQ _NuErkGEIEdqmfMQqVJOcWQ _Ntom3WEIEdqmfMQqVJOcWQ _NuOcpWEIEdqmfMQqVJOcWQ _NtomvGEIEdqmfMQqVJOcWQ _NuErvGEIEdqmfMQqVJOcWQ _NuOcmWEIEdqmfMQqVJOcWQ _NuOctmEIEdqmfMQqVJOcWQ _NtxwyWEIEdqmfMQqVJOcWQ _NtonIGEIEdqmfMQqVJOcWQ _NuOcomEIEdqmfMQqVJOcWQ _NuOckGEIEdqmfMQqVJOcWQ _NtonHWEIEdqmfMQqVJOcWQ _NtomzmEIEdqmfMQqVJOcWQ _Nt7h_GEIEdqmfMQqVJOcWQ _NuOcmGEIEdqmfMQqVJOcWQ _Ntxw_2EIEdqmfMQqVJOcWQ _Ntom9WEIEdqmfMQqVJOcWQ _NuErl2EIEdqmfMQqVJOcWQ _Nte19WEIEdqmfMQqVJOcWQ _Ntxw0WEIEdqmfMQqVJOcWQ _NuOcqmEIEdqmfMQqVJOcWQ _NtonF2EIEdqmfMQqVJOcWQ _NuErnGEIEdqmfMQqVJOcWQ _NuYNkGEIEdqmfMQqVJOcWQ _Ntxw8mEIEdqmfMQqVJOcWQ _NuOcs2EIEdqmfMQqVJOcWQ _NuOctWEIEdqmfMQqVJOcWQ _NuYNn2EIEdqmfMQqVJOcWQ _NuYNpGEIEdqmfMQqVJOcWQ _Ntom_2EIEdqmfMQqVJOcWQ _Nt7hq2EIEdqmfMQqVJOcWQ _NuOcp2EIEdqmfMQqVJOcWQ _NuOcoWEIEdqmfMQqVJOcWQ _NuErpmEIEdqmfMQqVJOcWQ _NuEroWEIEdqmfMQqVJOcWQ _NuErtGEIEdqmfMQqVJOcWQ _Nt7h9mEIEdqmfMQqVJOcWQ _Nt7h92EIEdqmfMQqVJOcWQ _Nt7h2mEIEdqmfMQqVJOcWQ _NtonNWEIEdqmfMQqVJOcWQ _NuYNkmEIEdqmfMQqVJOcWQ _NuOcrGEIEdqmfMQqVJOcWQ _NuErvmEIEdqmfMQqVJOcWQ _Nt7hsWEIEdqmfMQqVJOcWQ _NuOckWEIEdqmfMQqVJOcWQ _Ntxw6WEIEdqmfMQqVJOcWQ _Nte1zWEIEdqmfMQqVJOcWQ _Nte18mEIEdqmfMQqVJOcWQ _NtonL2EIEdqmfMQqVJOcWQ _NuErqmEIEdqmfMQqVJOcWQ _NuOclGEIEdqmfMQqVJOcWQ _NuErqWEIEdqmfMQqVJOcWQ _NuYNm2EIEdqmfMQqVJOcWQ _NuErrWEIEdqmfMQqVJOcWQ _Nt7hy2EIEdqmfMQqVJOcWQ _Nt7h0WEIEdqmfMQqVJOcWQ _NuOcnmEIEdqmfMQqVJOcWQ _Ntom-WEIEdqmfMQqVJOcWQ _NuErt2EIEdqmfMQqVJOcWQ _NuErkmEIEdqmfMQqVJOcWQ _NuOclWEIEdqmfMQqVJOcWQ _NtxxDmEIEdqmfMQqVJOcWQ _Ntxw9WEIEdqmfMQqVJOcWQ _NtomwmEIEdqmfMQqVJOcWQ _Ntom42EIEdqmfMQqVJOcWQ _NtxxBWEIEdqmfMQqVJOcWQ _NtonDmEIEdqmfMQqVJOcWQ _Ntxw42EIEdqmfMQqVJOcWQ _NuOcnGEIEdqmfMQqVJOcWQ _Nt7hvmEIEdqmfMQqVJOcWQ _NtomsGEIEdqmfMQqVJOcWQ _Ntxw-WEIEdqmfMQqVJOcWQ _NuErmmEIEdqmfMQqVJOcWQ _Nt7h8GEIEdqmfMQqVJOcWQ _NuYNomEIEdqmfMQqVJOcWQ _NuEruWEIEdqmfMQqVJOcWQ _NuOcuGEIEdqmfMQqVJOcWQ _Nt7homEIEdqmfMQqVJOcWQ _NuYNlmEIEdqmfMQqVJOcWQ _Nte14GEIEdqmfMQqVJOcWQ _Nt7hwmEIEdqmfMQqVJOcWQ _NuOcr2EIEdqmfMQqVJOcWQ _NtxwoGEIEdqmfMQqVJOcWQ _Nt7h4WEIEdqmfMQqVJOcWQ _NuYNmWEIEdqmfMQqVJOcWQ _NtxwrGEIEdqmfMQqVJOcWQ _NtxwvWEIEdqmfMQqVJOcWQ _NtxwsmEIEdqmfMQqVJOcWQ _NtonJmEIEdqmfMQqVJOcWQ _Nt7hxWEIEdqmfMQqVJOcWQ _NuYNqWEIEdqmfMQqVJOcWQ _Nt7h-mEIEdqmfMQqVJOcWQ _NuErsmEIEdqmfMQqVJOcWQ _NtomyGEIEdqmfMQqVJOcWQ _NuOcsGEIEdqmfMQqVJOcWQ _NuErr2EIEdqmfMQqVJOcWQ _NtonCGEIEdqmfMQqVJOcWQ _NtxxCGEIEdqmfMQqVJOcWQ _Nt7h6mEIEdqmfMQqVJOcWQ _Nte13GEIEdqmfMQqVJOcWQ _NuYNp2EIEdqmfMQqVJOcWQ _Nt7h3WEIEdqmfMQqVJOcWQ _NuYNnmEIEdqmfMQqVJOcWQ _NtxwzWEIEdqmfMQqVJOcWQ _NtonKWEIEdqmfMQqVJOcWQ _NuOcumEIEdqmfMQqVJOcWQ _NuErn2EIEdqmfMQqVJOcWQ _Nte172EIEdqmfMQqVJOcWQ _Nt7htWEIEdqmfMQqVJOcWQ _NtonOGEIEdqmfMQqVJOcWQ _NuOcuWEIEdqmfMQqVJOcWQ _NuErpGEIEdqmfMQqVJOcWQ _Nte15mEIEdqmfMQqVJOcWQ _NuErlWEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N-wy8mEIEdqmfMQqVJOcWQ" source="UML::AuxiliaryConstructs::Templates" references="_N3d4Z2EIEdqmfMQqVJOcWQ _N3BMNmEIEdqmfMQqVJOcWQ _N3BMTWEIEdqmfMQqVJOcWQ _N3BMR2EIEdqmfMQqVJOcWQ _N3BMfWEIEdqmfMQqVJOcWQ _N3UHI2EIEdqmfMQqVJOcWQ _N3K9bWEIEdqmfMQqVJOcWQ _N3wzKWEIEdqmfMQqVJOcWQ _N3nCHWEIEdqmfMQqVJOcWQ _N3wzFWEIEdqmfMQqVJOcWQ _N3BMd2EIEdqmfMQqVJOcWQ _N3wzMGEIEdqmfMQqVJOcWQ _N3d4IGEIEdqmfMQqVJOcWQ _N3BMl2EIEdqmfMQqVJOcWQ _N3K9YGEIEdqmfMQqVJOcWQ _N3wzEGEIEdqmfMQqVJOcWQ _N3BMoWEIEdqmfMQqVJOcWQ _N3wzEmEIEdqmfMQqVJOcWQ _N3d4KWEIEdqmfMQqVJOcWQ _N3nCEGEIEdqmfMQqVJOcWQ _N3BMMGEIEdqmfMQqVJOcWQ _N3BMbWEIEdqmfMQqVJOcWQ _N3nCIWEIEdqmfMQqVJOcWQ _N3K9QWEIEdqmfMQqVJOcWQ _N3K9WmEIEdqmfMQqVJOcWQ _N3wzG2EIEdqmfMQqVJOcWQ _N3K9UGEIEdqmfMQqVJOcWQ _N36kE2EIEdqmfMQqVJOcWQ _N3K9TWEIEdqmfMQqVJOcWQ _Ni59sGEIEdqmfMQqVJOcWQ _NiwMlmEIEdqmfMQqVJOcWQ _N3K9MmEIEdqmfMQqVJOcWQ _N3BMm2EIEdqmfMQqVJOcWQ _N3d4MWEIEdqmfMQqVJOcWQ _N3BMOmEIEdqmfMQqVJOcWQ _N3nCGGEIEdqmfMQqVJOcWQ _N3wzI2EIEdqmfMQqVJOcWQ _N3wzK2EIEdqmfMQqVJOcWQ _N36kFWEIEdqmfMQqVJOcWQ _NjWCYGEIEdqmfMQqVJOcWQ _N3BMWWEIEdqmfMQqVJOcWQ _N3nCH2EIEdqmfMQqVJOcWQ _N3wzGGEIEdqmfMQqVJOcWQ _N3UHNmEIEdqmfMQqVJOcWQ _N3d4JmEIEdqmfMQqVJOcWQ _N3K9NWEIEdqmfMQqVJOcWQ _N3nCFWEIEdqmfMQqVJOcWQ _N3nCF2EIEdqmfMQqVJOcWQ _N3UHIGEIEdqmfMQqVJOcWQ _N3d4LWEIEdqmfMQqVJOcWQ _N3BMXWEIEdqmfMQqVJOcWQ _N3nCG2EIEdqmfMQqVJOcWQ _N3d4aWEIEdqmfMQqVJOcWQ _N3d4PGEIEdqmfMQqVJOcWQ _N3BMQGEIEdqmfMQqVJOcWQ _N3nCGmEIEdqmfMQqVJOcWQ _N3K9VGEIEdqmfMQqVJOcWQ _N3BMY2EIEdqmfMQqVJOcWQ _N3nCE2EIEdqmfMQqVJOcWQ _N3BMq2EIEdqmfMQqVJOcWQ _N3K9dmEIEdqmfMQqVJOcWQ _N3BMp2EIEdqmfMQqVJOcWQ _N3BMU2EIEdqmfMQqVJOcWQ _N3d4TGEIEdqmfMQqVJOcWQ _NrGQSmEIEdqmfMQqVJOcWQ _N3d4RmEIEdqmfMQqVJOcWQ _N3d4WmEIEdqmfMQqVJOcWQ _N3wzIWEIEdqmfMQqVJOcWQ _NjM4UGEIEdqmfMQqVJOcWQ _N3d4aGEIEdqmfMQqVJOcWQ _N3d4VGEIEdqmfMQqVJOcWQ _N3wzEWEIEdqmfMQqVJOcWQ _N36kEmEIEdqmfMQqVJOcWQ _N3d4XmEIEdqmfMQqVJOcWQ _N3d4YWEIEdqmfMQqVJOcWQ _N3K9SGEIEdqmfMQqVJOcWQ _Nimb8GEIEdqmfMQqVJOcWQ _N3wzJmEIEdqmfMQqVJOcWQ _N3K9O2EIEdqmfMQqVJOcWQ _N3wzKGEIEdqmfMQqVJOcWQ _N3wzHmEIEdqmfMQqVJOcWQ _N3UHMmEIEdqmfMQqVJOcWQ _N3nCFGEIEdqmfMQqVJOcWQ _N3BMkWEIEdqmfMQqVJOcWQ _NiTgcGEIEdqmfMQqVJOcWQ _N3BMtWEIEdqmfMQqVJOcWQ _N3BMg2EIEdqmfMQqVJOcWQ _N36kFGEIEdqmfMQqVJOcWQ _N3d4QmEIEdqmfMQqVJOcWQ _N3nCHGEIEdqmfMQqVJOcWQ _N3d4NWEIEdqmfMQqVJOcWQ _N3BMZ2EIEdqmfMQqVJOcWQ _N3UHLGEIEdqmfMQqVJOcWQ _N3BMiGEIEdqmfMQqVJOcWQ _NjfzQGEIEdqmfMQqVJOcWQ _N3wzLWEIEdqmfMQqVJOcWQ _N3BMsWEIEdqmfMQqVJOcWQ _N36kEGEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N-wy82EIEdqmfMQqVJOcWQ" source="UML::Activities::CompleteStructuredActivities" references="_N0CJoGEIEdqmfMQqVJOcWQ _N0CJr2EIEdqmfMQqVJOcWQ _Nz4_tWEIEdqmfMQqVJOcWQ _N0CJomEIEdqmfMQqVJOcWQ _NzvOumEIEdqmfMQqVJOcWQ _N0CJqmEIEdqmfMQqVJOcWQ _Nz4_xGEIEdqmfMQqVJOcWQ _N0CJtGEIEdqmfMQqVJOcWQ _NxDuRGEIEdqmfMQqVJOcWQ _Nz4_sWEIEdqmfMQqVJOcWQ _Nz4_5GEIEdqmfMQqVJOcWQ _N0CJpWEIEdqmfMQqVJOcWQ _N0CJvGEIEdqmfMQqVJOcWQ _N0CJp2EIEdqmfMQqVJOcWQ _Ny12-WEIEdqmfMQqVJOcWQ _NxDuLWEIEdqmfMQqVJOcWQ _Nz4_0GEIEdqmfMQqVJOcWQ _Nw59MmEIEdqmfMQqVJOcWQ _Ny_n-GEIEdqmfMQqVJOcWQ _NxDudWEIEdqmfMQqVJOcWQ _Nz4_1GEIEdqmfMQqVJOcWQ _N0CJrGEIEdqmfMQqVJOcWQ _NxWpF2EIEdqmfMQqVJOcWQ _N0CJt2EIEdqmfMQqVJOcWQ _Ny_n4WEIEdqmfMQqVJOcWQ _Nz4_3WEIEdqmfMQqVJOcWQ _N0CJsGEIEdqmfMQqVJOcWQ _N0CJuWEIEdqmfMQqVJOcWQ _Ny_n0GEIEdqmfMQqVJOcWQ _N0CJs2EIEdqmfMQqVJOcWQ _Nz4_ymEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N-wy9GEIEdqmfMQqVJOcWQ" source="UML::CompositeStructures::InternalStructures" references="_NrQBH2EIEdqmfMQqVJOcWQ _NrQBGGEIEdqmfMQqVJOcWQ _NrGQOGEIEdqmfMQqVJOcWQ _NrGQLGEIEdqmfMQqVJOcWQ _NrGQJGEIEdqmfMQqVJOcWQ _NrGQEGEIEdqmfMQqVJOcWQ _NrGQIGEIEdqmfMQqVJOcWQ _NrQBFGEIEdqmfMQqVJOcWQ _Nq8fL2EIEdqmfMQqVJOcWQ _NrGQMmEIEdqmfMQqVJOcWQ _Ni59sGEIEdqmfMQqVJOcWQ _Nq8fO2EIEdqmfMQqVJOcWQ _Nq8fNWEIEdqmfMQqVJOcWQ _NrQBHGEIEdqmfMQqVJOcWQ _NrQBMGEIEdqmfMQqVJOcWQ _NrGQHGEIEdqmfMQqVJOcWQ _NrQBLWEIEdqmfMQqVJOcWQ _NjyuQGEIEdqmfMQqVJOcWQ _NrGQPmEIEdqmfMQqVJOcWQ _NrQBKGEIEdqmfMQqVJOcWQ _NrQBMmEIEdqmfMQqVJOcWQ _Nq8fP2EIEdqmfMQqVJOcWQ _NiTgemEIEdqmfMQqVJOcWQ _NrQBNWEIEdqmfMQqVJOcWQ _NrGQTWEIEdqmfMQqVJOcWQ _NrQBNmEIEdqmfMQqVJOcWQ _NrQBK2EIEdqmfMQqVJOcWQ _NrGQSmEIEdqmfMQqVJOcWQ _NrGQRGEIEdqmfMQqVJOcWQ _NrQBIWEIEdqmfMQqVJOcWQ _NrQBG2EIEdqmfMQqVJOcWQ _NrQBEWEIEdqmfMQqVJOcWQ _NjyuPWEIEdqmfMQqVJOcWQ _NiTgcGEIEdqmfMQqVJOcWQ _NrQBJGEIEdqmfMQqVJOcWQ _NrQBEGEIEdqmfMQqVJOcWQ _NrQBOWEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N-wy9WEIEdqmfMQqVJOcWQ" source="UML::Classes::Kernel" references="_NlleCWEIEdqmfMQqVJOcWQ _Nn-DmWEIEdqmfMQqVJOcWQ _NlSjJWEIEdqmfMQqVJOcWQ _NjWCvmEIEdqmfMQqVJOcWQ _Nme10GEIEdqmfMQqVJOcWQ _NjWCimEIEdqmfMQqVJOcWQ _NkPaImEIEdqmfMQqVJOcWQ _NiwMj2EIEdqmfMQqVJOcWQ _NnOcsGEIEdqmfMQqVJOcWQ _NlIyJmEIEdqmfMQqVJOcWQ _Ni5-DmEIEdqmfMQqVJOcWQ _Nmxw5GEIEdqmfMQqVJOcWQ _NnOctmEIEdqmfMQqVJOcWQ _Nn-DnGEIEdqmfMQqVJOcWQ _Nme13GEIEdqmfMQqVJOcWQ _NkZLLmEIEdqmfMQqVJOcWQ _NlSjImEIEdqmfMQqVJOcWQ _NjM45WEIEdqmfMQqVJOcWQ _NjM4u2EIEdqmfMQqVJOcWQ _Nj8fNWEIEdqmfMQqVJOcWQ _NkZLL2EIEdqmfMQqVJOcWQ _NkZLImEIEdqmfMQqVJOcWQ _Nimb4WEIEdqmfMQqVJOcWQ _NjWCp2EIEdqmfMQqVJOcWQ _NjfzeWEIEdqmfMQqVJOcWQ _NjM4tGEIEdqmfMQqVJOcWQ _Nm66vmEIEdqmfMQqVJOcWQ _NidRmmEIEdqmfMQqVJOcWQ _NimbYGEIEdqmfMQqVJOcWQ _NkGQSWEIEdqmfMQqVJOcWQ _NkGQNmEIEdqmfMQqVJOcWQ _NjM4emEIEdqmfMQqVJOcWQ _Nn0SlWEIEdqmfMQqVJOcWQ _NjM4ymEIEdqmfMQqVJOcWQ _Nj8fU2EIEdqmfMQqVJOcWQ _NkPaNGEIEdqmfMQqVJOcWQ _Ni5-B2EIEdqmfMQqVJOcWQ _NkZLMWEIEdqmfMQqVJOcWQ _NjM4ZmEIEdqmfMQqVJOcWQ _Nm6602EIEdqmfMQqVJOcWQ _NotqcGEIEdqmfMQqVJOcWQ _NmVE3WEIEdqmfMQqVJOcWQ _NlleEGEIEdqmfMQqVJOcWQ _Ni59zGEIEdqmfMQqVJOcWQ _NiwMb2EIEdqmfMQqVJOcWQ _Nimbk2EIEdqmfMQqVJOcWQ _No3bcGEIEdqmfMQqVJOcWQ _NlSjB2EIEdqmfMQqVJOcWQ _NjDHpmEIEdqmfMQqVJOcWQ _NjM4gGEIEdqmfMQqVJOcWQ _Ni59nGEIEdqmfMQqVJOcWQ _NnOcsmEIEdqmfMQqVJOcWQ _Ni59omEIEdqmfMQqVJOcWQ _NkPaLmEIEdqmfMQqVJOcWQ _Ni594GEIEdqmfMQqVJOcWQ _Noj5emEIEdqmfMQqVJOcWQ _NkPaLGEIEdqmfMQqVJOcWQ _NnXmuGEIEdqmfMQqVJOcWQ _NjfzamEIEdqmfMQqVJOcWQ _NnrIumEIEdqmfMQqVJOcWQ _Nj8fUWEIEdqmfMQqVJOcWQ _NlSjO2EIEdqmfMQqVJOcWQ _Nmn_ymEIEdqmfMQqVJOcWQ _NiwMaWEIEdqmfMQqVJOcWQ _NjpkUmEIEdqmfMQqVJOcWQ _NnrIwWEIEdqmfMQqVJOcWQ _NjWCsGEIEdqmfMQqVJOcWQ _NkPaJ2EIEdqmfMQqVJOcWQ _NjDHbGEIEdqmfMQqVJOcWQ _Nme1-WEIEdqmfMQqVJOcWQ _Nj8fTmEIEdqmfMQqVJOcWQ _NidRcGEIEdqmfMQqVJOcWQ _NlleA2EIEdqmfMQqVJOcWQ _NkiVFWEIEdqmfMQqVJOcWQ _Noj5fGEIEdqmfMQqVJOcWQ _NlleIWEIEdqmfMQqVJOcWQ _Ni597mEIEdqmfMQqVJOcWQ _NkGQRWEIEdqmfMQqVJOcWQ _NkZLNmEIEdqmfMQqVJOcWQ _NjWCtmEIEdqmfMQqVJOcWQ _Nme17GEIEdqmfMQqVJOcWQ _Nme172EIEdqmfMQqVJOcWQ _Nn-DlWEIEdqmfMQqVJOcWQ _NiwMgWEIEdqmfMQqVJOcWQ _NjpkR2EIEdqmfMQqVJOcWQ _Njfzf2EIEdqmfMQqVJOcWQ _NjM41GEIEdqmfMQqVJOcWQ _NnrIsmEIEdqmfMQqVJOcWQ _NimbfGEIEdqmfMQqVJOcWQ _NoHNgmEIEdqmfMQqVJOcWQ _NjWCn2EIEdqmfMQqVJOcWQ _NlSjA2EIEdqmfMQqVJOcWQ _NjyuRWEIEdqmfMQqVJOcWQ _NjyuR2EIEdqmfMQqVJOcWQ _Ni59bWEIEdqmfMQqVJOcWQ _Ni599GEIEdqmfMQqVJOcWQ _NnOcuGEIEdqmfMQqVJOcWQ _NjM4o2EIEdqmfMQqVJOcWQ _NmLT5GEIEdqmfMQqVJOcWQ _NlSjLmEIEdqmfMQqVJOcWQ _Ni59Y2EIEdqmfMQqVJOcWQ _Ni59sGEIEdqmfMQqVJOcWQ _NidRw2EIEdqmfMQqVJOcWQ _NkZLKWEIEdqmfMQqVJOcWQ _NkPaIGEIEdqmfMQqVJOcWQ _NjDHUGEIEdqmfMQqVJOcWQ _NkZLOGEIEdqmfMQqVJOcWQ _NotqemEIEdqmfMQqVJOcWQ _Nme14GEIEdqmfMQqVJOcWQ _NjDHlmEIEdqmfMQqVJOcWQ _NidRoWEIEdqmfMQqVJOcWQ _NjWCmWEIEdqmfMQqVJOcWQ _NotqdWEIEdqmfMQqVJOcWQ _NiwMlmEIEdqmfMQqVJOcWQ _Nj8fQ2EIEdqmfMQqVJOcWQ _NkZLN2EIEdqmfMQqVJOcWQ _Nn-Dk2EIEdqmfMQqVJOcWQ _NlSjDGEIEdqmfMQqVJOcWQ _NkPaK2EIEdqmfMQqVJOcWQ _Nj8fNGEIEdqmfMQqVJOcWQ _NidRkWEIEdqmfMQqVJOcWQ _NjWCZ2EIEdqmfMQqVJOcWQ _NkiVEmEIEdqmfMQqVJOcWQ _NimbcmEIEdqmfMQqVJOcWQ _Nimb12EIEdqmfMQqVJOcWQ _NnrIxmEIEdqmfMQqVJOcWQ _NjDHcmEIEdqmfMQqVJOcWQ _NiwMmmEIEdqmfMQqVJOcWQ _NidRimEIEdqmfMQqVJOcWQ _Nm660WEIEdqmfMQqVJOcWQ _Ni59iGEIEdqmfMQqVJOcWQ _NmCJ7WEIEdqmfMQqVJOcWQ _NidR2mEIEdqmfMQqVJOcWQ _NkPaMGEIEdqmfMQqVJOcWQ _NjWCYGEIEdqmfMQqVJOcWQ _Ni591WEIEdqmfMQqVJOcWQ _NidRvWEIEdqmfMQqVJOcWQ _NjWCf2EIEdqmfMQqVJOcWQ _NidR4GEIEdqmfMQqVJOcWQ _NidRzGEIEdqmfMQqVJOcWQ _Nn-DnWEIEdqmfMQqVJOcWQ _Ni59k2EIEdqmfMQqVJOcWQ _Nimbr2EIEdqmfMQqVJOcWQ _NlSjEWEIEdqmfMQqVJOcWQ _NkiVEGEIEdqmfMQqVJOcWQ _Ni59_2EIEdqmfMQqVJOcWQ _Nlun5mEIEdqmfMQqVJOcWQ _Ni590mEIEdqmfMQqVJOcWQ _NjyuMWEIEdqmfMQqVJOcWQ _Nimb62EIEdqmfMQqVJOcWQ _NlIyHmEIEdqmfMQqVJOcWQ _NjWCbWEIEdqmfMQqVJOcWQ _NidR0mEIEdqmfMQqVJOcWQ _Nm66y2EIEdqmfMQqVJOcWQ _NjM4lGEIEdqmfMQqVJOcWQ _NjyuQGEIEdqmfMQqVJOcWQ _NlleH2EIEdqmfMQqVJOcWQ _Nm66z2EIEdqmfMQqVJOcWQ _NjM4bWEIEdqmfMQqVJOcWQ _NkZLPWEIEdqmfMQqVJOcWQ _NjM40GEIEdqmfMQqVJOcWQ _NjM472EIEdqmfMQqVJOcWQ _NkPaKmEIEdqmfMQqVJOcWQ _NiwMe2EIEdqmfMQqVJOcWQ _NjfzTGEIEdqmfMQqVJOcWQ _NlSjM2EIEdqmfMQqVJOcWQ _NjDHU2EIEdqmfMQqVJOcWQ _No3bdWEIEdqmfMQqVJOcWQ _NlIyAGEIEdqmfMQqVJOcWQ _Ni59cmEIEdqmfMQqVJOcWQ _NjWCxGEIEdqmfMQqVJOcWQ _NlIyLWEIEdqmfMQqVJOcWQ _NotqcmEIEdqmfMQqVJOcWQ _NiTgemEIEdqmfMQqVJOcWQ _NimbwWEIEdqmfMQqVJOcWQ _NkZLJWEIEdqmfMQqVJOcWQ _NlSjFGEIEdqmfMQqVJOcWQ _Noj5cmEIEdqmfMQqVJOcWQ _NimbbGEIEdqmfMQqVJOcWQ _NkZLOmEIEdqmfMQqVJOcWQ _NidR-GEIEdqmfMQqVJOcWQ _Ni59xWEIEdqmfMQqVJOcWQ _Nn-DmmEIEdqmfMQqVJOcWQ _Nm66sGEIEdqmfMQqVJOcWQ _NjyuMGEIEdqmfMQqVJOcWQ _NkPaJGEIEdqmfMQqVJOcWQ _NjWCW2EIEdqmfMQqVJOcWQ _NidRgWEIEdqmfMQqVJOcWQ _NjM4WWEIEdqmfMQqVJOcWQ _Nj8fOmEIEdqmfMQqVJOcWQ _NmVE5mEIEdqmfMQqVJOcWQ _NmLT3WEIEdqmfMQqVJOcWQ _Nj8fQWEIEdqmfMQqVJOcWQ _NiTggGEIEdqmfMQqVJOcWQ _NjWCQGEIEdqmfMQqVJOcWQ _Nj8fTGEIEdqmfMQqVJOcWQ _No3bd2EIEdqmfMQqVJOcWQ _NiTghmEIEdqmfMQqVJOcWQ _NjM4dGEIEdqmfMQqVJOcWQ _NkZLM2EIEdqmfMQqVJOcWQ _Ni59-GEIEdqmfMQqVJOcWQ _NkGQM2EIEdqmfMQqVJOcWQ _NjM4wmEIEdqmfMQqVJOcWQ _NjfzY2EIEdqmfMQqVJOcWQ _NkGQTGEIEdqmfMQqVJOcWQ _NjWChWEIEdqmfMQqVJOcWQ _NidR5mEIEdqmfMQqVJOcWQ _NkPaLWEIEdqmfMQqVJOcWQ _NnrIq2EIEdqmfMQqVJOcWQ _NjfzXGEIEdqmfMQqVJOcWQ _NnrIrmEIEdqmfMQqVJOcWQ _NjM44WEIEdqmfMQqVJOcWQ _Noj5d2EIEdqmfMQqVJOcWQ _NidRemEIEdqmfMQqVJOcWQ _Ni59jGEIEdqmfMQqVJOcWQ _Ni59pmEIEdqmfMQqVJOcWQ _NkGQOWEIEdqmfMQqVJOcWQ _NjM4YWEIEdqmfMQqVJOcWQ _NnrIvWEIEdqmfMQqVJOcWQ _NjWCUWEIEdqmfMQqVJOcWQ _NjyuQ2EIEdqmfMQqVJOcWQ _NjWCkWEIEdqmfMQqVJOcWQ _NlSjGGEIEdqmfMQqVJOcWQ _Ni59gmEIEdqmfMQqVJOcWQ _NjM462EIEdqmfMQqVJOcWQ _NjM4jmEIEdqmfMQqVJOcWQ _NjM4iGEIEdqmfMQqVJOcWQ _NjWCVWEIEdqmfMQqVJOcWQ _Nj8fMGEIEdqmfMQqVJOcWQ _NjyuMmEIEdqmfMQqVJOcWQ _NkGQO2EIEdqmfMQqVJOcWQ _NiwMpGEIEdqmfMQqVJOcWQ _NimbtWEIEdqmfMQqVJOcWQ _NiwMkmEIEdqmfMQqVJOcWQ _NlIyGWEIEdqmfMQqVJOcWQ _Ni59yGEIEdqmfMQqVJOcWQ _Nme102EIEdqmfMQqVJOcWQ _NjyuNWEIEdqmfMQqVJOcWQ _NjDHaWEIEdqmfMQqVJOcWQ _Nn-DkGEIEdqmfMQqVJOcWQ _NkPaMWEIEdqmfMQqVJOcWQ _Nimbu2EIEdqmfMQqVJOcWQ _Nj8fSWEIEdqmfMQqVJOcWQ _NlSjKWEIEdqmfMQqVJOcWQ _Nj8fN2EIEdqmfMQqVJOcWQ _Nj8fRGEIEdqmfMQqVJOcWQ _NjyuRmEIEdqmfMQqVJOcWQ _NidRxmEIEdqmfMQqVJOcWQ _NjWCTWEIEdqmfMQqVJOcWQ _Ni59fGEIEdqmfMQqVJOcWQ _Nj8fRmEIEdqmfMQqVJOcWQ _Nj8fPWEIEdqmfMQqVJOcWQ _Nj8fUGEIEdqmfMQqVJOcWQ _Nimbd2EIEdqmfMQqVJOcWQ _NjM4UGEIEdqmfMQqVJOcWQ _NmLT0mEIEdqmfMQqVJOcWQ _NnOctGEIEdqmfMQqVJOcWQ _NmLT4GEIEdqmfMQqVJOcWQ _NkGQMGEIEdqmfMQqVJOcWQ _Ni59z2EIEdqmfMQqVJOcWQ _NjWCeWEIEdqmfMQqVJOcWQ _NjDHfmEIEdqmfMQqVJOcWQ _Nj8fR2EIEdqmfMQqVJOcWQ _NjDHWWEIEdqmfMQqVJOcWQ _NjDHkWEIEdqmfMQqVJOcWQ _NjfzUmEIEdqmfMQqVJOcWQ _NjWCumEIEdqmfMQqVJOcWQ _NjpkSmEIEdqmfMQqVJOcWQ _NjM4nmEIEdqmfMQqVJOcWQ _NjpkVGEIEdqmfMQqVJOcWQ _NiwMdWEIEdqmfMQqVJOcWQ _NkGQS2EIEdqmfMQqVJOcWQ _Notqe2EIEdqmfMQqVJOcWQ _NimbmGEIEdqmfMQqVJOcWQ _Noj5dWEIEdqmfMQqVJOcWQ _Nlld_WEIEdqmfMQqVJOcWQ _Nj8fMmEIEdqmfMQqVJOcWQ _NjDHi2EIEdqmfMQqVJOcWQ _NkiVF2EIEdqmfMQqVJOcWQ _NjWCo2EIEdqmfMQqVJOcWQ _Ni596GEIEdqmfMQqVJOcWQ _NkGQQGEIEdqmfMQqVJOcWQ _NidR7GEIEdqmfMQqVJOcWQ _NidRs2EIEdqmfMQqVJOcWQ _NmLT6mEIEdqmfMQqVJOcWQ _NjWCrWEIEdqmfMQqVJOcWQ _NkPaKWEIEdqmfMQqVJOcWQ _NkGQRGEIEdqmfMQqVJOcWQ _NjWCc2EIEdqmfMQqVJOcWQ _Ni59kGEIEdqmfMQqVJOcWQ _NjM4hGEIEdqmfMQqVJOcWQ _NkZLIGEIEdqmfMQqVJOcWQ _NjM4XGEIEdqmfMQqVJOcWQ _NjM42GEIEdqmfMQqVJOcWQ _NidR-2EIEdqmfMQqVJOcWQ _Nimb8GEIEdqmfMQqVJOcWQ _Nj8fMWEIEdqmfMQqVJOcWQ _Nme19WEIEdqmfMQqVJOcWQ _NkZLP2EIEdqmfMQqVJOcWQ _NlSjNmEIEdqmfMQqVJOcWQ _NlIyEWEIEdqmfMQqVJOcWQ _NiwMYGEIEdqmfMQqVJOcWQ _NjyuPWEIEdqmfMQqVJOcWQ _NidR82EIEdqmfMQqVJOcWQ _NimbnWEIEdqmfMQqVJOcWQ _NjDHn2EIEdqmfMQqVJOcWQ _NkZLIWEIEdqmfMQqVJOcWQ _NiTgcGEIEdqmfMQqVJOcWQ _NimbxmEIEdqmfMQqVJOcWQ _NkPaIWEIEdqmfMQqVJOcWQ _NoHNhWEIEdqmfMQqVJOcWQ _No3bcmEIEdqmfMQqVJOcWQ _Nj8fOGEIEdqmfMQqVJOcWQ _NiwMimEIEdqmfMQqVJOcWQ _Nn-DmGEIEdqmfMQqVJOcWQ _NkPaI2EIEdqmfMQqVJOcWQ _NiwMn2EIEdqmfMQqVJOcWQ _Ni595GEIEdqmfMQqVJOcWQ _Nimbg2EIEdqmfMQqVJOcWQ _Nlun6WEIEdqmfMQqVJOcWQ _NjM422EIEdqmfMQqVJOcWQ _NidRq2EIEdqmfMQqVJOcWQ _NjDHe2EIEdqmfMQqVJOcWQ _NkGQRmEIEdqmfMQqVJOcWQ _NkZLJ2EIEdqmfMQqVJOcWQ _NkZLLGEIEdqmfMQqVJOcWQ _Ni59eWEIEdqmfMQqVJOcWQ _NkiVGmEIEdqmfMQqVJOcWQ _NkPaJmEIEdqmfMQqVJOcWQ _Nk13GmEIEdqmfMQqVJOcWQ _Nimbb2EIEdqmfMQqVJOcWQ _NkPaMmEIEdqmfMQqVJOcWQ _Ni59aGEIEdqmfMQqVJOcWQ _Ni592mEIEdqmfMQqVJOcWQ _Nimbi2EIEdqmfMQqVJOcWQ _NlSjAGEIEdqmfMQqVJOcWQ _NlSjHWEIEdqmfMQqVJOcWQ _Nme15mEIEdqmfMQqVJOcWQ _NjWCSWEIEdqmfMQqVJOcWQ _NkGQPmEIEdqmfMQqVJOcWQ _NkZLPGEIEdqmfMQqVJOcWQ _Ni5-E2EIEdqmfMQqVJOcWQ _NimbqWEIEdqmfMQqVJOcWQ _NiwMhGEIEdqmfMQqVJOcWQ _Notqd2EIEdqmfMQqVJOcWQ _NjpkTmEIEdqmfMQqVJOcWQ _NjM4rWEIEdqmfMQqVJOcWQ _Ni59lmEIEdqmfMQqVJOcWQ _NjyuOWEIEdqmfMQqVJOcWQ _NjfzVmEIEdqmfMQqVJOcWQ _NjDHh2EIEdqmfMQqVJOcWQ _Nimbo2EIEdqmfMQqVJOcWQ _NjfzQGEIEdqmfMQqVJOcWQ _NmVE6mEIEdqmfMQqVJOcWQ _NnOcvGEIEdqmfMQqVJOcWQ _NjDHdWEIEdqmfMQqVJOcWQ _NidRdGEIEdqmfMQqVJOcWQ _NnOcumEIEdqmfMQqVJOcWQ _NjfzdmEIEdqmfMQqVJOcWQ _NkZLJmEIEdqmfMQqVJOcWQ _NjM4mWEIEdqmfMQqVJOcWQ _Nimbz2EIEdqmfMQqVJOcWQ _Nj8fTWEIEdqmfMQqVJOcWQ _Nlun-GEIEdqmfMQqVJOcWQ _Noj5cGEIEdqmfMQqVJOcWQ _NkGQMmEIEdqmfMQqVJOcWQ _NjM4qGEIEdqmfMQqVJOcWQ _NkGQQmEIEdqmfMQqVJOcWQ _NkZLOWEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N-wy9mEIEdqmfMQqVJOcWQ" source="UML::UseCases" references="_NqWpU2EIEdqmfMQqVJOcWQ _NqWpgWEIEdqmfMQqVJOcWQ _NqWpcGEIEdqmfMQqVJOcWQ _NqfzOmEIEdqmfMQqVJOcWQ _NqfzMWEIEdqmfMQqVJOcWQ _NqfzJWEIEdqmfMQqVJOcWQ _NqfzL2EIEdqmfMQqVJOcWQ _NqM4b2EIEdqmfMQqVJOcWQ _NqfzImEIEdqmfMQqVJOcWQ _NqfzJ2EIEdqmfMQqVJOcWQ _NqWpOmEIEdqmfMQqVJOcWQ _NqWpNGEIEdqmfMQqVJOcWQ _NqfzPWEIEdqmfMQqVJOcWQ _NqfzNWEIEdqmfMQqVJOcWQ _NqWpamEIEdqmfMQqVJOcWQ _NqWpd2EIEdqmfMQqVJOcWQ _NqM4aGEIEdqmfMQqVJOcWQ _NqWpWWEIEdqmfMQqVJOcWQ _NqWpX2EIEdqmfMQqVJOcWQ _NqfzOGEIEdqmfMQqVJOcWQ _NqfzKmEIEdqmfMQqVJOcWQ _NqM4eWEIEdqmfMQqVJOcWQ _NqWpMGEIEdqmfMQqVJOcWQ _NqM4c2EIEdqmfMQqVJOcWQ _NqWpTWEIEdqmfMQqVJOcWQ _NiTgcGEIEdqmfMQqVJOcWQ _NqfzIGEIEdqmfMQqVJOcWQ _NqM4X2EIEdqmfMQqVJOcWQ _NqWpY2EIEdqmfMQqVJOcWQ _NqWpPmEIEdqmfMQqVJOcWQ _NqfzLWEIEdqmfMQqVJOcWQ _NqM4f2EIEdqmfMQqVJOcWQ _NqfzNGEIEdqmfMQqVJOcWQ _NqWpfWEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_Ne4GEIEdqmfMQqVJOcWQ" source="UML::Interactions::Fragments" references="_NscT9WEIEdqmfMQqVJOcWQ _NscT5mEIEdqmfMQqVJOcWQ _NscT-2EIEdqmfMQqVJOcWQ _NsSi4GEIEdqmfMQqVJOcWQ _NsSjMGEIEdqmfMQqVJOcWQ _NsIyGmEIEdqmfMQqVJOcWQ _NsSi82EIEdqmfMQqVJOcWQ _NscT_mEIEdqmfMQqVJOcWQ _NsIx-GEIEdqmfMQqVJOcWQ _NsSjBmEIEdqmfMQqVJOcWQ _NscT_2EIEdqmfMQqVJOcWQ _NsIyIGEIEdqmfMQqVJOcWQ _NsIx_mEIEdqmfMQqVJOcWQ _NsIyQWEIEdqmfMQqVJOcWQ _NsSi-WEIEdqmfMQqVJOcWQ _NsSjLWEIEdqmfMQqVJOcWQ _NsSjH2EIEdqmfMQqVJOcWQ _NrZLBmEIEdqmfMQqVJOcWQ _NrZLJWEIEdqmfMQqVJOcWQ _NscT8GEIEdqmfMQqVJOcWQ _NsSjLmEIEdqmfMQqVJOcWQ _NsSjKGEIEdqmfMQqVJOcWQ _NscT7mEIEdqmfMQqVJOcWQ _NsSjFmEIEdqmfMQqVJOcWQ _NscT4GEIEdqmfMQqVJOcWQ _NsIyBGEIEdqmfMQqVJOcWQ _NsSi_2EIEdqmfMQqVJOcWQ _NscT82EIEdqmfMQqVJOcWQ _NsIyR2EIEdqmfMQqVJOcWQ _NscUAmEIEdqmfMQqVJOcWQ _NsIyEGEIEdqmfMQqVJOcWQ _NscT4mEIEdqmfMQqVJOcWQ _NscT6WEIEdqmfMQqVJOcWQ _NscT-GEIEdqmfMQqVJOcWQ _NscUB2EIEdqmfMQqVJOcWQ _NscT_WEIEdqmfMQqVJOcWQ _NsSjLGEIEdqmfMQqVJOcWQ _NsIyYWEIEdqmfMQqVJOcWQ _NsSjGWEIEdqmfMQqVJOcWQ _NscT62EIEdqmfMQqVJOcWQ _NsIx9GEIEdqmfMQqVJOcWQ _NscT5WEIEdqmfMQqVJOcWQ _NscUBmEIEdqmfMQqVJOcWQ _NsSjCmEIEdqmfMQqVJOcWQ _NscT-mEIEdqmfMQqVJOcWQ _NrQBPGEIEdqmfMQqVJOcWQ _NsIx5WEIEdqmfMQqVJOcWQ _NsSi72EIEdqmfMQqVJOcWQ _NsIyO2EIEdqmfMQqVJOcWQ _NsIyJmEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_Ne4WEIEdqmfMQqVJOcWQ" source="UML::Classes::AssociationClasses" references="_N23bOWEIEdqmfMQqVJOcWQ _N23bSGEIEdqmfMQqVJOcWQ _Ni59sGEIEdqmfMQqVJOcWQ _N23bVGEIEdqmfMQqVJOcWQ _N23bTmEIEdqmfMQqVJOcWQ _N23bQGEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_Ne4mEIEdqmfMQqVJOcWQ" source="UML::Activities::BasicActivities" references="_NxNfUmEIEdqmfMQqVJOcWQ _Nu05q2EIEdqmfMQqVJOcWQ _NxNfIGEIEdqmfMQqVJOcWQ _NxDuKmEIEdqmfMQqVJOcWQ _NxDuaWEIEdqmfMQqVJOcWQ _NxWpE2EIEdqmfMQqVJOcWQ _NxWpGGEIEdqmfMQqVJOcWQ _NxgaEmEIEdqmfMQqVJOcWQ _NxNfQ2EIEdqmfMQqVJOcWQ _NxDuRGEIEdqmfMQqVJOcWQ _NxWpFmEIEdqmfMQqVJOcWQ _Nw59TWEIEdqmfMQqVJOcWQ _NxDuIGEIEdqmfMQqVJOcWQ _NxDuQGEIEdqmfMQqVJOcWQ _NxDuVGEIEdqmfMQqVJOcWQ _NxDuLWEIEdqmfMQqVJOcWQ _NxDuPGEIEdqmfMQqVJOcWQ _Nw59IGEIEdqmfMQqVJOcWQ _NxNfO2EIEdqmfMQqVJOcWQ _Nw59MmEIEdqmfMQqVJOcWQ _NxDuTmEIEdqmfMQqVJOcWQ _NxWpHGEIEdqmfMQqVJOcWQ _NxDuSmEIEdqmfMQqVJOcWQ _NxNfP2EIEdqmfMQqVJOcWQ _NxDudWEIEdqmfMQqVJOcWQ _NxDuNmEIEdqmfMQqVJOcWQ _NxNfMmEIEdqmfMQqVJOcWQ _NxWpF2EIEdqmfMQqVJOcWQ _NxNfT2EIEdqmfMQqVJOcWQ _NxDuYGEIEdqmfMQqVJOcWQ _NxWpGWEIEdqmfMQqVJOcWQ _NxWpFWEIEdqmfMQqVJOcWQ _NxgaEGEIEdqmfMQqVJOcWQ _NxWpGmEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_Ne42EIEdqmfMQqVJOcWQ" source="UML::Activities::IntermediateActivities" references="_NxpkIGEIEdqmfMQqVJOcWQ _NxgaVWEIEdqmfMQqVJOcWQ _NxDuaWEIEdqmfMQqVJOcWQ _Nw59XmEIEdqmfMQqVJOcWQ _Nx9GBGEIEdqmfMQqVJOcWQ _NxzVC2EIEdqmfMQqVJOcWQ _NyGP8GEIEdqmfMQqVJOcWQ _NxgaN2EIEdqmfMQqVJOcWQ _Nw59X2EIEdqmfMQqVJOcWQ _NxDuRGEIEdqmfMQqVJOcWQ _NxzVCmEIEdqmfMQqVJOcWQ _NxgaPWEIEdqmfMQqVJOcWQ _NxpkCWEIEdqmfMQqVJOcWQ _NxzVBmEIEdqmfMQqVJOcWQ _NxpkFWEIEdqmfMQqVJOcWQ _NxgaOmEIEdqmfMQqVJOcWQ _Nw59TWEIEdqmfMQqVJOcWQ _Nw59VmEIEdqmfMQqVJOcWQ _Nx9GAmEIEdqmfMQqVJOcWQ _NxgaHmEIEdqmfMQqVJOcWQ _NxgaJGEIEdqmfMQqVJOcWQ _NxzVBGEIEdqmfMQqVJOcWQ _NxDuLWEIEdqmfMQqVJOcWQ _Nx9GAGEIEdqmfMQqVJOcWQ _NxgaYmEIEdqmfMQqVJOcWQ _NyGP9mEIEdqmfMQqVJOcWQ _NxgaIWEIEdqmfMQqVJOcWQ _Nw59IGEIEdqmfMQqVJOcWQ _NxgaS2EIEdqmfMQqVJOcWQ _Nw59MmEIEdqmfMQqVJOcWQ _NxpkGWEIEdqmfMQqVJOcWQ _NxgaQWEIEdqmfMQqVJOcWQ _NxDudWEIEdqmfMQqVJOcWQ _Nw59LGEIEdqmfMQqVJOcWQ _Nw59OWEIEdqmfMQqVJOcWQ _NxWpF2EIEdqmfMQqVJOcWQ _Nw59NWEIEdqmfMQqVJOcWQ _NxgaWWEIEdqmfMQqVJOcWQ _NxpkAGEIEdqmfMQqVJOcWQ _NxzVCGEIEdqmfMQqVJOcWQ _NxgaRWEIEdqmfMQqVJOcWQ _NxgaUWEIEdqmfMQqVJOcWQ _NyGP-GEIEdqmfMQqVJOcWQ _NxgaFWEIEdqmfMQqVJOcWQ _Nx9GA2EIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_Ne5GEIEdqmfMQqVJOcWQ" source="UML::Activities::CompleteActivities" references="_NxpkIGEIEdqmfMQqVJOcWQ _Nu05q2EIEdqmfMQqVJOcWQ _Nyss5mEIEdqmfMQqVJOcWQ _Nyss92EIEdqmfMQqVJOcWQ _Ny1202EIEdqmfMQqVJOcWQ _NyZyJWEIEdqmfMQqVJOcWQ _Nyss9GEIEdqmfMQqVJOcWQ _Nw59XmEIEdqmfMQqVJOcWQ _NyQBMmEIEdqmfMQqVJOcWQ _Ny120GEIEdqmfMQqVJOcWQ _Ny120mEIEdqmfMQqVJOcWQ _NyQBIWEIEdqmfMQqVJOcWQ _NvH0cGEIEdqmfMQqVJOcWQ _NyQBE2EIEdqmfMQqVJOcWQ _Ny123WEIEdqmfMQqVJOcWQ _Nyss8GEIEdqmfMQqVJOcWQ _NyZyG2EIEdqmfMQqVJOcWQ _Nyss62EIEdqmfMQqVJOcWQ _NyQBB2EIEdqmfMQqVJOcWQ _Ny122GEIEdqmfMQqVJOcWQ _Nyi78WEIEdqmfMQqVJOcWQ _Nw59TWEIEdqmfMQqVJOcWQ _Nw59VmEIEdqmfMQqVJOcWQ _NyZyA2EIEdqmfMQqVJOcWQ _NyQBRGEIEdqmfMQqVJOcWQ _NyGQA2EIEdqmfMQqVJOcWQ _NjM40GEIEdqmfMQqVJOcWQ _NqDuQGEIEdqmfMQqVJOcWQ _NxDuIGEIEdqmfMQqVJOcWQ _NyZyAGEIEdqmfMQqVJOcWQ _NyQA_GEIEdqmfMQqVJOcWQ _NyQBLmEIEdqmfMQqVJOcWQ _Nyss-2EIEdqmfMQqVJOcWQ _Nyss7mEIEdqmfMQqVJOcWQ _Nyi74WEIEdqmfMQqVJOcWQ _NxDuVGEIEdqmfMQqVJOcWQ _NxDuLWEIEdqmfMQqVJOcWQ _NyQBDWEIEdqmfMQqVJOcWQ _NyQBHmEIEdqmfMQqVJOcWQ _Ny122mEIEdqmfMQqVJOcWQ _NyZyKmEIEdqmfMQqVJOcWQ _Nw59IGEIEdqmfMQqVJOcWQ _NjM44WEIEdqmfMQqVJOcWQ _Nyss-GEIEdqmfMQqVJOcWQ _Nw59MmEIEdqmfMQqVJOcWQ _Nyss4GEIEdqmfMQqVJOcWQ _Nyi7-GEIEdqmfMQqVJOcWQ _Nyss4mEIEdqmfMQqVJOcWQ _Ny1232EIEdqmfMQqVJOcWQ _Nyss6mEIEdqmfMQqVJOcWQ _NyQBA2EIEdqmfMQqVJOcWQ _Nw59NWEIEdqmfMQqVJOcWQ _NyQBKmEIEdqmfMQqVJOcWQ _Nyss_GEIEdqmfMQqVJOcWQ _NyZyBmEIEdqmfMQqVJOcWQ _NyZx8GEIEdqmfMQqVJOcWQ _Nyss82EIEdqmfMQqVJOcWQ _Nyss5WEIEdqmfMQqVJOcWQ _Nyi79mEIEdqmfMQqVJOcWQ _NyQBOGEIEdqmfMQqVJOcWQ _NyZyCmEIEdqmfMQqVJOcWQ _NyQA_2EIEdqmfMQqVJOcWQ _Nyss8WEIEdqmfMQqVJOcWQ _NyQA-WEIEdqmfMQqVJOcWQ _NyQBSGEIEdqmfMQqVJOcWQ _NyZyFWEIEdqmfMQqVJOcWQ _NyZyIWEIEdqmfMQqVJOcWQ _Nyss6WEIEdqmfMQqVJOcWQ _Nyi76GEIEdqmfMQqVJOcWQ _Nyss9WEIEdqmfMQqVJOcWQ _NyZyD2EIEdqmfMQqVJOcWQ _NyGQAGEIEdqmfMQqVJOcWQ _NyQBJGEIEdqmfMQqVJOcWQ _NyGQCWEIEdqmfMQqVJOcWQ _Ny121WEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_Ne5WEIEdqmfMQqVJOcWQ" source="UML::Actions::BasicActions" references="_Nu05q2EIEdqmfMQqVJOcWQ _Nu-DdmEIEdqmfMQqVJOcWQ _Nu-D2GEIEdqmfMQqVJOcWQ _NvH0c2EIEdqmfMQqVJOcWQ _NvH0j2EIEdqmfMQqVJOcWQ _Nu-DgmEIEdqmfMQqVJOcWQ _NvH0cGEIEdqmfMQqVJOcWQ _NvH0hWEIEdqmfMQqVJOcWQ _Nu05k2EIEdqmfMQqVJOcWQ _NvH0jWEIEdqmfMQqVJOcWQ _Nu-DzGEIEdqmfMQqVJOcWQ _Nu-DcGEIEdqmfMQqVJOcWQ _NvH0mGEIEdqmfMQqVJOcWQ _Nu-DfGEIEdqmfMQqVJOcWQ _NvQ-Y2EIEdqmfMQqVJOcWQ _NvH0q2EIEdqmfMQqVJOcWQ _NvH0nmEIEdqmfMQqVJOcWQ _Nu-DxmEIEdqmfMQqVJOcWQ _NvH0lGEIEdqmfMQqVJOcWQ _NvQ-ZmEIEdqmfMQqVJOcWQ _NvQ-YGEIEdqmfMQqVJOcWQ _NvQ-YWEIEdqmfMQqVJOcWQ _Nu-Df2EIEdqmfMQqVJOcWQ _Nu05lmEIEdqmfMQqVJOcWQ _NvH0iWEIEdqmfMQqVJOcWQ _NvQ-ZGEIEdqmfMQqVJOcWQ _NvH0nWEIEdqmfMQqVJOcWQ _NvQ-aWEIEdqmfMQqVJOcWQ _NvQ-aGEIEdqmfMQqVJOcWQ _NvQ-YmEIEdqmfMQqVJOcWQ _Nu05p2EIEdqmfMQqVJOcWQ _NvH0eWEIEdqmfMQqVJOcWQ _Nu-DqWEIEdqmfMQqVJOcWQ _Nu-DwmEIEdqmfMQqVJOcWQ _Nu-Dr2EIEdqmfMQqVJOcWQ _NvH0m2EIEdqmfMQqVJOcWQ _Nu05o2EIEdqmfMQqVJOcWQ _NvH0imEIEdqmfMQqVJOcWQ _Nu05nWEIEdqmfMQqVJOcWQ _NvH0kmEIEdqmfMQqVJOcWQ _NvQ-a2EIEdqmfMQqVJOcWQ _NvH0oWEIEdqmfMQqVJOcWQ _Nu-DhWEIEdqmfMQqVJOcWQ _NvH0pmEIEdqmfMQqVJOcWQ _NvH0rGEIEdqmfMQqVJOcWQ _Nu-DmmEIEdqmfMQqVJOcWQ _NvQ-ZWEIEdqmfMQqVJOcWQ _NvH0hmEIEdqmfMQqVJOcWQ _NvH0o2EIEdqmfMQqVJOcWQ _NvH0oGEIEdqmfMQqVJOcWQ _NvH0l2EIEdqmfMQqVJOcWQ _Nu-DoGEIEdqmfMQqVJOcWQ _Nu-Dl2EIEdqmfMQqVJOcWQ _NvH0qGEIEdqmfMQqVJOcWQ _NvH0f2EIEdqmfMQqVJOcWQ _Nu-Ds2EIEdqmfMQqVJOcWQ _Nu-Di2EIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_Ne5mEIEdqmfMQqVJOcWQ" source="UML::StateMachines::BehaviorStateMachines" references="_N1-qo2EIEdqmfMQqVJOcWQ _N105h2EIEdqmfMQqVJOcWQ _N1-ql2EIEdqmfMQqVJOcWQ _N2avWWEIEdqmfMQqVJOcWQ _N1rJFGEIEdqmfMQqVJOcWQ _N105uWEIEdqmfMQqVJOcWQ _N2avTGEIEdqmfMQqVJOcWQ _N105_WEIEdqmfMQqVJOcWQ _N1-qjGEIEdqmfMQqVJOcWQ _N2avQGEIEdqmfMQqVJOcWQ _N2avQmEIEdqmfMQqVJOcWQ _N2avRWEIEdqmfMQqVJOcWQ _N2avamEIEdqmfMQqVJOcWQ _N105j2EIEdqmfMQqVJOcWQ _N105ymEIEdqmfMQqVJOcWQ _N105fWEIEdqmfMQqVJOcWQ _N1rIjmEIEdqmfMQqVJOcWQ _N1057WEIEdqmfMQqVJOcWQ _N2avZWEIEdqmfMQqVJOcWQ _N1-qcGEIEdqmfMQqVJOcWQ _N105vGEIEdqmfMQqVJOcWQ _N1rIlGEIEdqmfMQqVJOcWQ _N10592EIEdqmfMQqVJOcWQ _N1rIf2EIEdqmfMQqVJOcWQ _NsvPAWEIEdqmfMQqVJOcWQ _N1-qkmEIEdqmfMQqVJOcWQ _N2Rlb2EIEdqmfMQqVJOcWQ _N2RlVGEIEdqmfMQqVJOcWQ _N2avSmEIEdqmfMQqVJOcWQ _N105m2EIEdqmfMQqVJOcWQ _N2kgR2EIEdqmfMQqVJOcWQ _N2kgQmEIEdqmfMQqVJOcWQ _N2H0YmEIEdqmfMQqVJOcWQ _N1rJD2EIEdqmfMQqVJOcWQ _N105lWEIEdqmfMQqVJOcWQ _N1-qYGEIEdqmfMQqVJOcWQ _N1-qfGEIEdqmfMQqVJOcWQ _N1-qdmEIEdqmfMQqVJOcWQ _N105z2EIEdqmfMQqVJOcWQ _N1rIdWEIEdqmfMQqVJOcWQ _N1-qnWEIEdqmfMQqVJOcWQ _N1058WEIEdqmfMQqVJOcWQ _N2RlYWEIEdqmfMQqVJOcWQ _N1rI0GEIEdqmfMQqVJOcWQ _N2RlaGEIEdqmfMQqVJOcWQ _N1rJH2EIEdqmfMQqVJOcWQ _N1rJBWEIEdqmfMQqVJOcWQ _N2RlZGEIEdqmfMQqVJOcWQ _N105xmEIEdqmfMQqVJOcWQ _N2H0ZmEIEdqmfMQqVJOcWQ _N1rIYGEIEdqmfMQqVJOcWQ _N2H0a2EIEdqmfMQqVJOcWQ _N2avUWEIEdqmfMQqVJOcWQ _N105oWEIEdqmfMQqVJOcWQ _N1rI7mEIEdqmfMQqVJOcWQ _N1rIwmEIEdqmfMQqVJOcWQ _N2avVGEIEdqmfMQqVJOcWQ _N2kgQ2EIEdqmfMQqVJOcWQ _N105eWEIEdqmfMQqVJOcWQ _N1rI-mEIEdqmfMQqVJOcWQ _N2RlamEIEdqmfMQqVJOcWQ _N106G2EIEdqmfMQqVJOcWQ _N105rGEIEdqmfMQqVJOcWQ _N1rIm2EIEdqmfMQqVJOcWQ _N2RlbGEIEdqmfMQqVJOcWQ _N2kgQGEIEdqmfMQqVJOcWQ _N2H0UGEIEdqmfMQqVJOcWQ _N1rJJWEIEdqmfMQqVJOcWQ _N1rIe2EIEdqmfMQqVJOcWQ _N2avY2EIEdqmfMQqVJOcWQ _N2avXmEIEdqmfMQqVJOcWQ _N1rItmEIEdqmfMQqVJOcWQ _N106KWEIEdqmfMQqVJOcWQ _N2H0Z2EIEdqmfMQqVJOcWQ _N2avR2EIEdqmfMQqVJOcWQ _N2H0aGEIEdqmfMQqVJOcWQ _N1rI1mEIEdqmfMQqVJOcWQ _N1rIsmEIEdqmfMQqVJOcWQ _N2RlUGEIEdqmfMQqVJOcWQ _N2RlXWEIEdqmfMQqVJOcWQ _N2RlWGEIEdqmfMQqVJOcWQ _N1rIb2EIEdqmfMQqVJOcWQ _N2avaGEIEdqmfMQqVJOcWQ _N1rI6GEIEdqmfMQqVJOcWQ _N105YGEIEdqmfMQqVJOcWQ _N2H0ZGEIEdqmfMQqVJOcWQ _N1rI4mEIEdqmfMQqVJOcWQ _N2avYGEIEdqmfMQqVJOcWQ _N106EmEIEdqmfMQqVJOcWQ _N105p2EIEdqmfMQqVJOcWQ _N1rIh2EIEdqmfMQqVJOcWQ _N2RlcWEIEdqmfMQqVJOcWQ _N2avW2EIEdqmfMQqVJOcWQ _N1rIumEIEdqmfMQqVJOcWQ _N1-qiGEIEdqmfMQqVJOcWQ _N1rI3GEIEdqmfMQqVJOcWQ _N2avT2EIEdqmfMQqVJOcWQ _N2RlZmEIEdqmfMQqVJOcWQ _N2RlVmEIEdqmfMQqVJOcWQ _N2kgRmEIEdqmfMQqVJOcWQ _N106H2EIEdqmfMQqVJOcWQ _N2RlYGEIEdqmfMQqVJOcWQ _N105tGEIEdqmfMQqVJOcWQ _N2avVmEIEdqmfMQqVJOcWQ _N1rJCmEIEdqmfMQqVJOcWQ _N1rJAGEIEdqmfMQqVJOcWQ _N105i2EIEdqmfMQqVJOcWQ _N105g2EIEdqmfMQqVJOcWQ _N1rIzGEIEdqmfMQqVJOcWQ _N1-qgmEIEdqmfMQqVJOcWQ _N1rIxmEIEdqmfMQqVJOcWQ _N2RlW2EIEdqmfMQqVJOcWQ _N1rJGWEIEdqmfMQqVJOcWQ _N105wmEIEdqmfMQqVJOcWQ _N1rIvmEIEdqmfMQqVJOcWQ _N106JWEIEdqmfMQqVJOcWQ _N2RlUWEIEdqmfMQqVJOcWQ _N1rI9GEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_Ne52EIEdqmfMQqVJOcWQ" source="InfrastructureLibrary::Profiles" references="_N4NfIWEIEdqmfMQqVJOcWQ _N4DuDmEIEdqmfMQqVJOcWQ _N4NfHGEIEdqmfMQqVJOcWQ _N4DuHmEIEdqmfMQqVJOcWQ _N4XQAGEIEdqmfMQqVJOcWQ _N36kMmEIEdqmfMQqVJOcWQ _N4DuL2EIEdqmfMQqVJOcWQ _N4DuO2EIEdqmfMQqVJOcWQ _N4DuAWEIEdqmfMQqVJOcWQ _N4DuQGEIEdqmfMQqVJOcWQ _N4DuTWEIEdqmfMQqVJOcWQ _N4NfAmEIEdqmfMQqVJOcWQ _N36kH2EIEdqmfMQqVJOcWQ _NjWCYGEIEdqmfMQqVJOcWQ _N4NfCmEIEdqmfMQqVJOcWQ _N4DuKWEIEdqmfMQqVJOcWQ _N4DuV2EIEdqmfMQqVJOcWQ _NidR0mEIEdqmfMQqVJOcWQ _N4NfFWEIEdqmfMQqVJOcWQ _N4NfGmEIEdqmfMQqVJOcWQ _N4DuB2EIEdqmfMQqVJOcWQ _N4NfEGEIEdqmfMQqVJOcWQ _N36kFmEIEdqmfMQqVJOcWQ _N4NfDGEIEdqmfMQqVJOcWQ _N36kI2EIEdqmfMQqVJOcWQ _N4NfEmEIEdqmfMQqVJOcWQ _N36kOGEIEdqmfMQqVJOcWQ _N4DuC2EIEdqmfMQqVJOcWQ _N36kLGEIEdqmfMQqVJOcWQ _N4DuI2EIEdqmfMQqVJOcWQ _N4NfF2EIEdqmfMQqVJOcWQ _N4DuUmEIEdqmfMQqVJOcWQ _N36kRmEIEdqmfMQqVJOcWQ _Ni59kGEIEdqmfMQqVJOcWQ _N4DuFWEIEdqmfMQqVJOcWQ _N4DuNGEIEdqmfMQqVJOcWQ _N4DuEmEIEdqmfMQqVJOcWQ _N4NfH2EIEdqmfMQqVJOcWQ _N4NfB2EIEdqmfMQqVJOcWQ _N4NfD2EIEdqmfMQqVJOcWQ _N36kPmEIEdqmfMQqVJOcWQ _N4NfBWEIEdqmfMQqVJOcWQ _N4DuSWEIEdqmfMQqVJOcWQ _N4NfAGEIEdqmfMQqVJOcWQ _N4XQAWEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_Ne6GEIEdqmfMQqVJOcWQ" source="UML::Actions::CompleteActions" references="_NwBMpmEIEdqmfMQqVJOcWQ _NwwzOmEIEdqmfMQqVJOcWQ _NwdRVWEIEdqmfMQqVJOcWQ _NwBMY2EIEdqmfMQqVJOcWQ _NwdRTmEIEdqmfMQqVJOcWQ _NwBMmWEIEdqmfMQqVJOcWQ _NwBMnGEIEdqmfMQqVJOcWQ _NwdRMGEIEdqmfMQqVJOcWQ _NwnCOWEIEdqmfMQqVJOcWQ _NwKWeWEIEdqmfMQqVJOcWQ _NwKWYWEIEdqmfMQqVJOcWQ _NwdRNWEIEdqmfMQqVJOcWQ _NwdROGEIEdqmfMQqVJOcWQ _NwBMoGEIEdqmfMQqVJOcWQ _NwdRUmEIEdqmfMQqVJOcWQ _NwBMbWEIEdqmfMQqVJOcWQ _NwwzS2EIEdqmfMQqVJOcWQ _NwKWg2EIEdqmfMQqVJOcWQ _NwdRSWEIEdqmfMQqVJOcWQ _NwnCMGEIEdqmfMQqVJOcWQ _NwUHQGEIEdqmfMQqVJOcWQ _NwnCR2EIEdqmfMQqVJOcWQ _NwnCSWEIEdqmfMQqVJOcWQ _NwBMaWEIEdqmfMQqVJOcWQ _NwwzMGEIEdqmfMQqVJOcWQ _NwUHbmEIEdqmfMQqVJOcWQ _NwKWsGEIEdqmfMQqVJOcWQ _NwwzUGEIEdqmfMQqVJOcWQ _NwnCPmEIEdqmfMQqVJOcWQ _NwdRPGEIEdqmfMQqVJOcWQ _NwBMhGEIEdqmfMQqVJOcWQ _NwdRNGEIEdqmfMQqVJOcWQ _NwUHfmEIEdqmfMQqVJOcWQ _NwBMrGEIEdqmfMQqVJOcWQ _NwKWf2EIEdqmfMQqVJOcWQ _NwUHs2EIEdqmfMQqVJOcWQ _NwwzRmEIEdqmfMQqVJOcWQ _NwUHt2EIEdqmfMQqVJOcWQ _NwBMWmEIEdqmfMQqVJOcWQ _NwdRQWEIEdqmfMQqVJOcWQ _NwnCQ2EIEdqmfMQqVJOcWQ _NwdROmEIEdqmfMQqVJOcWQ _NwUHw2EIEdqmfMQqVJOcWQ _NwUHwmEIEdqmfMQqVJOcWQ _NwUHvWEIEdqmfMQqVJOcWQ _NwKWW2EIEdqmfMQqVJOcWQ _NwUHkWEIEdqmfMQqVJOcWQ _NwnCMWEIEdqmfMQqVJOcWQ _NwBMimEIEdqmfMQqVJOcWQ _NwdRUWEIEdqmfMQqVJOcWQ _NwdRP2EIEdqmfMQqVJOcWQ _NwdRRmEIEdqmfMQqVJOcWQ _NwUHTGEIEdqmfMQqVJOcWQ _NwUHYWEIEdqmfMQqVJOcWQ _NwnCRGEIEdqmfMQqVJOcWQ _NwnCNmEIEdqmfMQqVJOcWQ _NwKWqmEIEdqmfMQqVJOcWQ _NwwzQWEIEdqmfMQqVJOcWQ _NwBMtWEIEdqmfMQqVJOcWQ _NwUHaGEIEdqmfMQqVJOcWQ _NwwzTmEIEdqmfMQqVJOcWQ _NwwzM2EIEdqmfMQqVJOcWQ _NwdRV2EIEdqmfMQqVJOcWQ _NwKWQGEIEdqmfMQqVJOcWQ _NwwzVGEIEdqmfMQqVJOcWQ _NwwzOGEIEdqmfMQqVJOcWQ _NwUHh2EIEdqmfMQqVJOcWQ _NwdRSmEIEdqmfMQqVJOcWQ _NwBMeWEIEdqmfMQqVJOcWQ _NwnCO2EIEdqmfMQqVJOcWQ _NwKWUGEIEdqmfMQqVJOcWQ _NwUHUmEIEdqmfMQqVJOcWQ _NwwzSWEIEdqmfMQqVJOcWQ _NwnCQGEIEdqmfMQqVJOcWQ _NwUHi2EIEdqmfMQqVJOcWQ _NwdRMWEIEdqmfMQqVJOcWQ _NwdRRGEIEdqmfMQqVJOcWQ _NwKWiWEIEdqmfMQqVJOcWQ _NwKWTGEIEdqmfMQqVJOcWQ _NwwzMmEIEdqmfMQqVJOcWQ _NwwzO2EIEdqmfMQqVJOcWQ _NwUHr2EIEdqmfMQqVJOcWQ _NtxwvWEIEdqmfMQqVJOcWQ _NwwzU2EIEdqmfMQqVJOcWQ _NwBMgGEIEdqmfMQqVJOcWQ _NwwzNWEIEdqmfMQqVJOcWQ _NwwzOWEIEdqmfMQqVJOcWQ _NwwzQGEIEdqmfMQqVJOcWQ _NwdRTWEIEdqmfMQqVJOcWQ _NwKWpGEIEdqmfMQqVJOcWQ _NwnCNGEIEdqmfMQqVJOcWQ _NwwzPWEIEdqmfMQqVJOcWQ _NwUHv2EIEdqmfMQqVJOcWQ _NwwzNmEIEdqmfMQqVJOcWQ _NwBMfGEIEdqmfMQqVJOcWQ _NwUHZGEIEdqmfMQqVJOcWQ _NwdROWEIEdqmfMQqVJOcWQ _NwwzRGEIEdqmfMQqVJOcWQ _NwUHl2EIEdqmfMQqVJOcWQ _NwUHemEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_Ne6WEIEdqmfMQqVJOcWQ" source="UML::Interactions::BasicInteractions" references="_Nri8JmEIEdqmfMQqVJOcWQ _NrZLeGEIEdqmfMQqVJOcWQ _NsIx4GEIEdqmfMQqVJOcWQ _Nr12_GEIEdqmfMQqVJOcWQ _NrsGBmEIEdqmfMQqVJOcWQ _Nri8EWEIEdqmfMQqVJOcWQ _Nr12-WEIEdqmfMQqVJOcWQ _NrZLmGEIEdqmfMQqVJOcWQ _NrsF9GEIEdqmfMQqVJOcWQ _NrZLLGEIEdqmfMQqVJOcWQ _NrsGGmEIEdqmfMQqVJOcWQ _Nr_n8GEIEdqmfMQqVJOcWQ _NrZLYGEIEdqmfMQqVJOcWQ _NrsGHGEIEdqmfMQqVJOcWQ _NrsGKWEIEdqmfMQqVJOcWQ _NrsF-2EIEdqmfMQqVJOcWQ _NrQBRmEIEdqmfMQqVJOcWQ _NrsGK2EIEdqmfMQqVJOcWQ _Nri8A2EIEdqmfMQqVJOcWQ _NrQBQGEIEdqmfMQqVJOcWQ _NrZLnGEIEdqmfMQqVJOcWQ _NrZLZGEIEdqmfMQqVJOcWQ _Nri8LGEIEdqmfMQqVJOcWQ _NsIx4mEIEdqmfMQqVJOcWQ _NrsGCmEIEdqmfMQqVJOcWQ _NrZLH2EIEdqmfMQqVJOcWQ _Nr_oDGEIEdqmfMQqVJOcWQ _NrQBTGEIEdqmfMQqVJOcWQ _Nr_oB2EIEdqmfMQqVJOcWQ _NrZLUGEIEdqmfMQqVJOcWQ _Nr12-2EIEdqmfMQqVJOcWQ _NrZLg2EIEdqmfMQqVJOcWQ _NrZLBmEIEdqmfMQqVJOcWQ _NrsGIWEIEdqmfMQqVJOcWQ _NrZLJWEIEdqmfMQqVJOcWQ _Nr_n8mEIEdqmfMQqVJOcWQ _NrsGJmEIEdqmfMQqVJOcWQ _NrsGFWEIEdqmfMQqVJOcWQ _NrsGF2EIEdqmfMQqVJOcWQ _Nri8MGEIEdqmfMQqVJOcWQ _Nr_n-mEIEdqmfMQqVJOcWQ _NrZLWGEIEdqmfMQqVJOcWQ _Nr_oDWEIEdqmfMQqVJOcWQ _NrZLGWEIEdqmfMQqVJOcWQ _NrsGA2EIEdqmfMQqVJOcWQ _Nri8QGEIEdqmfMQqVJOcWQ _NrsGJWEIEdqmfMQqVJOcWQ _Nr_oAGEIEdqmfMQqVJOcWQ _Nri8AGEIEdqmfMQqVJOcWQ _NrZLKGEIEdqmfMQqVJOcWQ _Nri8B2EIEdqmfMQqVJOcWQ _NrZLfGEIEdqmfMQqVJOcWQ _NrsGEGEIEdqmfMQqVJOcWQ _NrZLf2EIEdqmfMQqVJOcWQ _Nr_n92EIEdqmfMQqVJOcWQ _Nr_n82EIEdqmfMQqVJOcWQ _Nr129mEIEdqmfMQqVJOcWQ _NrZLXGEIEdqmfMQqVJOcWQ _Nr12_WEIEdqmfMQqVJOcWQ _Nr13BGEIEdqmfMQqVJOcWQ _NrZLkWEIEdqmfMQqVJOcWQ _Nri8RmEIEdqmfMQqVJOcWQ _Nr13CmEIEdqmfMQqVJOcWQ _Nr13E2EIEdqmfMQqVJOcWQ _Nr13D2EIEdqmfMQqVJOcWQ _Nri8M2EIEdqmfMQqVJOcWQ _NrsF92EIEdqmfMQqVJOcWQ _Nr13B2EIEdqmfMQqVJOcWQ _Nr13FWEIEdqmfMQqVJOcWQ _NrsGDmEIEdqmfMQqVJOcWQ _Nr13AmEIEdqmfMQqVJOcWQ _Nr_oA2EIEdqmfMQqVJOcWQ _NrsGImEIEdqmfMQqVJOcWQ _Nri8GmEIEdqmfMQqVJOcWQ _NrZLoGEIEdqmfMQqVJOcWQ _NrsGH2EIEdqmfMQqVJOcWQ _NrZLdmEIEdqmfMQqVJOcWQ _Nr129WEIEdqmfMQqVJOcWQ _Nr13FmEIEdqmfMQqVJOcWQ _NrZLAGEIEdqmfMQqVJOcWQ _Nri8HmEIEdqmfMQqVJOcWQ _Nr128GEIEdqmfMQqVJOcWQ _Nri8OmEIEdqmfMQqVJOcWQ _Nr_n9mEIEdqmfMQqVJOcWQ _NrsF_2EIEdqmfMQqVJOcWQ _Nr_n_mEIEdqmfMQqVJOcWQ _NrZLFWEIEdqmfMQqVJOcWQ _Nr13DGEIEdqmfMQqVJOcWQ _Nri8N2EIEdqmfMQqVJOcWQ _NrZLjWEIEdqmfMQqVJOcWQ _Nr_oBGEIEdqmfMQqVJOcWQ _Nr_oCWEIEdqmfMQqVJOcWQ _NrsGEmEIEdqmfMQqVJOcWQ _Nr13FGEIEdqmfMQqVJOcWQ _NrZLMmEIEdqmfMQqVJOcWQ _NrZLh2EIEdqmfMQqVJOcWQ _NrZLEmEIEdqmfMQqVJOcWQ _Nr12_2EIEdqmfMQqVJOcWQ _NrZLpGEIEdqmfMQqVJOcWQ _NrZLamEIEdqmfMQqVJOcWQ _NrZLcGEIEdqmfMQqVJOcWQ _Nr_n8WEIEdqmfMQqVJOcWQ _Nr128mEIEdqmfMQqVJOcWQ _NrZLlWEIEdqmfMQqVJOcWQ _Nr13BWEIEdqmfMQqVJOcWQ _NrZLVGEIEdqmfMQqVJOcWQ _NrQBPGEIEdqmfMQqVJOcWQ _Nr_n-2EIEdqmfMQqVJOcWQ _NrsF8GEIEdqmfMQqVJOcWQ _Nri8FGEIEdqmfMQqVJOcWQ _NrZLOGEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_Ne6mEIEdqmfMQqVJOcWQ" source="InfrastructureLibrary::Core::Constructs" references="_NjWCvmEIEdqmfMQqVJOcWQ _Njfzb2EIEdqmfMQqVJOcWQ _NjWCimEIEdqmfMQqVJOcWQ _NkPaImEIEdqmfMQqVJOcWQ _NiwMj2EIEdqmfMQqVJOcWQ _Ni5-DmEIEdqmfMQqVJOcWQ _NkZLLmEIEdqmfMQqVJOcWQ _NjM45WEIEdqmfMQqVJOcWQ _NjM4u2EIEdqmfMQqVJOcWQ _Nj8fNWEIEdqmfMQqVJOcWQ _NkZLL2EIEdqmfMQqVJOcWQ _NkZLImEIEdqmfMQqVJOcWQ _Nimb4WEIEdqmfMQqVJOcWQ _NjWCp2EIEdqmfMQqVJOcWQ _NjfzeWEIEdqmfMQqVJOcWQ _NjM4tGEIEdqmfMQqVJOcWQ _NidRmmEIEdqmfMQqVJOcWQ _NimbYGEIEdqmfMQqVJOcWQ _NkGQSWEIEdqmfMQqVJOcWQ _NkGQNmEIEdqmfMQqVJOcWQ _NjM4emEIEdqmfMQqVJOcWQ _NjM4ymEIEdqmfMQqVJOcWQ _Nj8fU2EIEdqmfMQqVJOcWQ _NkPaNGEIEdqmfMQqVJOcWQ _Ni5-B2EIEdqmfMQqVJOcWQ _NkZLMWEIEdqmfMQqVJOcWQ _NjM4ZmEIEdqmfMQqVJOcWQ _Ni59zGEIEdqmfMQqVJOcWQ _NiwMb2EIEdqmfMQqVJOcWQ _Nimbk2EIEdqmfMQqVJOcWQ _NjDHpmEIEdqmfMQqVJOcWQ _NjM4gGEIEdqmfMQqVJOcWQ _Ni59nGEIEdqmfMQqVJOcWQ _Ni59omEIEdqmfMQqVJOcWQ _NkPaLmEIEdqmfMQqVJOcWQ _Ni594GEIEdqmfMQqVJOcWQ _NkPaLGEIEdqmfMQqVJOcWQ _NjfzamEIEdqmfMQqVJOcWQ _Nj8fUWEIEdqmfMQqVJOcWQ _NjDHX2EIEdqmfMQqVJOcWQ _NiwMaWEIEdqmfMQqVJOcWQ _NjpkUmEIEdqmfMQqVJOcWQ _NjWCsGEIEdqmfMQqVJOcWQ _NkPaJ2EIEdqmfMQqVJOcWQ _NjDHbGEIEdqmfMQqVJOcWQ _Nj8fTmEIEdqmfMQqVJOcWQ _NidRcGEIEdqmfMQqVJOcWQ _NkiVFWEIEdqmfMQqVJOcWQ _Ni597mEIEdqmfMQqVJOcWQ _NkGQRWEIEdqmfMQqVJOcWQ _NkZLNmEIEdqmfMQqVJOcWQ _NjWCtmEIEdqmfMQqVJOcWQ _NiwMgWEIEdqmfMQqVJOcWQ _NjpkR2EIEdqmfMQqVJOcWQ _Njfzf2EIEdqmfMQqVJOcWQ _NjM41GEIEdqmfMQqVJOcWQ _NimbfGEIEdqmfMQqVJOcWQ _NjWCn2EIEdqmfMQqVJOcWQ _NjyuRWEIEdqmfMQqVJOcWQ _NjyuR2EIEdqmfMQqVJOcWQ _Ni59bWEIEdqmfMQqVJOcWQ _Ni599GEIEdqmfMQqVJOcWQ _NjM4o2EIEdqmfMQqVJOcWQ _Ni59Y2EIEdqmfMQqVJOcWQ _Ni59sGEIEdqmfMQqVJOcWQ _NidRw2EIEdqmfMQqVJOcWQ _NkZLKWEIEdqmfMQqVJOcWQ _NkPaIGEIEdqmfMQqVJOcWQ _NjDHUGEIEdqmfMQqVJOcWQ _NkZLOGEIEdqmfMQqVJOcWQ _NjDHlmEIEdqmfMQqVJOcWQ _NidRoWEIEdqmfMQqVJOcWQ _NjWCmWEIEdqmfMQqVJOcWQ _NiwMlmEIEdqmfMQqVJOcWQ _Nj8fQ2EIEdqmfMQqVJOcWQ _NkZLN2EIEdqmfMQqVJOcWQ _NkPaK2EIEdqmfMQqVJOcWQ _Nj8fNGEIEdqmfMQqVJOcWQ _NidRkWEIEdqmfMQqVJOcWQ _NjWCZ2EIEdqmfMQqVJOcWQ _NkiVEmEIEdqmfMQqVJOcWQ _NimbcmEIEdqmfMQqVJOcWQ _Nimb12EIEdqmfMQqVJOcWQ _NjDHcmEIEdqmfMQqVJOcWQ _NiwMmmEIEdqmfMQqVJOcWQ _NidRimEIEdqmfMQqVJOcWQ _Ni59iGEIEdqmfMQqVJOcWQ _NidR2mEIEdqmfMQqVJOcWQ _NkPaMGEIEdqmfMQqVJOcWQ _NjWCYGEIEdqmfMQqVJOcWQ _Ni591WEIEdqmfMQqVJOcWQ _NidRvWEIEdqmfMQqVJOcWQ _NjWCf2EIEdqmfMQqVJOcWQ _NidR4GEIEdqmfMQqVJOcWQ _NidRzGEIEdqmfMQqVJOcWQ _Ni59k2EIEdqmfMQqVJOcWQ _Nimbr2EIEdqmfMQqVJOcWQ _NkiVEGEIEdqmfMQqVJOcWQ _Ni59_2EIEdqmfMQqVJOcWQ _Ni590mEIEdqmfMQqVJOcWQ _NjyuMWEIEdqmfMQqVJOcWQ _Nimb62EIEdqmfMQqVJOcWQ _NjWCbWEIEdqmfMQqVJOcWQ _NidR0mEIEdqmfMQqVJOcWQ _NjM4lGEIEdqmfMQqVJOcWQ _NjyuQGEIEdqmfMQqVJOcWQ _NjM4bWEIEdqmfMQqVJOcWQ _NkZLPWEIEdqmfMQqVJOcWQ _NjM40GEIEdqmfMQqVJOcWQ _NjM472EIEdqmfMQqVJOcWQ _NkPaKmEIEdqmfMQqVJOcWQ _NiwMe2EIEdqmfMQqVJOcWQ _NjfzTGEIEdqmfMQqVJOcWQ _NjDHU2EIEdqmfMQqVJOcWQ _Ni59cmEIEdqmfMQqVJOcWQ _NjWCxGEIEdqmfMQqVJOcWQ _NiTgemEIEdqmfMQqVJOcWQ _NimbwWEIEdqmfMQqVJOcWQ _NkZLJWEIEdqmfMQqVJOcWQ _NimbbGEIEdqmfMQqVJOcWQ _NkZLOmEIEdqmfMQqVJOcWQ _NidR-GEIEdqmfMQqVJOcWQ _Ni59xWEIEdqmfMQqVJOcWQ _NjyuMGEIEdqmfMQqVJOcWQ _NkPaJGEIEdqmfMQqVJOcWQ _NjWCW2EIEdqmfMQqVJOcWQ _NidRgWEIEdqmfMQqVJOcWQ _NjM4WWEIEdqmfMQqVJOcWQ _Nj8fOmEIEdqmfMQqVJOcWQ _Nj8fQWEIEdqmfMQqVJOcWQ _NiTggGEIEdqmfMQqVJOcWQ _NjWCQGEIEdqmfMQqVJOcWQ _Nj8fTGEIEdqmfMQqVJOcWQ _NiTghmEIEdqmfMQqVJOcWQ _NjM4dGEIEdqmfMQqVJOcWQ _NkZLM2EIEdqmfMQqVJOcWQ _Ni59-GEIEdqmfMQqVJOcWQ _NkGQM2EIEdqmfMQqVJOcWQ _NjM4wmEIEdqmfMQqVJOcWQ _NjfzY2EIEdqmfMQqVJOcWQ _NkGQTGEIEdqmfMQqVJOcWQ _NjWChWEIEdqmfMQqVJOcWQ _NidR5mEIEdqmfMQqVJOcWQ _NkPaLWEIEdqmfMQqVJOcWQ _NjfzXGEIEdqmfMQqVJOcWQ _NjM44WEIEdqmfMQqVJOcWQ _NidRemEIEdqmfMQqVJOcWQ _Ni59jGEIEdqmfMQqVJOcWQ _Ni59pmEIEdqmfMQqVJOcWQ _NkGQOWEIEdqmfMQqVJOcWQ _NjM4YWEIEdqmfMQqVJOcWQ _NjWCUWEIEdqmfMQqVJOcWQ _NjyuQ2EIEdqmfMQqVJOcWQ _NjWCkWEIEdqmfMQqVJOcWQ _Ni59gmEIEdqmfMQqVJOcWQ _NjM462EIEdqmfMQqVJOcWQ _NjM4jmEIEdqmfMQqVJOcWQ _NjM4iGEIEdqmfMQqVJOcWQ _NjWCVWEIEdqmfMQqVJOcWQ _Nj8fMGEIEdqmfMQqVJOcWQ _NjyuMmEIEdqmfMQqVJOcWQ _NkGQO2EIEdqmfMQqVJOcWQ _NiwMpGEIEdqmfMQqVJOcWQ _NimbtWEIEdqmfMQqVJOcWQ _NiwMkmEIEdqmfMQqVJOcWQ _Ni59yGEIEdqmfMQqVJOcWQ _NjyuNWEIEdqmfMQqVJOcWQ _NjDHaWEIEdqmfMQqVJOcWQ _NkPaMWEIEdqmfMQqVJOcWQ _Nimbu2EIEdqmfMQqVJOcWQ _Nj8fSWEIEdqmfMQqVJOcWQ _Nj8fN2EIEdqmfMQqVJOcWQ _Nj8fRGEIEdqmfMQqVJOcWQ _NjyuRmEIEdqmfMQqVJOcWQ _NidRxmEIEdqmfMQqVJOcWQ _NjWCTWEIEdqmfMQqVJOcWQ _Ni59fGEIEdqmfMQqVJOcWQ _Nj8fRmEIEdqmfMQqVJOcWQ _Nj8fPWEIEdqmfMQqVJOcWQ _Nj8fUGEIEdqmfMQqVJOcWQ _Nimbd2EIEdqmfMQqVJOcWQ _NjM4UGEIEdqmfMQqVJOcWQ _NkGQMGEIEdqmfMQqVJOcWQ _Ni59z2EIEdqmfMQqVJOcWQ _NjWCeWEIEdqmfMQqVJOcWQ _NjDHfmEIEdqmfMQqVJOcWQ _Nj8fR2EIEdqmfMQqVJOcWQ _NjDHWWEIEdqmfMQqVJOcWQ _NjDHkWEIEdqmfMQqVJOcWQ _NjfzUmEIEdqmfMQqVJOcWQ _NjWCumEIEdqmfMQqVJOcWQ _NjpkSmEIEdqmfMQqVJOcWQ _NjM4nmEIEdqmfMQqVJOcWQ _NjpkVGEIEdqmfMQqVJOcWQ _NiwMdWEIEdqmfMQqVJOcWQ _NkGQS2EIEdqmfMQqVJOcWQ _NimbmGEIEdqmfMQqVJOcWQ _Nj8fMmEIEdqmfMQqVJOcWQ _NjDHi2EIEdqmfMQqVJOcWQ _NkiVF2EIEdqmfMQqVJOcWQ _NjWCo2EIEdqmfMQqVJOcWQ _Ni596GEIEdqmfMQqVJOcWQ _NkGQQGEIEdqmfMQqVJOcWQ _NidR7GEIEdqmfMQqVJOcWQ _NidRs2EIEdqmfMQqVJOcWQ _NjWCrWEIEdqmfMQqVJOcWQ _NkPaKWEIEdqmfMQqVJOcWQ _NkGQRGEIEdqmfMQqVJOcWQ _NjWCc2EIEdqmfMQqVJOcWQ _Ni59kGEIEdqmfMQqVJOcWQ _NjM4hGEIEdqmfMQqVJOcWQ _NkZLIGEIEdqmfMQqVJOcWQ _NjM4XGEIEdqmfMQqVJOcWQ _NjM42GEIEdqmfMQqVJOcWQ _NidR-2EIEdqmfMQqVJOcWQ _Nimb8GEIEdqmfMQqVJOcWQ _Nj8fMWEIEdqmfMQqVJOcWQ _NkZLP2EIEdqmfMQqVJOcWQ _NiwMYGEIEdqmfMQqVJOcWQ _NjyuPWEIEdqmfMQqVJOcWQ _NidR82EIEdqmfMQqVJOcWQ _NimbnWEIEdqmfMQqVJOcWQ _NjDHn2EIEdqmfMQqVJOcWQ _NkZLIWEIEdqmfMQqVJOcWQ _NiTgcGEIEdqmfMQqVJOcWQ _NimbxmEIEdqmfMQqVJOcWQ _NkPaIWEIEdqmfMQqVJOcWQ _Nj8fOGEIEdqmfMQqVJOcWQ _NiwMimEIEdqmfMQqVJOcWQ _NkPaI2EIEdqmfMQqVJOcWQ _NiwMn2EIEdqmfMQqVJOcWQ _Ni595GEIEdqmfMQqVJOcWQ _Nimbg2EIEdqmfMQqVJOcWQ _NjM422EIEdqmfMQqVJOcWQ _NidRq2EIEdqmfMQqVJOcWQ _NjDHe2EIEdqmfMQqVJOcWQ _NkGQRmEIEdqmfMQqVJOcWQ _NkZLJ2EIEdqmfMQqVJOcWQ _NkZLLGEIEdqmfMQqVJOcWQ _Ni59eWEIEdqmfMQqVJOcWQ _NkiVGmEIEdqmfMQqVJOcWQ _NkPaJmEIEdqmfMQqVJOcWQ _Nimbb2EIEdqmfMQqVJOcWQ _NkPaMmEIEdqmfMQqVJOcWQ _Ni59aGEIEdqmfMQqVJOcWQ _Ni592mEIEdqmfMQqVJOcWQ _Nimbi2EIEdqmfMQqVJOcWQ _NjWCSWEIEdqmfMQqVJOcWQ _NkGQPmEIEdqmfMQqVJOcWQ _NkZLPGEIEdqmfMQqVJOcWQ _Ni5-E2EIEdqmfMQqVJOcWQ _NimbqWEIEdqmfMQqVJOcWQ _NiwMhGEIEdqmfMQqVJOcWQ _NjpkTmEIEdqmfMQqVJOcWQ _NjM4rWEIEdqmfMQqVJOcWQ _Ni59lmEIEdqmfMQqVJOcWQ _NjyuOWEIEdqmfMQqVJOcWQ _NjfzVmEIEdqmfMQqVJOcWQ _NjDHh2EIEdqmfMQqVJOcWQ _Nimbo2EIEdqmfMQqVJOcWQ _NjfzQGEIEdqmfMQqVJOcWQ _NjDHdWEIEdqmfMQqVJOcWQ _NidRdGEIEdqmfMQqVJOcWQ _NjfzdmEIEdqmfMQqVJOcWQ _NkZLJmEIEdqmfMQqVJOcWQ _NjM4mWEIEdqmfMQqVJOcWQ _Nimbz2EIEdqmfMQqVJOcWQ _Nj8fTWEIEdqmfMQqVJOcWQ _NkGQMmEIEdqmfMQqVJOcWQ _NjM4qGEIEdqmfMQqVJOcWQ _NkGQQmEIEdqmfMQqVJOcWQ _NkZLOWEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_Ne62EIEdqmfMQqVJOcWQ" source="UML::Components::BasicComponents" references="_N0Vr3WEIEdqmfMQqVJOcWQ _N0VrpmEIEdqmfMQqVJOcWQ _N1FSimEIEdqmfMQqVJOcWQ _NrGQEGEIEdqmfMQqVJOcWQ _N0Vr4GEIEdqmfMQqVJOcWQ _N1FSiWEIEdqmfMQqVJOcWQ _N1FShmEIEdqmfMQqVJOcWQ _N1OccGEIEdqmfMQqVJOcWQ _N0Vrv2EIEdqmfMQqVJOcWQ _N1Occ2EIEdqmfMQqVJOcWQ _N0VruWEIEdqmfMQqVJOcWQ _N0Vr-GEIEdqmfMQqVJOcWQ _N0Vr_GEIEdqmfMQqVJOcWQ _N0VrrWEIEdqmfMQqVJOcWQ _N1FSiGEIEdqmfMQqVJOcWQ _N0Vr5WEIEdqmfMQqVJOcWQ _N1FSh2EIEdqmfMQqVJOcWQ _N1FSgGEIEdqmfMQqVJOcWQ _N1OcdWEIEdqmfMQqVJOcWQ _N0VrqmEIEdqmfMQqVJOcWQ _N0VrzWEIEdqmfMQqVJOcWQ _N0VrxmEIEdqmfMQqVJOcWQ _N0Vrs2EIEdqmfMQqVJOcWQ _N1OcdGEIEdqmfMQqVJOcWQ _N0Vr1WEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_Ne7GEIEdqmfMQqVJOcWQ" source="UML::Activities::StructuredActivities" references="_NzvOsGEIEdqmfMQqVJOcWQ _Ny13BGEIEdqmfMQqVJOcWQ _Ny1282EIEdqmfMQqVJOcWQ _Ny_oBmEIEdqmfMQqVJOcWQ _Ny_n12EIEdqmfMQqVJOcWQ _NzJY4WEIEdqmfMQqVJOcWQ _Ny127WEIEdqmfMQqVJOcWQ _NzmE2mEIEdqmfMQqVJOcWQ _Nw59XmEIEdqmfMQqVJOcWQ _NzmEyGEIEdqmfMQqVJOcWQ _Ny124GEIEdqmfMQqVJOcWQ _NzmExGEIEdqmfMQqVJOcWQ _NzmE32EIEdqmfMQqVJOcWQ _NzmEyWEIEdqmfMQqVJOcWQ _Ny13CmEIEdqmfMQqVJOcWQ _NzmEzmEIEdqmfMQqVJOcWQ _Ny_oDmEIEdqmfMQqVJOcWQ _NvH0cGEIEdqmfMQqVJOcWQ _NzJY1mEIEdqmfMQqVJOcWQ _Nw59X2EIEdqmfMQqVJOcWQ _NzvOsmEIEdqmfMQqVJOcWQ _Ny_n7GEIEdqmfMQqVJOcWQ _NzmE4mEIEdqmfMQqVJOcWQ _Ny_n9GEIEdqmfMQqVJOcWQ _Nw59TWEIEdqmfMQqVJOcWQ _NzmE02EIEdqmfMQqVJOcWQ _Nw59VmEIEdqmfMQqVJOcWQ _NzJY02EIEdqmfMQqVJOcWQ _Ny12-WEIEdqmfMQqVJOcWQ _NzmExWEIEdqmfMQqVJOcWQ _Ny_oCmEIEdqmfMQqVJOcWQ _Ny1252EIEdqmfMQqVJOcWQ _NzmE12EIEdqmfMQqVJOcWQ _NzmEwWEIEdqmfMQqVJOcWQ _Ny_oJWEIEdqmfMQqVJOcWQ _Nw59IGEIEdqmfMQqVJOcWQ _Ny12_mEIEdqmfMQqVJOcWQ _Ny_oGGEIEdqmfMQqVJOcWQ _NzmE22EIEdqmfMQqVJOcWQ _Nw59UGEIEdqmfMQqVJOcWQ _Nw59MmEIEdqmfMQqVJOcWQ _Ny_n-GEIEdqmfMQqVJOcWQ _NzmE0WEIEdqmfMQqVJOcWQ _Ny_oEmEIEdqmfMQqVJOcWQ _NzmEwGEIEdqmfMQqVJOcWQ _NzcTwGEIEdqmfMQqVJOcWQ _Nw59LGEIEdqmfMQqVJOcWQ _Nw59OWEIEdqmfMQqVJOcWQ _Nw59NWEIEdqmfMQqVJOcWQ _NzmE1mEIEdqmfMQqVJOcWQ _Nw59XGEIEdqmfMQqVJOcWQ _Ny_n_mEIEdqmfMQqVJOcWQ _Ny_n4WEIEdqmfMQqVJOcWQ _Nw59JmEIEdqmfMQqVJOcWQ _Ny_n5GEIEdqmfMQqVJOcWQ _Ny_n6GEIEdqmfMQqVJOcWQ _Ny_n22EIEdqmfMQqVJOcWQ _NzmEymEIEdqmfMQqVJOcWQ _Ny_oAmEIEdqmfMQqVJOcWQ _NzJY0GEIEdqmfMQqVJOcWQ _Ny_n02EIEdqmfMQqVJOcWQ _NzmEzWEIEdqmfMQqVJOcWQ _Ny_n8GEIEdqmfMQqVJOcWQ _Ny_n0GEIEdqmfMQqVJOcWQ _NzmE3mEIEdqmfMQqVJOcWQ _NzvOtGEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_Ne7WEIEdqmfMQqVJOcWQ" source="UML::Deployments::Nodes" references="_N1h-dmEIEdqmfMQqVJOcWQ _NscUCmEIEdqmfMQqVJOcWQ _N1YNeWEIEdqmfMQqVJOcWQ _Ni59sGEIEdqmfMQqVJOcWQ _N1h-fGEIEdqmfMQqVJOcWQ _N1YNcGEIEdqmfMQqVJOcWQ _N1YNf2EIEdqmfMQqVJOcWQ _N1OcmGEIEdqmfMQqVJOcWQ _N1YNh2EIEdqmfMQqVJOcWQ _N1OchGEIEdqmfMQqVJOcWQ _N1Och2EIEdqmfMQqVJOcWQ _N1h-cGEIEdqmfMQqVJOcWQ _N1h-fWEIEdqmfMQqVJOcWQ _N1h-c2EIEdqmfMQqVJOcWQ _Nme102EIEdqmfMQqVJOcWQ _N1h-fmEIEdqmfMQqVJOcWQ _N1YNc2EIEdqmfMQqVJOcWQ _N1OckWEIEdqmfMQqVJOcWQ _N1YNimEIEdqmfMQqVJOcWQ _N1Oci2EIEdqmfMQqVJOcWQ _N1h-emEIEdqmfMQqVJOcWQ _N1OcnmEIEdqmfMQqVJOcWQ _N1OcoWEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_Ne7mEIEdqmfMQqVJOcWQ" source="UML::Classes::Dependencies" references="_NqpkNWEIEdqmfMQqVJOcWQ _NkZLImEIEdqmfMQqVJOcWQ _NqfzRGEIEdqmfMQqVJOcWQ _NqfzPmEIEdqmfMQqVJOcWQ _NqpkOGEIEdqmfMQqVJOcWQ _NqzVJmEIEdqmfMQqVJOcWQ _NqfzQWEIEdqmfMQqVJOcWQ _NqfzTmEIEdqmfMQqVJOcWQ _NqzVIGEIEdqmfMQqVJOcWQ _NqfzWWEIEdqmfMQqVJOcWQ _NqzVKmEIEdqmfMQqVJOcWQ _NqpkMGEIEdqmfMQqVJOcWQ _NqpkMmEIEdqmfMQqVJOcWQ _NqfzUmEIEdqmfMQqVJOcWQ _NqfzSmEIEdqmfMQqVJOcWQ _NqpkJ2EIEdqmfMQqVJOcWQ _NqfzVmEIEdqmfMQqVJOcWQ _NimbtWEIEdqmfMQqVJOcWQ _NqfzXGEIEdqmfMQqVJOcWQ _NqpkIWEIEdqmfMQqVJOcWQ _Nimb8GEIEdqmfMQqVJOcWQ _NqfzYGEIEdqmfMQqVJOcWQ _NimbnWEIEdqmfMQqVJOcWQ _NiTgcGEIEdqmfMQqVJOcWQ _NqzVJGEIEdqmfMQqVJOcWQ _NjfzVmEIEdqmfMQqVJOcWQ _NjfzQGEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_Ne72EIEdqmfMQqVJOcWQ" source="UML::Deployments::Artifacts" references="_Nsld5mEIEdqmfMQqVJOcWQ _NscUGGEIEdqmfMQqVJOcWQ _NscUCmEIEdqmfMQqVJOcWQ _Nsld0GEIEdqmfMQqVJOcWQ _NscUHmEIEdqmfMQqVJOcWQ _Nsld6mEIEdqmfMQqVJOcWQ _Nsld7WEIEdqmfMQqVJOcWQ _Nsld32EIEdqmfMQqVJOcWQ _Nsld42EIEdqmfMQqVJOcWQ _Nsld2mEIEdqmfMQqVJOcWQ _Nsld3WEIEdqmfMQqVJOcWQ _NscUEmEIEdqmfMQqVJOcWQ _NscUJGEIEdqmfMQqVJOcWQ _Nsld02EIEdqmfMQqVJOcWQ _Nsld8GEIEdqmfMQqVJOcWQ _Nsld12EIEdqmfMQqVJOcWQ _NscUDmEIEdqmfMQqVJOcWQ _Nsld4GEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_Ne8GEIEdqmfMQqVJOcWQ" source="UML::CompositeStructures::Ports" references="_NtL62WEIEdqmfMQqVJOcWQ _NtL7GWEIEdqmfMQqVJOcWQ _NtL7FmEIEdqmfMQqVJOcWQ _Nq8fL2EIEdqmfMQqVJOcWQ _NtL7BmEIEdqmfMQqVJOcWQ _NtL7CmEIEdqmfMQqVJOcWQ _NtL7EGEIEdqmfMQqVJOcWQ _NtL63GEIEdqmfMQqVJOcWQ _NtVEsGEIEdqmfMQqVJOcWQ _NtL69GEIEdqmfMQqVJOcWQ _NtL7EWEIEdqmfMQqVJOcWQ _NtL61mEIEdqmfMQqVJOcWQ _NtL68GEIEdqmfMQqVJOcWQ _NtL65mEIEdqmfMQqVJOcWQ _NtL6x2EIEdqmfMQqVJOcWQ _NtL692EIEdqmfMQqVJOcWQ _NtL7FGEIEdqmfMQqVJOcWQ _NtL64mEIEdqmfMQqVJOcWQ _NtL7GmEIEdqmfMQqVJOcWQ _NtL67GEIEdqmfMQqVJOcWQ _NtVEsWEIEdqmfMQqVJOcWQ _NtL7DWEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_Ne8WEIEdqmfMQqVJOcWQ" source="UML::CommonBehaviors::SimpleTime" references="_NuYNxGEIEdqmfMQqVJOcWQ _NurImWEIEdqmfMQqVJOcWQ _NurInGEIEdqmfMQqVJOcWQ _Nu05g2EIEdqmfMQqVJOcWQ _NuhXxWEIEdqmfMQqVJOcWQ _Nu05iGEIEdqmfMQqVJOcWQ _NuhXkGEIEdqmfMQqVJOcWQ _NurIoGEIEdqmfMQqVJOcWQ _NurIl2EIEdqmfMQqVJOcWQ _NurIjGEIEdqmfMQqVJOcWQ _NsvPAWEIEdqmfMQqVJOcWQ _Nu05jWEIEdqmfMQqVJOcWQ _NuhXn2EIEdqmfMQqVJOcWQ _NuhXgGEIEdqmfMQqVJOcWQ _Nu05hmEIEdqmfMQqVJOcWQ _NuYNumEIEdqmfMQqVJOcWQ _NurIg2EIEdqmfMQqVJOcWQ _NurIpWEIEdqmfMQqVJOcWQ _NuhXtWEIEdqmfMQqVJOcWQ _Nu05j2EIEdqmfMQqVJOcWQ _NurIn2EIEdqmfMQqVJOcWQ _Nu05imEIEdqmfMQqVJOcWQ _NuhXnWEIEdqmfMQqVJOcWQ _NtCJ2GEIEdqmfMQqVJOcWQ _NurInWEIEdqmfMQqVJOcWQ _NuhXlmEIEdqmfMQqVJOcWQ _Nu05gmEIEdqmfMQqVJOcWQ _Nu05jGEIEdqmfMQqVJOcWQ _NuhXhmEIEdqmfMQqVJOcWQ _NurImmEIEdqmfMQqVJOcWQ _NurIiWEIEdqmfMQqVJOcWQ _NurIgGEIEdqmfMQqVJOcWQ _NuYNtGEIEdqmfMQqVJOcWQ _NuhXq2EIEdqmfMQqVJOcWQ _Nu05gGEIEdqmfMQqVJOcWQ _NuhXx2EIEdqmfMQqVJOcWQ _NuhXr2EIEdqmfMQqVJOcWQ _NuhXm2EIEdqmfMQqVJOcWQ _NurIkGEIEdqmfMQqVJOcWQ _Nu05hWEIEdqmfMQqVJOcWQ _NuYNwWEIEdqmfMQqVJOcWQ _NuhXomEIEdqmfMQqVJOcWQ _NsvPCGEIEdqmfMQqVJOcWQ _Nu05h2EIEdqmfMQqVJOcWQ _NuhXuWEIEdqmfMQqVJOcWQ _NuhXqGEIEdqmfMQqVJOcWQ _NurIo2EIEdqmfMQqVJOcWQ _Nu05iWEIEdqmfMQqVJOcWQ _NuYNrGEIEdqmfMQqVJOcWQ _NuhXimEIEdqmfMQqVJOcWQ _NuhXrWEIEdqmfMQqVJOcWQ _NuYNvmEIEdqmfMQqVJOcWQ _NuYNt2EIEdqmfMQqVJOcWQ _NurIlmEIEdqmfMQqVJOcWQ _Nu05kmEIEdqmfMQqVJOcWQ _NurIomEIEdqmfMQqVJOcWQ _NuYNr2EIEdqmfMQqVJOcWQ _NuhXv2EIEdqmfMQqVJOcWQ _NurImGEIEdqmfMQqVJOcWQ _NuhXmGEIEdqmfMQqVJOcWQ _NtCJ2mEIEdqmfMQqVJOcWQ _NuhXymEIEdqmfMQqVJOcWQ _Nu05kGEIEdqmfMQqVJOcWQ _NuYNqmEIEdqmfMQqVJOcWQ _NuYNsWEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_Ne8mEIEdqmfMQqVJOcWQ" source="UML::Components::PackagingComponents" references="_N0VrpmEIEdqmfMQqVJOcWQ _N1Ocf2EIEdqmfMQqVJOcWQ _N1OceWEIEdqmfMQqVJOcWQ _N1OcgWEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_Ne82EIEdqmfMQqVJOcWQ" source="UML::AuxiliaryConstructs::InformationFlows" references="_Nvkgp2EIEdqmfMQqVJOcWQ _NvkgomEIEdqmfMQqVJOcWQ _NvtqXWEIEdqmfMQqVJOcWQ _NvtqXmEIEdqmfMQqVJOcWQ _NvkgpmEIEdqmfMQqVJOcWQ _NvtqWWEIEdqmfMQqVJOcWQ _Nvkgq2EIEdqmfMQqVJOcWQ _NvtqVmEIEdqmfMQqVJOcWQ _NvkgaWEIEdqmfMQqVJOcWQ _NvtqUGEIEdqmfMQqVJOcWQ _NvkgdWEIEdqmfMQqVJOcWQ _NvkghmEIEdqmfMQqVJOcWQ _NvkgnmEIEdqmfMQqVJOcWQ _NvkgqmEIEdqmfMQqVJOcWQ _NvkgrmEIEdqmfMQqVJOcWQ _NvtqUmEIEdqmfMQqVJOcWQ _NvkglmEIEdqmfMQqVJOcWQ _NvkgeWEIEdqmfMQqVJOcWQ _NvkgsGEIEdqmfMQqVJOcWQ _NvtqVWEIEdqmfMQqVJOcWQ _NvkgkmEIEdqmfMQqVJOcWQ _NvkgmmEIEdqmfMQqVJOcWQ _NvkgimEIEdqmfMQqVJOcWQ _Nvkgo2EIEdqmfMQqVJOcWQ _NvtqWmEIEdqmfMQqVJOcWQ _NvkgjmEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_Ne9GEIEdqmfMQqVJOcWQ" source="UML::Activities::ExtraStructuredActivities" references="_N0L6sWEIEdqmfMQqVJOcWQ _N0Vro2EIEdqmfMQqVJOcWQ _N0VrpWEIEdqmfMQqVJOcWQ _N0L65GEIEdqmfMQqVJOcWQ _N0L66GEIEdqmfMQqVJOcWQ _N0L6o2EIEdqmfMQqVJOcWQ _N0L67GEIEdqmfMQqVJOcWQ _N0L64GEIEdqmfMQqVJOcWQ _N0VroGEIEdqmfMQqVJOcWQ _N0L6y2EIEdqmfMQqVJOcWQ _N0VroWEIEdqmfMQqVJOcWQ _N0L6uWEIEdqmfMQqVJOcWQ _N0L6oGEIEdqmfMQqVJOcWQ _N0VrpGEIEdqmfMQqVJOcWQ _N0L67WEIEdqmfMQqVJOcWQ _N0L6xWEIEdqmfMQqVJOcWQ _N0L6p2EIEdqmfMQqVJOcWQ _N0L62mEIEdqmfMQqVJOcWQ _N0L6tWEIEdqmfMQqVJOcWQ _N0VromEIEdqmfMQqVJOcWQ _N0L67mEIEdqmfMQqVJOcWQ _NzJY0GEIEdqmfMQqVJOcWQ _N0L6q2EIEdqmfMQqVJOcWQ _N0L6vWEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_z70GEIEdqmfMQqVJOcWQ" source="UML::CommonBehaviors::BasicBehaviors" references="_NqDunGEIEdqmfMQqVJOcWQ _NqDulWEIEdqmfMQqVJOcWQ _NqDud2EIEdqmfMQqVJOcWQ _NqM4S2EIEdqmfMQqVJOcWQ _NqDumWEIEdqmfMQqVJOcWQ _NqDukWEIEdqmfMQqVJOcWQ _NqM4XmEIEdqmfMQqVJOcWQ _NqM4U2EIEdqmfMQqVJOcWQ _NqM4WGEIEdqmfMQqVJOcWQ _NqDuW2EIEdqmfMQqVJOcWQ _NqM4SGEIEdqmfMQqVJOcWQ _NqDuYWEIEdqmfMQqVJOcWQ _NqM4XGEIEdqmfMQqVJOcWQ _NqM4O2EIEdqmfMQqVJOcWQ _NjDHlmEIEdqmfMQqVJOcWQ _NqDuU2EIEdqmfMQqVJOcWQ _NqM4W2EIEdqmfMQqVJOcWQ _NqM4Q2EIEdqmfMQqVJOcWQ _NqDugmEIEdqmfMQqVJOcWQ _NqM4MGEIEdqmfMQqVJOcWQ _NqDucWEIEdqmfMQqVJOcWQ _NqM4OWEIEdqmfMQqVJOcWQ _NqDuQGEIEdqmfMQqVJOcWQ _NqDuT2EIEdqmfMQqVJOcWQ _NqM4RWEIEdqmfMQqVJOcWQ _NqM4TmEIEdqmfMQqVJOcWQ _NjM44WEIEdqmfMQqVJOcWQ _NqM4VmEIEdqmfMQqVJOcWQ _NqM4UmEIEdqmfMQqVJOcWQ _NqDuV2EIEdqmfMQqVJOcWQ _NqDuaWEIEdqmfMQqVJOcWQ _NqM4PmEIEdqmfMQqVJOcWQ _NqDua2EIEdqmfMQqVJOcWQ _NqDuo2EIEdqmfMQqVJOcWQ _NqM4QGEIEdqmfMQqVJOcWQ _NqDuiGEIEdqmfMQqVJOcWQ _NqM4SWEIEdqmfMQqVJOcWQ _NqM4T2EIEdqmfMQqVJOcWQ _NqDujGEIEdqmfMQqVJOcWQ _NqM4XWEIEdqmfMQqVJOcWQ _NqDuZWEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_z70WEIEdqmfMQqVJOcWQ" source="UML::StateMachines::ProtocolStateMachines" references="_N2uRa2EIEdqmfMQqVJOcWQ _N2kge2EIEdqmfMQqVJOcWQ _N2kgU2EIEdqmfMQqVJOcWQ _N2uRQGEIEdqmfMQqVJOcWQ _N2uRXGEIEdqmfMQqVJOcWQ _N2kggWEIEdqmfMQqVJOcWQ _N2kgWGEIEdqmfMQqVJOcWQ _N23bMGEIEdqmfMQqVJOcWQ _N2kgTWEIEdqmfMQqVJOcWQ _N2uRZ2EIEdqmfMQqVJOcWQ _N23bNGEIEdqmfMQqVJOcWQ _N2kgb2EIEdqmfMQqVJOcWQ _N2uRWWEIEdqmfMQqVJOcWQ _N23bNmEIEdqmfMQqVJOcWQ _N2uRbWEIEdqmfMQqVJOcWQ _N2kgSmEIEdqmfMQqVJOcWQ _N2kgX2EIEdqmfMQqVJOcWQ _N1rIm2EIEdqmfMQqVJOcWQ _N2kgY2EIEdqmfMQqVJOcWQ _N23bMWEIEdqmfMQqVJOcWQ _NtL6x2EIEdqmfMQqVJOcWQ _N2uRXWEIEdqmfMQqVJOcWQ _N2uRZWEIEdqmfMQqVJOcWQ _N2uRYmEIEdqmfMQqVJOcWQ _N2uRUmEIEdqmfMQqVJOcWQ _N2kgdWEIEdqmfMQqVJOcWQ _NqzVLGEIEdqmfMQqVJOcWQ _N2uRYGEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_z70mEIEdqmfMQqVJOcWQ" source="UML::Actions::StructuredActions" references="_Nv3bUGEIEdqmfMQqVJOcWQ _Nv3bjWEIEdqmfMQqVJOcWQ _Nv3bkmEIEdqmfMQqVJOcWQ _NwBMUmEIEdqmfMQqVJOcWQ _Nv3bd2EIEdqmfMQqVJOcWQ _NvtqaGEIEdqmfMQqVJOcWQ _Nv3baGEIEdqmfMQqVJOcWQ _NvtqimEIEdqmfMQqVJOcWQ _Nv3bcWEIEdqmfMQqVJOcWQ _Nv3bX2EIEdqmfMQqVJOcWQ _Nv3bWWEIEdqmfMQqVJOcWQ _Nv3bVmEIEdqmfMQqVJOcWQ _NvtqbmEIEdqmfMQqVJOcWQ _Nv3bnGEIEdqmfMQqVJOcWQ _Nv3bimEIEdqmfMQqVJOcWQ _Nv3bl2EIEdqmfMQqVJOcWQ _Nv3bZWEIEdqmfMQqVJOcWQ _Nv3bmWEIEdqmfMQqVJOcWQ _Nv3bbmEIEdqmfMQqVJOcWQ _Nv3bj2EIEdqmfMQqVJOcWQ _NvtqcmEIEdqmfMQqVJOcWQ _NvtqkGEIEdqmfMQqVJOcWQ _Nv3blGEIEdqmfMQqVJOcWQ _Nv3bg2EIEdqmfMQqVJOcWQ _Nv3biWEIEdqmfMQqVJOcWQ _Nvtqe2EIEdqmfMQqVJOcWQ _NwBMV2EIEdqmfMQqVJOcWQ _Nv3bnmEIEdqmfMQqVJOcWQ _NwBMVWEIEdqmfMQqVJOcWQ _NvtqgWEIEdqmfMQqVJOcWQ _NwBMUGEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_z702EIEdqmfMQqVJOcWQ" source="UML::Classes::Interfaces" references="_Nq8fJ2EIEdqmfMQqVJOcWQ _NqzVSGEIEdqmfMQqVJOcWQ _NqzVMmEIEdqmfMQqVJOcWQ _Nq8fJGEIEdqmfMQqVJOcWQ _Nq8fEGEIEdqmfMQqVJOcWQ _NqzVS2EIEdqmfMQqVJOcWQ _NqzVOGEIEdqmfMQqVJOcWQ _Nq8fKmEIEdqmfMQqVJOcWQ _Nq8fLGEIEdqmfMQqVJOcWQ _Nq8fE2EIEdqmfMQqVJOcWQ _Nq8fHWEIEdqmfMQqVJOcWQ _Nq8fGmEIEdqmfMQqVJOcWQ _NqzVRGEIEdqmfMQqVJOcWQ _NjM4UGEIEdqmfMQqVJOcWQ _NqzVXmEIEdqmfMQqVJOcWQ _NqzVV2EIEdqmfMQqVJOcWQ _Nq8fFmEIEdqmfMQqVJOcWQ _NqzVLGEIEdqmfMQqVJOcWQ _NqDua2EIEdqmfMQqVJOcWQ _Nq8fIGEIEdqmfMQqVJOcWQ _NqzVPmEIEdqmfMQqVJOcWQ _NqzVT2EIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_z71GEIEdqmfMQqVJOcWQ" source="UML::CommonBehaviors::Communications" references="_NsvO_2EIEdqmfMQqVJOcWQ _NsleAWEIEdqmfMQqVJOcWQ _NtCJ3WEIEdqmfMQqVJOcWQ _NsvPAWEIEdqmfMQqVJOcWQ _NsvO_GEIEdqmfMQqVJOcWQ _NtL6xmEIEdqmfMQqVJOcWQ _NtCJwWEIEdqmfMQqVJOcWQ _Ns4YwGEIEdqmfMQqVJOcWQ _NtCJ22EIEdqmfMQqVJOcWQ _NtCJ42EIEdqmfMQqVJOcWQ _NtCJ2GEIEdqmfMQqVJOcWQ _NtCJzGEIEdqmfMQqVJOcWQ _NsleBGEIEdqmfMQqVJOcWQ _NtL6wGEIEdqmfMQqVJOcWQ _NtCJwGEIEdqmfMQqVJOcWQ _NtCJ4GEIEdqmfMQqVJOcWQ _Ns4YyWEIEdqmfMQqVJOcWQ _Nsld-mEIEdqmfMQqVJOcWQ _NtCJyWEIEdqmfMQqVJOcWQ _NtCJ0mEIEdqmfMQqVJOcWQ _Nj8fTGEIEdqmfMQqVJOcWQ _NsvO82EIEdqmfMQqVJOcWQ _NsvO22EIEdqmfMQqVJOcWQ _NsvO3mEIEdqmfMQqVJOcWQ _NsvPBGEIEdqmfMQqVJOcWQ _NsvO9mEIEdqmfMQqVJOcWQ _NjM44WEIEdqmfMQqVJOcWQ _NsvO72EIEdqmfMQqVJOcWQ _NtCJyGEIEdqmfMQqVJOcWQ _NjM462EIEdqmfMQqVJOcWQ _NtCJz2EIEdqmfMQqVJOcWQ _NjM4UGEIEdqmfMQqVJOcWQ _NsvO6WEIEdqmfMQqVJOcWQ _NsvPCGEIEdqmfMQqVJOcWQ _NtCJxGEIEdqmfMQqVJOcWQ _NtCJ1WEIEdqmfMQqVJOcWQ _NtL6wmEIEdqmfMQqVJOcWQ _Nsld82EIEdqmfMQqVJOcWQ _NsvO0WEIEdqmfMQqVJOcWQ _Ni59kGEIEdqmfMQqVJOcWQ _Ns4Yw2EIEdqmfMQqVJOcWQ _NqzVLGEIEdqmfMQqVJOcWQ _NsvPFmEIEdqmfMQqVJOcWQ _NqDua2EIEdqmfMQqVJOcWQ _NsvO1WEIEdqmfMQqVJOcWQ _NtCJxWEIEdqmfMQqVJOcWQ _NsvO42EIEdqmfMQqVJOcWQ _NtCJ2mEIEdqmfMQqVJOcWQ _Nsld_WEIEdqmfMQqVJOcWQ _NsvPDmEIEdqmfMQqVJOcWQ _Nj8fTWEIEdqmfMQqVJOcWQ _NtL6xWEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_9FwGEIEdqmfMQqVJOcWQ" source="UML::Deployments::ComponentDeployments" references="_N1h-iGEIEdqmfMQqVJOcWQ _N1OchGEIEdqmfMQqVJOcWQ _N1h-mWEIEdqmfMQqVJOcWQ _N1h-n2EIEdqmfMQqVJOcWQ _N1h-gmEIEdqmfMQqVJOcWQ _N1h-kWEIEdqmfMQqVJOcWQ _N1h-lWEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_9FwWEIEdqmfMQqVJOcWQ" source="UML::Activities::FundamentalActivities" references="_Nw59XmEIEdqmfMQqVJOcWQ _Nw59RWEIEdqmfMQqVJOcWQ _NvH0cGEIEdqmfMQqVJOcWQ _Nw59X2EIEdqmfMQqVJOcWQ _Nw59TWEIEdqmfMQqVJOcWQ _Nw59VmEIEdqmfMQqVJOcWQ _Nw59P2EIEdqmfMQqVJOcWQ _Nw59IGEIEdqmfMQqVJOcWQ _Nw59YWEIEdqmfMQqVJOcWQ _Nw59UGEIEdqmfMQqVJOcWQ _Nw59MmEIEdqmfMQqVJOcWQ _Nw59LGEIEdqmfMQqVJOcWQ _Nw59OWEIEdqmfMQqVJOcWQ _Nw59NWEIEdqmfMQqVJOcWQ _Nw59XGEIEdqmfMQqVJOcWQ _Nw59JmEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_9FwmEIEdqmfMQqVJOcWQ" source="UML::CompositeStructures::InvocationActions" references="_NvavcGEIEdqmfMQqVJOcWQ _Nu-DgmEIEdqmfMQqVJOcWQ _NvavbWEIEdqmfMQqVJOcWQ _NvavbGEIEdqmfMQqVJOcWQ _NvavcWEIEdqmfMQqVJOcWQ _NsvO22EIEdqmfMQqVJOcWQ _NvavaGEIEdqmfMQqVJOcWQ _NvavY2EIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_9Fw2EIEdqmfMQqVJOcWQ" source="UML::Classes::PowerTypes" references="_NvavfWEIEdqmfMQqVJOcWQ _NvavhWEIEdqmfMQqVJOcWQ _NvkgY2EIEdqmfMQqVJOcWQ _NvavgWEIEdqmfMQqVJOcWQ _NvkgZ2EIEdqmfMQqVJOcWQ _NmLT3WEIEdqmfMQqVJOcWQ _NvkgaGEIEdqmfMQqVJOcWQ _NvavdGEIEdqmfMQqVJOcWQ _NiTgcGEIEdqmfMQqVJOcWQ _NvaviWEIEdqmfMQqVJOcWQ _NvavkGEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_N_9FxGEIEdqmfMQqVJOcWQ" source="UML::CompositeStructures::Collaborations" references="_NtVEtGEIEdqmfMQqVJOcWQ _NtVExGEIEdqmfMQqVJOcWQ _NtVEwGEIEdqmfMQqVJOcWQ _NjM40GEIEdqmfMQqVJOcWQ _Nte1w2EIEdqmfMQqVJOcWQ _Nte1tWEIEdqmfMQqVJOcWQ _NtVE02EIEdqmfMQqVJOcWQ _Nte1tmEIEdqmfMQqVJOcWQ _Nte1u2EIEdqmfMQqVJOcWQ _NtVE12EIEdqmfMQqVJOcWQ _Nte1vmEIEdqmfMQqVJOcWQ _Nte1yGEIEdqmfMQqVJOcWQ _Nte1wGEIEdqmfMQqVJOcWQ _NtVEz2EIEdqmfMQqVJOcWQ _Nte1uWEIEdqmfMQqVJOcWQ _Nte1ymEIEdqmfMQqVJOcWQ _NiTgcGEIEdqmfMQqVJOcWQ _Nte1xWEIEdqmfMQqVJOcWQ _NtVEymEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_OAG2wGEIEdqmfMQqVJOcWQ" source="UML::AuxiliaryConstructs::Profiles" references="_N4DuQGEIEdqmfMQqVJOcWQ _N4DuTWEIEdqmfMQqVJOcWQ _N4XQCWEIEdqmfMQqVJOcWQ _N4XQB2EIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_OAQnwGEIEdqmfMQqVJOcWQ" source="UML::AuxiliaryConstructs::Models" references="_NvtqZGEIEdqmfMQqVJOcWQ _NvtqYWEIEdqmfMQqVJOcWQ"/>
    <eAnnotations xmi:id="_OBJYkGEIEdqmfMQqVJOcWQ" source="UML::CompositeStructures::StructuredClasses" references="_Ni59kGEIEdqmfMQqVJOcWQ"/>
  </eAnnotations>
  <packageImport xmi:type="uml:ProfileApplication" xmi:id="_EF31wBmMEdqvcs97umGEYQ">
    <eAnnotations xmi:id="_EF31wRmMEdqvcs97umGEYQ" source="attributes">
      <details xmi:id="_EF31whmMEdqvcs97umGEYQ" key="version" value="2"/>
    </eAnnotations>
    <importedPackage xmi:type="uml:Profile" href="pathmap://UML2_PROFILES/Ecore.profile.uml2#_siPt4K87Edi5QpYeY_yIpg"/>
    <importedProfile href="pathmap://UML2_PROFILES/Ecore.profile.uml2#_siPt4K87Edi5QpYeY_yIpg"/>
  </packageImport>
  <packageImport xmi:id="_NhaIkWEIEdqmfMQqVJOcWQ">
    <importedPackage href="InfrastructureLibrary.uml2#_3ADC7B74022D3C9FFCC70354"/>
  </packageImport>
  <ownedMember xmi:type="uml:Class" xmi:id="_NjpkR2EIEdqmfMQqVJOcWQ" name="Comment">
    <ownedComment xmi:id="_NjpkSGEIEdqmfMQqVJOcWQ" annotatedElement="_NjpkR2EIEdqmfMQqVJOcWQ">
      <body>A comment is a textual annotation that can be attached to a set of elements.</body>
    </ownedComment>
    <ownedComment xmi:id="_NkiVKWEIEdqmfMQqVJOcWQ" annotatedElement="_NjpkR2EIEdqmfMQqVJOcWQ">
      <body>A comment gives the ability to attach various remarks to elements. A comment carries no semantic force, but may contain information that is useful to a modeler. A comment can be owned by any element.</body>
    </ownedComment>
    <generalization xmi:id="_NjpkSWEIEdqmfMQqVJOcWQ" general="_NidR0mEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NjpkSmEIEdqmfMQqVJOcWQ" name="body">
      <eAnnotations xmi:id="_NjpkS2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NjpkTGEIEdqmfMQqVJOcWQ" isUnsettable="true" xmlFeatureKind="Element"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjpkTWEIEdqmfMQqVJOcWQ" annotatedElement="_NjpkSmEIEdqmfMQqVJOcWQ">
        <body>Specifies a string that is the comment.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjpkTmEIEdqmfMQqVJOcWQ" name="annotatedElement" type="_NidR0mEIEdqmfMQqVJOcWQ" association="_NkPaIGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjpkT2EIEdqmfMQqVJOcWQ" annotatedElement="_NjpkTmEIEdqmfMQqVJOcWQ">
        <body>References the Element(s) being commented.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NkiVKmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NkiVK2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NidRw2EIEdqmfMQqVJOcWQ" name="DirectedRelationship" isAbstract="true">
    <ownedComment xmi:id="_NidRxGEIEdqmfMQqVJOcWQ" annotatedElement="_NidRw2EIEdqmfMQqVJOcWQ">
      <body>A directed relationship references one or more source elements and one or more target elements. DirectedRelationship is an abstract metaclass.</body>
    </ownedComment>
    <generalization xmi:id="_NidRxWEIEdqmfMQqVJOcWQ" general="_NiwMgWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NidRxmEIEdqmfMQqVJOcWQ" name="source" type="_NidR0mEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" isDerivedUnion="true" subsettedProperty="_NiwMhGEIEdqmfMQqVJOcWQ" association="_NkPaJGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NidRx2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NidRyGEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NidRyWEIEdqmfMQqVJOcWQ" annotatedElement="_NidRxmEIEdqmfMQqVJOcWQ">
        <body>Specifies the sources of the DirectedRelationship.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NksGEGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NksGEWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NidRzGEIEdqmfMQqVJOcWQ" name="target" type="_NidR0mEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" isDerivedUnion="true" subsettedProperty="_NiwMhGEIEdqmfMQqVJOcWQ" association="_NkPaJ2EIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NidRzWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NidRzmEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NidRz2EIEdqmfMQqVJOcWQ" annotatedElement="_NidRzGEIEdqmfMQqVJOcWQ">
        <body>Specifies the targets of the DirectedRelationship.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nk13EGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nk13EWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Enumeration" xmi:id="_NjpkUmEIEdqmfMQqVJOcWQ" name="VisibilityKind">
    <ownedComment xmi:id="_NjpkU2EIEdqmfMQqVJOcWQ" annotatedElement="_NjpkUmEIEdqmfMQqVJOcWQ">
      <body>VisibilityKind is an enumeration of the following literal values:

  - public

  - private

  - protected

  - package</body>
    </ownedComment>
    <ownedOperation xmi:id="_NjpkVGEIEdqmfMQqVJOcWQ" name="bestVisibility" isQuery="true" precondition="_NlIyBWEIEdqmfMQqVJOcWQ" bodyCondition="_NjpkVmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjpkVWEIEdqmfMQqVJOcWQ" annotatedElement="_NjpkVGEIEdqmfMQqVJOcWQ">
        <body>The query bestVisibility() examines a set of VisibilityKinds, and returns public as the preferred visibility.</body>
      </ownedComment>
      <ownedComment xmi:id="_NlIyBGEIEdqmfMQqVJOcWQ" annotatedElement="_NjpkVGEIEdqmfMQqVJOcWQ">
        <body>The query bestVisibility() examines a set of VisibilityKinds that includes only public and private, and returns public as the preferred visibility.</body>
      </ownedComment>
      <ownedRule xmi:id="_NlIyBWEIEdqmfMQqVJOcWQ" constrainedElement="_NjpkVGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlIyBmEIEdqmfMQqVJOcWQ" language="OCL">
          <body>pre: not vis->includes(#protected) and not vis->includes(#package)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_NjpkVmEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NjpkVGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlIyB2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if vis->includes(#public) then #public else #private endif</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NjpkWGEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:Enumeration" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CAD9E0F01D0"/>
      </returnResult>
      <type xmi:type="uml:Enumeration" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CAD9E0F01D0"/>
      <ownedParameter xmi:id="_NjpkWWEIEdqmfMQqVJOcWQ" name="vis" type="_NjpkUmEIEdqmfMQqVJOcWQ">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NjpkWmEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NjpkW2EIEdqmfMQqVJOcWQ"/>
      </ownedParameter>
    </ownedOperation>
    <ownedLiteral xmi:id="_NjpkXGEIEdqmfMQqVJOcWQ" name="public">
      <ownedComment xmi:id="_NjpkXWEIEdqmfMQqVJOcWQ" annotatedElement="_NjpkXGEIEdqmfMQqVJOcWQ">
        <body>A public element is visible to all elements that can access the contents of the namespace that owns it.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_NjpkXmEIEdqmfMQqVJOcWQ" name="private">
      <ownedComment xmi:id="_NjpkX2EIEdqmfMQqVJOcWQ" annotatedElement="_NjpkXmEIEdqmfMQqVJOcWQ">
        <body>A private element is only visible inside the namespace that owns it.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_NjpkYGEIEdqmfMQqVJOcWQ" name="protected">
      <ownedComment xmi:id="_NjpkYWEIEdqmfMQqVJOcWQ" annotatedElement="_NjpkYGEIEdqmfMQqVJOcWQ">
        <body>A protected element is visible to elements that have a generalization relationship to the namespace that owns it.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_NjpkYmEIEdqmfMQqVJOcWQ" name="package">
      <ownedComment xmi:id="_NjpkY2EIEdqmfMQqVJOcWQ" annotatedElement="_NjpkYmEIEdqmfMQqVJOcWQ">
        <body>A package element is owned by a namespace that is not a package, and is visible to elements that are in the same package as its owning namespace. Only named elements that are not owned by packages can be marked as having package visibility.  Any element marked as having package visibility is visible to all elements within the nearest enclosing package (given that other owning elements have proper visibility).  Outside the nearest enclosing package, an element marked as having package visibility is not visible.</body>
      </ownedComment>
    </ownedLiteral>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NlIyLWEIEdqmfMQqVJOcWQ" name="LiteralSpecification" isAbstract="true">
    <ownedComment xmi:id="_NlIyLmEIEdqmfMQqVJOcWQ" annotatedElement="_NlIyLWEIEdqmfMQqVJOcWQ">
      <body>A literal specification is an abstract specialization of ValueSpecification that identifies a literal constant being modeled.</body>
    </ownedComment>
    <generalization xmi:id="_NlIyL2EIEdqmfMQqVJOcWQ" general="_NiwMlmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NlSjAGEIEdqmfMQqVJOcWQ" name="LiteralInteger">
    <ownedComment xmi:id="_NlSjAWEIEdqmfMQqVJOcWQ" annotatedElement="_NlSjAGEIEdqmfMQqVJOcWQ">
      <body>A literal integer contains an Integer-valued attribute.</body>
    </ownedComment>
    <generalization xmi:id="_NlSjAmEIEdqmfMQqVJOcWQ" general="_NlIyLWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NlSjA2EIEdqmfMQqVJOcWQ" name="value">
      <eAnnotations xmi:id="_NlSjBGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NlSjBWEIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NlSjBmEIEdqmfMQqVJOcWQ" annotatedElement="_NlSjA2EIEdqmfMQqVJOcWQ">
        <body>The specified Integer value.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NlSjB2EIEdqmfMQqVJOcWQ" name="isComputable" isQuery="true" redefinedOperation="_NiwMmmEIEdqmfMQqVJOcWQ" bodyCondition="_NlSjCWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NlSjCGEIEdqmfMQqVJOcWQ" annotatedElement="_NlSjB2EIEdqmfMQqVJOcWQ">
        <body>The query isComputable() is redefined to be true.</body>
      </ownedComment>
      <ownedRule xmi:id="_NlSjCWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NlSjB2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlSjCmEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = true</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NlSjC2EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NlSjDGEIEdqmfMQqVJOcWQ" name="integerValue" isQuery="true" redefinedOperation="_NiwMn2EIEdqmfMQqVJOcWQ" bodyCondition="_NlSjDmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NlSjDWEIEdqmfMQqVJOcWQ" annotatedElement="_NlSjDGEIEdqmfMQqVJOcWQ">
        <body>The query integerValue() gives the value.</body>
      </ownedComment>
      <ownedRule xmi:id="_NlSjDmEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NlSjDGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlSjD2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = value</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NlSjEGEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NlSjEWEIEdqmfMQqVJOcWQ" name="LiteralString">
    <ownedComment xmi:id="_NlSjEmEIEdqmfMQqVJOcWQ" annotatedElement="_NlSjEWEIEdqmfMQqVJOcWQ">
      <body>A literal string contains a String-valued attribute.</body>
    </ownedComment>
    <generalization xmi:id="_NlSjE2EIEdqmfMQqVJOcWQ" general="_NlIyLWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NlSjFGEIEdqmfMQqVJOcWQ" name="value">
      <eAnnotations xmi:id="_NlSjFWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NlSjFmEIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NlSjF2EIEdqmfMQqVJOcWQ" annotatedElement="_NlSjFGEIEdqmfMQqVJOcWQ">
        <body>The specified String value.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NlSjGGEIEdqmfMQqVJOcWQ" name="isComputable" isQuery="true" redefinedOperation="_NiwMmmEIEdqmfMQqVJOcWQ" bodyCondition="_NlSjGmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NlSjGWEIEdqmfMQqVJOcWQ" annotatedElement="_NlSjGGEIEdqmfMQqVJOcWQ">
        <body>The query isComputable() is redefined to be true.</body>
      </ownedComment>
      <ownedRule xmi:id="_NlSjGmEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NlSjGGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlSjG2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = true</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NlSjHGEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NlSjHWEIEdqmfMQqVJOcWQ" name="stringValue" isQuery="true" redefinedOperation="_Ni59Y2EIEdqmfMQqVJOcWQ" bodyCondition="_NlSjH2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NlSjHmEIEdqmfMQqVJOcWQ" annotatedElement="_NlSjHWEIEdqmfMQqVJOcWQ">
        <body>The query stringValue() gives the value.</body>
      </ownedComment>
      <ownedRule xmi:id="_NlSjH2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NlSjHWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlSjIGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = value</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NlSjIWEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NlSjImEIEdqmfMQqVJOcWQ" name="LiteralBoolean">
    <ownedComment xmi:id="_NlSjI2EIEdqmfMQqVJOcWQ" annotatedElement="_NlSjImEIEdqmfMQqVJOcWQ">
      <body>A literal boolean contains a Boolean-valued attribute.</body>
    </ownedComment>
    <generalization xmi:id="_NlSjJGEIEdqmfMQqVJOcWQ" general="_NlIyLWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NlSjJWEIEdqmfMQqVJOcWQ" name="value">
      <eAnnotations xmi:id="_NlSjJmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NlSjJ2EIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NlSjKGEIEdqmfMQqVJOcWQ" annotatedElement="_NlSjJWEIEdqmfMQqVJOcWQ">
        <body>The specified Boolean value.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NlSjKWEIEdqmfMQqVJOcWQ" name="isComputable" isQuery="true" redefinedOperation="_NiwMmmEIEdqmfMQqVJOcWQ" bodyCondition="_NlSjK2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NlSjKmEIEdqmfMQqVJOcWQ" annotatedElement="_NlSjKWEIEdqmfMQqVJOcWQ">
        <body>The query isComputable() is redefined to be true.</body>
      </ownedComment>
      <ownedRule xmi:id="_NlSjK2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NlSjKWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlSjLGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = true</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NlSjLWEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NlSjLmEIEdqmfMQqVJOcWQ" name="booleanValue" isQuery="true" redefinedOperation="_NiwMpGEIEdqmfMQqVJOcWQ" bodyCondition="_NlSjMGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NlSjL2EIEdqmfMQqVJOcWQ" annotatedElement="_NlSjLmEIEdqmfMQqVJOcWQ">
        <body>The query booleanValue() gives the value.</body>
      </ownedComment>
      <ownedRule xmi:id="_NlSjMGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NlSjLmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlSjMWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = value</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NlSjMmEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NlSjM2EIEdqmfMQqVJOcWQ" name="LiteralNull">
    <ownedComment xmi:id="_NlSjNGEIEdqmfMQqVJOcWQ" annotatedElement="_NlSjM2EIEdqmfMQqVJOcWQ">
      <body>A literal null is used to represent null, i.e., the absence of a value.</body>
    </ownedComment>
    <generalization xmi:id="_NlSjNWEIEdqmfMQqVJOcWQ" general="_NlIyLWEIEdqmfMQqVJOcWQ"/>
    <ownedOperation xmi:id="_NlSjNmEIEdqmfMQqVJOcWQ" name="isComputable" isQuery="true" redefinedOperation="_NiwMmmEIEdqmfMQqVJOcWQ" bodyCondition="_NlSjOGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NlSjN2EIEdqmfMQqVJOcWQ" annotatedElement="_NlSjNmEIEdqmfMQqVJOcWQ">
        <body>The query isComputable() is redefined to be true.</body>
      </ownedComment>
      <ownedRule xmi:id="_NlSjOGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NlSjNmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlSjOWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = true</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NlSjOmEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NlSjO2EIEdqmfMQqVJOcWQ" name="isNull" isQuery="true" redefinedOperation="_Ni59bWEIEdqmfMQqVJOcWQ" bodyCondition="_NlSjPWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NlSjPGEIEdqmfMQqVJOcWQ" annotatedElement="_NlSjO2EIEdqmfMQqVJOcWQ">
        <body>The query isNull() returns true.</body>
      </ownedComment>
      <ownedRule xmi:id="_NlSjPWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NlSjO2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlSjPmEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = true</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NlSjP2EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NjDHfmEIEdqmfMQqVJOcWQ" name="Constraint">
    <ownedComment xmi:id="_NjDHf2EIEdqmfMQqVJOcWQ" annotatedElement="_NjDHfmEIEdqmfMQqVJOcWQ">
      <body>Constraint contains a ValueSpecification that specifies additional semantics for one or more elements. Certain kinds of constraints (such as an association &quot;xor&quot; constraint) are predefined in UML, others may be user-defined. A user-defined Constraint is described using a specified language, whose syntax and interpretation is a tool responsibility. One predefined language for writing constraints is OCL. In some situations, a programming language such as Java may be appropriate for expressing a constraint. In other situations natural language may be used.

Constraint is a condition (a Boolean expression) that restricts the extension of the associated element beyond what is imposed by the other language constructs applied to the element. Constraint contains an optional name, although they are commonly unnamed.</body>
    </ownedComment>
    <ownedComment xmi:id="_NlSjQGEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHfmEIEdqmfMQqVJOcWQ">
      <body>Constraint contains a ValueSpecification that specifies additional semantics for one or more elements. Certain kinds of constraints (such as an association &quot;xor&quot; constraint) are predefined in UML, others may be user-defined. A user-defined Constraint is described using a specified language, whose syntax and interpretation is a tool responsibility. One predefined language for writing constraints is OCL. In some situations, a programming language such as Java may be appropriate for expressing a constraint. In other situations natural language may be used.

Constraint is a condition (a Boolean expression) that restricts the extension of the associated element beyond what is imposed by the other language constructs applied to that element. Constraint contains an optional name, although they are commonly unnamed.</body>
    </ownedComment>
    <ownedRule xmi:id="_NjDHgGEIEdqmfMQqVJOcWQ" name="not_apply_to_self" constrainedElement="_NjDHfmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjDHgWEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHgGEIEdqmfMQqVJOcWQ">
        <body>A constraint cannot be applied to itself.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NjDHgmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>not constrainedElement->includes(self)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NjDHg2EIEdqmfMQqVJOcWQ" name="value_specification_boolean" constrainedElement="_NjDHfmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjDHhGEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHg2EIEdqmfMQqVJOcWQ">
        <body>The value specification for a constraint must evaluate to a Boolean value.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NjDHhWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.specification().booleanValue().isOclKindOf(Boolean)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NlSjQWEIEdqmfMQqVJOcWQ" name="boolean_value" constrainedElement="_NjDHfmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NlSjQmEIEdqmfMQqVJOcWQ" annotatedElement="_NlSjQWEIEdqmfMQqVJOcWQ">
        <body>The value specification for a constraint must evaluate to a Boolean value.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlSjQ2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NlSjRGEIEdqmfMQqVJOcWQ" name="no_side_effects" constrainedElement="_NjDHfmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NlSjRWEIEdqmfMQqVJOcWQ" annotatedElement="_NlSjRGEIEdqmfMQqVJOcWQ">
        <body>Evaluating the value specification for a constraint must not have side effects.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlSjRmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NlSjR2EIEdqmfMQqVJOcWQ" name="not_applied_to_self" constrainedElement="_NjDHfmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NlSjSGEIEdqmfMQqVJOcWQ" annotatedElement="_NlSjR2EIEdqmfMQqVJOcWQ">
        <body>A constraint cannot be applied to itself.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlSjSWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>not constrainedElement->includes(self)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NjDHhmEIEdqmfMQqVJOcWQ" general="_Nimb8GEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NjDHh2EIEdqmfMQqVJOcWQ" name="constrainedElement" type="_NidR0mEIEdqmfMQqVJOcWQ" isOrdered="true" association="_NkPaMGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjDHiGEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHh2EIEdqmfMQqVJOcWQ">
        <body>The ordered set of Elements referenced by this Constraint.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NlSjSmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NlSjS2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjDHi2EIEdqmfMQqVJOcWQ" name="specification" type="_NiwMlmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NkPaMmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NjDHjGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjDHjWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjDHjmEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHi2EIEdqmfMQqVJOcWQ">
        <body>A condition that must be true when evaluated in order for the constraint to be satisfied.

</body>
      </ownedComment>
      <ownedComment xmi:id="_Nlbs8GEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHi2EIEdqmfMQqVJOcWQ">
        <body>A condition that must be true when evaluated in order for the constraint to be satisfied.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nlbs8WEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nlbs8mEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjDHkWEIEdqmfMQqVJOcWQ" name="context" type="_NimbnWEIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ" association="_NkiVGmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NjDHkmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjDHk2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nlbs82EIEdqmfMQqVJOcWQ" annotatedElement="_NjDHkWEIEdqmfMQqVJOcWQ">
        <body>Specifies the namespace that owns the NamedElement.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nlbs9GEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nlbs9WEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NjWCQGEIEdqmfMQqVJOcWQ" name="ElementImport">
    <ownedComment xmi:id="_NjWCQWEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCQGEIEdqmfMQqVJOcWQ">
      <body>An element import is defined as a directed relationship between an importing namespace and a packageable element. The name of the packageable element or its alias is to be added to the namespace of the importing namespace. It is also possible to control whether the imported element can be further imported.</body>
    </ownedComment>
    <ownedRule xmi:id="_NjWCQmEIEdqmfMQqVJOcWQ" name="visibility_public_or_private" constrainedElement="_NjWCQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjWCQ2EIEdqmfMQqVJOcWQ" annotatedElement="_NjWCQmEIEdqmfMQqVJOcWQ">
        <body>The visibility of an ElementImport is either public or private.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NjWCRGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.visibility = #public or self.visibility = #private</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nlbs9mEIEdqmfMQqVJOcWQ" name="visibility_or_private" constrainedElement="_NjWCQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nlbs92EIEdqmfMQqVJOcWQ" annotatedElement="_Nlbs9mEIEdqmfMQqVJOcWQ">
        <body>The visibility of an ElementImport is either public or private.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nlbs-GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.visibility = #public or self.visibility = #private</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NjWCRWEIEdqmfMQqVJOcWQ" name="imported_element_is_public" constrainedElement="_NjWCQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjWCRmEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCRWEIEdqmfMQqVJOcWQ">
        <body>An importedElement has either public visibility or no visibility at all.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nlbs-WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.importedElement.visibility.notEmpty() implies self.importedElement.visibility = #public</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NjWCSGEIEdqmfMQqVJOcWQ" general="_NidRw2EIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NjWCSWEIEdqmfMQqVJOcWQ" name="visibility" type="_NjpkUmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NjWCSmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NjWCS2EIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjWCTGEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCSWEIEdqmfMQqVJOcWQ">
        <body>Specifies the visibility of the imported PackageableElement within the importing Package. The default visibility is the same as that of the imported element. If the imported element does not have a visibility, it is possible to add visibility to the element import.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjWCTWEIEdqmfMQqVJOcWQ" name="alias">
      <ownedComment xmi:id="_NjWCTmEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCTWEIEdqmfMQqVJOcWQ">
        <body>Specifies the name that should be added to the namespace of the importing Package in lieu of the name of the imported PackagableElement. The aliased name must not clash with any other member name in the importing Package. By default, no alias is used.</body>
      </ownedComment>
      <ownedComment xmi:id="_Nlbs-mEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCTWEIEdqmfMQqVJOcWQ">
        <body>Specifies the name that should be added to the namespace of the importing Pack-age in lieu of the name of the imported PackagableElement. The aliased name must not clash with any other member name in the importing Package. By default, no alias is used.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nlbs-2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nlbs_GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjWCUWEIEdqmfMQqVJOcWQ" name="importedElement" type="_Nimb8GEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRzGEIEdqmfMQqVJOcWQ" association="_NkGQMGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjWCUmEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCUWEIEdqmfMQqVJOcWQ">
        <body>Specifies the PackageableElement whose name is to be added to a Namespace.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nlbs_WEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nlbs_mEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjWCVWEIEdqmfMQqVJOcWQ" name="importingNamespace" type="_NimbnWEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRxmEIEdqmfMQqVJOcWQ _NidR4GEIEdqmfMQqVJOcWQ" association="_NkGQM2EIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NjWCVmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjWCV2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjWCWGEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCVWEIEdqmfMQqVJOcWQ">
        <body>Specifies the Namespace that imports a PackageableElement from another Package.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nlbs_2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NlbtAGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NjWCW2EIEdqmfMQqVJOcWQ" name="getName" isQuery="true" bodyCondition="_NjWCXWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjWCXGEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCW2EIEdqmfMQqVJOcWQ">
        <body>The query getName() returns the name under which the imported PackageableElement will be known in the importing namespace.</body>
      </ownedComment>
      <ownedRule xmi:id="_NjWCXWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NjWCW2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlbtAWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if self.alias->notEmpty() then
  self.alias
else
  self.importedElement.name
endif</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NjWCX2EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NimbYGEIEdqmfMQqVJOcWQ" name="MultiplicityElement" isAbstract="true">
    <ownedComment xmi:id="_NimbYWEIEdqmfMQqVJOcWQ" annotatedElement="_NimbYGEIEdqmfMQqVJOcWQ">
      <body>A MultiplicityElement is an abstract metaclass which includes optional attributes for defining the bounds of a multiplicity. A MultiplicityElement also includes specifications of whether the values in an instantiation of this element must be unique or ordered.</body>
    </ownedComment>
    <ownedRule xmi:id="_NimbYmEIEdqmfMQqVJOcWQ" name="upper_gt_0" constrainedElement="_NimbYGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NimbY2EIEdqmfMQqVJOcWQ" annotatedElement="_NimbYmEIEdqmfMQqVJOcWQ">
        <body>A multiplicity must define at least one valid cardinality that is greater than zero.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlbtAmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>upperBound()->notEmpty() implies upperBound() > 0</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NimbaGEIEdqmfMQqVJOcWQ" name="lower_ge_0" constrainedElement="_NimbYGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NimbaWEIEdqmfMQqVJOcWQ" annotatedElement="_NimbaGEIEdqmfMQqVJOcWQ">
        <body>The lower bound must be a non-negative integer literal.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlbtA2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>lowerBound()->notEmpty() implies lowerBound() >= 0</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NimbZWEIEdqmfMQqVJOcWQ" name="upper_ge_lower" constrainedElement="_NimbYGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NimbZmEIEdqmfMQqVJOcWQ" annotatedElement="_NimbZWEIEdqmfMQqVJOcWQ">
        <body>The upper bound must be greater than or equal to the lower bound.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlbtBGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>(upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NlbtBWEIEdqmfMQqVJOcWQ" name="value_specification_no_side_effects" constrainedElement="_NimbYGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NlbtBmEIEdqmfMQqVJOcWQ" annotatedElement="_NlbtBWEIEdqmfMQqVJOcWQ">
        <body>If a non-literal ValueSpecification is used for the lower or upper bound, then evaluating that specification must not have side effects.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlbtB2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NlbtCGEIEdqmfMQqVJOcWQ" name="value_specification_constant" constrainedElement="_NimbYGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NlbtCWEIEdqmfMQqVJOcWQ" annotatedElement="_NlbtCGEIEdqmfMQqVJOcWQ">
        <body>If a non-literal ValueSpecification is used for the lower or upper bound, then that specification must be a constant expression.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlbtCmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nimba2EIEdqmfMQqVJOcWQ" general="_NidR0mEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NimbbGEIEdqmfMQqVJOcWQ" name="isOrdered">
      <ownedComment xmi:id="_NimbbWEIEdqmfMQqVJOcWQ" annotatedElement="_NimbbGEIEdqmfMQqVJOcWQ">
        <body>For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered..</body>
      </ownedComment>
      <ownedComment xmi:id="_NlbtC2EIEdqmfMQqVJOcWQ" annotatedElement="_NimbbGEIEdqmfMQqVJOcWQ">
        <body>For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NlbtDGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nimbb2EIEdqmfMQqVJOcWQ" name="isUnique">
      <ownedComment xmi:id="_NimbcGEIEdqmfMQqVJOcWQ" annotatedElement="_Nimbb2EIEdqmfMQqVJOcWQ">
        <body>For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_Nlld8GEIEdqmfMQqVJOcWQ" value="true"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nimbd2EIEdqmfMQqVJOcWQ" name="upper" isDerived="true">
      <eAnnotations xmi:id="_Nlld8WEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_Nlld8mEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NimbeGEIEdqmfMQqVJOcWQ" annotatedElement="_Nimbd2EIEdqmfMQqVJOcWQ">
        <body>Specifies the upper bound of the multiplicity interval.</body>
      </ownedComment>
      <ownedComment xmi:id="_Nlld82EIEdqmfMQqVJOcWQ" annotatedElement="_Nimbd2EIEdqmfMQqVJOcWQ">
        <body>Specifies the upper bound of the multiplicity interval, if it is expressed as an unlimited natural.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3DE6A93C0003"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nlld9GEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nlld9WEIEdqmfMQqVJOcWQ"/>
      <defaultValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nlld9mEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NimbcmEIEdqmfMQqVJOcWQ" name="lower" isDerived="true">
      <eAnnotations xmi:id="_Nlld92EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_Nlld-GEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nimbc2EIEdqmfMQqVJOcWQ" annotatedElement="_NimbcmEIEdqmfMQqVJOcWQ">
        <body>Specifies the lower bound of the multiplicity interval.</body>
      </ownedComment>
      <ownedComment xmi:id="_Nlld-WEIEdqmfMQqVJOcWQ" annotatedElement="_NimbcmEIEdqmfMQqVJOcWQ">
        <body>Specifies the lower bound of the multiplicity interval, if it is expressed as an integer.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nlld-mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nlld-2EIEdqmfMQqVJOcWQ"/>
      <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_Nlld_GEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nlld_WEIEdqmfMQqVJOcWQ" name="upperValue" type="_NiwMlmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NotqcGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nlld_mEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nlld_2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NlleAGEIEdqmfMQqVJOcWQ" annotatedElement="_Nlld_WEIEdqmfMQqVJOcWQ">
        <body>The specification of the upper bound for this multiplicity.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NlleAWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NlleAmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NlleA2EIEdqmfMQqVJOcWQ" name="lowerValue" type="_NiwMlmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NotqdWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NlleBGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NlleBWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NlleBmEIEdqmfMQqVJOcWQ" annotatedElement="_NlleA2EIEdqmfMQqVJOcWQ">
        <body>The specification of the lower bound for this multiplicity.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NlleB2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NlleCGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NlleCWEIEdqmfMQqVJOcWQ" name="lower" isQuery="true" bodyCondition="_NlleDWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NlleCmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EOperation" xmi:id="_NlleC2EIEdqmfMQqVJOcWQ" operationName="getLower"/>
      </eAnnotations>
      <ownedComment xmi:id="_NlleDGEIEdqmfMQqVJOcWQ" annotatedElement="_NlleCWEIEdqmfMQqVJOcWQ">
        <body>The derived lower attribute must equal the lowerBound.</body>
      </ownedComment>
      <ownedRule xmi:id="_NlleDWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NlleCWEIEdqmfMQqVJOcWQ _NimbcmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlleDmEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = lowerBound()</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NlleD2EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NlleEGEIEdqmfMQqVJOcWQ" name="upper" isQuery="true" bodyCondition="_NlleFGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NlleEWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EOperation" xmi:id="_NlleEmEIEdqmfMQqVJOcWQ" operationName="getUpper"/>
      </eAnnotations>
      <ownedComment xmi:id="_NlleE2EIEdqmfMQqVJOcWQ" annotatedElement="_NlleEGEIEdqmfMQqVJOcWQ">
        <body>The derived upper attribute must equal the upperBound.</body>
      </ownedComment>
      <ownedRule xmi:id="_NlleFGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NlleEGEIEdqmfMQqVJOcWQ _Nimbd2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlleFWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = upperBound()</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NlleFmEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3DE6A93C0003"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3DE6A93C0003"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NimbfGEIEdqmfMQqVJOcWQ" name="isMultivalued" isQuery="true" precondition="_NimbfmEIEdqmfMQqVJOcWQ" bodyCondition="_NimbgGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NimbfWEIEdqmfMQqVJOcWQ" annotatedElement="_NimbfGEIEdqmfMQqVJOcWQ">
        <body>The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.</body>
      </ownedComment>
      <ownedRule xmi:id="_NimbfmEIEdqmfMQqVJOcWQ" constrainedElement="_NimbfGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlleF2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>upperBound()->notEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_NimbgGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NimbfGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlleGGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = upperBound() > 1</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NimbgmEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_Nimbi2EIEdqmfMQqVJOcWQ" name="includesCardinality" isQuery="true" precondition="_NimbjWEIEdqmfMQqVJOcWQ" bodyCondition="_Nimbj2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NimbjGEIEdqmfMQqVJOcWQ" annotatedElement="_Nimbi2EIEdqmfMQqVJOcWQ">
        <body>The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity.</body>
      </ownedComment>
      <ownedRule xmi:id="_NimbjWEIEdqmfMQqVJOcWQ" constrainedElement="_Nimbi2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlleGWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>upperBound()->notEmpty() and lowerBound()->notEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_Nimbj2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_Nimbi2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlleGmEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = (lowerBound() &lt;= C) and (upperBound() >= C)</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NimbkWEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_NimbkmEIEdqmfMQqVJOcWQ" name="C">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="_Nimbg2EIEdqmfMQqVJOcWQ" name="includesMultiplicity" isQuery="true" precondition="_NimbhWEIEdqmfMQqVJOcWQ" bodyCondition="_Nimbh2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NimbhGEIEdqmfMQqVJOcWQ" annotatedElement="_Nimbg2EIEdqmfMQqVJOcWQ">
        <body>The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.</body>
      </ownedComment>
      <ownedRule xmi:id="_NimbhWEIEdqmfMQqVJOcWQ" constrainedElement="_Nimbg2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlleG2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>self.upperBound()->notEmpty() and self.lowerBound()->notEmpty()
and M.upperBound()->notEmpty() and M.lowerBound()->notEmpty()
</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_Nimbh2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_Nimbg2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlleHGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = (self.lowerBound() &lt;= M.lowerBound()) and (self.upperBound() >= M.upperBound())</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NimbiWEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_NimbimEIEdqmfMQqVJOcWQ" name="M" type="_NimbYGEIEdqmfMQqVJOcWQ"/>
    </ownedOperation>
    <ownedOperation xmi:id="_Nimbk2EIEdqmfMQqVJOcWQ" name="lowerBound" isQuery="true" bodyCondition="_NimblWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NimblGEIEdqmfMQqVJOcWQ" annotatedElement="_Nimbk2EIEdqmfMQqVJOcWQ">
        <body>The query lowerBound() returns the lower bound of the multiplicity as an integer.</body>
      </ownedComment>
      <ownedRule xmi:id="_NimblWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_Nimbk2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlleHWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if lowerValue->isEmpty() then 1 else lowerValue.integerValue() endif</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_Nimbl2EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NimbmGEIEdqmfMQqVJOcWQ" name="upperBound" isQuery="true" bodyCondition="_NimbmmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NimbmWEIEdqmfMQqVJOcWQ" annotatedElement="_NimbmGEIEdqmfMQqVJOcWQ">
        <body>The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural.</body>
      </ownedComment>
      <ownedRule xmi:id="_NimbmmEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NimbmGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlleHmEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if upperValue->isEmpty() then 1 else upperValue.unlimitedValue() endif</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NimbnGEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3DE6A93C0003"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3DE6A93C0003"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NlleH2EIEdqmfMQqVJOcWQ" name="setLower" visibility="protected">
      <ownedParameter xmi:id="_NlleIGEIEdqmfMQqVJOcWQ" name="newLower" effect="read">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="_NlleIWEIEdqmfMQqVJOcWQ" name="setUpper" visibility="protected">
      <ownedParameter xmi:id="_NlleImEIEdqmfMQqVJOcWQ" name="newUpper" effect="read">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3DE6A93C0003"/>
      </ownedParameter>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NiwMj2EIEdqmfMQqVJOcWQ" name="TypedElement" isAbstract="true">
    <ownedComment xmi:id="_NiwMkGEIEdqmfMQqVJOcWQ" annotatedElement="_NiwMj2EIEdqmfMQqVJOcWQ">
      <body>A typed element is an element that has a type that serves as a constraint on the range of values the element can represent. Typed element is an abstract metaclass.</body>
    </ownedComment>
    <ownedComment xmi:id="_NlleI2EIEdqmfMQqVJOcWQ" annotatedElement="_NiwMj2EIEdqmfMQqVJOcWQ">
      <body>A typed element is an element that has a type that serves as a constraint on the range of values the element can represent.

Typed element is an abstract metaclass.

</body>
    </ownedComment>
    <generalization xmi:id="_NiwMkWEIEdqmfMQqVJOcWQ" general="_NjfzQGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NiwMkmEIEdqmfMQqVJOcWQ" name="type" type="_NjWCumEIEdqmfMQqVJOcWQ" association="_NjyuMGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NiwMk2EIEdqmfMQqVJOcWQ" annotatedElement="_NiwMkmEIEdqmfMQqVJOcWQ">
        <body>Redefines the corresponding property from Basic to derive this information from the return result for this Operation.</body>
      </ownedComment>
      <ownedComment xmi:id="_NlleJGEIEdqmfMQqVJOcWQ" annotatedElement="_NiwMkmEIEdqmfMQqVJOcWQ">
        <body>The type of the TypedElement.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NlleJWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NlleJmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NidR-GEIEdqmfMQqVJOcWQ" name="Feature" isAbstract="true">
    <ownedComment xmi:id="_NidR-WEIEdqmfMQqVJOcWQ" annotatedElement="_NidR-GEIEdqmfMQqVJOcWQ">
      <body>A feature declares a behavioral or structural characteristic of instances of classifiers. Feature is an abstract metaclass.</body>
    </ownedComment>
    <generalization xmi:id="_NidR-mEIEdqmfMQqVJOcWQ" general="_NiwMYGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NmCJ7WEIEdqmfMQqVJOcWQ" name="isStatic">
      <ownedComment xmi:id="_NmCJ7mEIEdqmfMQqVJOcWQ" annotatedElement="_NmCJ7WEIEdqmfMQqVJOcWQ">
        <body>Specifies whether this feature characterizes individual instances classified by the classifier (false) or the classifier itself (true).</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NmCJ72EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NidR-2EIEdqmfMQqVJOcWQ" name="featuringClassifier" type="_NiTgcGEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="_NkPaLmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NidR_GEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NidR_WEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NidR_mEIEdqmfMQqVJOcWQ" annotatedElement="_NidR-2EIEdqmfMQqVJOcWQ">
        <body>Redefines the corresponding association in Abstractions.</body>
      </ownedComment>
      <ownedComment xmi:id="_NmCJ8GEIEdqmfMQqVJOcWQ" annotatedElement="_NidR-2EIEdqmfMQqVJOcWQ">
        <body>The Classifiers that have this Feature as a feature.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NmCJ8WEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NmCJ8mEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NiwMYGEIEdqmfMQqVJOcWQ" name="RedefinableElement" isAbstract="true">
    <ownedComment xmi:id="_NiwMYWEIEdqmfMQqVJOcWQ" annotatedElement="_NiwMYGEIEdqmfMQqVJOcWQ">
      <body>A redefinable element is an element that, when defined in the context of a classifier, can be redefined more specifically or differently in the context of another classifier that specializes (directly or indirectly) the context classifier. </body>
    </ownedComment>
    <ownedComment xmi:id="_NmCJ82EIEdqmfMQqVJOcWQ" annotatedElement="_NiwMYGEIEdqmfMQqVJOcWQ">
      <body>A redefinable element is a named element that can be redefined in the context of a generalization. RedefinableElement is an abstract metaclass.</body>
    </ownedComment>
    <ownedRule xmi:id="_NiwMYmEIEdqmfMQqVJOcWQ" name="redefinition_context_valid" constrainedElement="_NiwMYGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NiwMY2EIEdqmfMQqVJOcWQ" annotatedElement="_NiwMYmEIEdqmfMQqVJOcWQ">
        <body>At least one of the redefinition contexts of the redefining element must be a specialization of at least one of the redefinition contexts for each redefined element.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NmLT0GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.redefinedElement->forAll(e | self.isRedefinitionContextValid(e))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NiwMZWEIEdqmfMQqVJOcWQ" name="redefinition_consistent" constrainedElement="_NiwMYGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NiwMZmEIEdqmfMQqVJOcWQ" annotatedElement="_NiwMZWEIEdqmfMQqVJOcWQ">
        <body>A redefining element must be consistent with each redefined element.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NmLT0WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.redefinedElement->forAll(re | re.isConsistentWith(self))</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NiwMaGEIEdqmfMQqVJOcWQ" general="_NjfzQGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NmLT0mEIEdqmfMQqVJOcWQ" name="isLeaf">
      <ownedComment xmi:id="_NmLT02EIEdqmfMQqVJOcWQ" annotatedElement="_NmLT0mEIEdqmfMQqVJOcWQ">
        <body>Indicates whether it is possible to further specialize a RedefinableElement. If the value is true, then it is not possible to further specialize the RedefinableElement.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NmLT1GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NiwMb2EIEdqmfMQqVJOcWQ" name="redefinedElement" type="_NiwMYGEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="_NkPaLGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NiwMcGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NiwMcWEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NiwMcmEIEdqmfMQqVJOcWQ" annotatedElement="_NiwMb2EIEdqmfMQqVJOcWQ">
        <body>The redefinable element that is being redefined by this element.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NmLT1WEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NmLT1mEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NiwMaWEIEdqmfMQqVJOcWQ" name="redefinitionContext" type="_NiTgcGEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="_NkPaKmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NiwMamEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NiwMa2EIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NiwMbGEIEdqmfMQqVJOcWQ" annotatedElement="_NiwMaWEIEdqmfMQqVJOcWQ">
        <body>References the contexts that this element may be redefined from.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NmLT12EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NmLT2GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NiwMdWEIEdqmfMQqVJOcWQ" name="isConsistentWith" isQuery="true" precondition="_NmLT2WEIEdqmfMQqVJOcWQ" bodyCondition="_NiwMd2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NiwMdmEIEdqmfMQqVJOcWQ" annotatedElement="_NiwMdWEIEdqmfMQqVJOcWQ">
        <body>The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.</body>
      </ownedComment>
      <ownedRule xmi:id="_NmLT2WEIEdqmfMQqVJOcWQ" constrainedElement="_NiwMdWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NmLT2mEIEdqmfMQqVJOcWQ" language="OCL">
          <body>redefinee.isRedefinitionContextValid(self)

</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_NiwMd2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NiwMdWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NmLT22EIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = false</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NiwMeWEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_NiwMemEIEdqmfMQqVJOcWQ" name="redefinee" type="_NiwMYGEIEdqmfMQqVJOcWQ"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NiwMe2EIEdqmfMQqVJOcWQ" name="isRedefinitionContextValid" isQuery="true" bodyCondition="_NiwMfWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NiwMfGEIEdqmfMQqVJOcWQ" annotatedElement="_NiwMe2EIEdqmfMQqVJOcWQ">
        <body>The query isRedefinitionContextValid() specifies whether the redefinition contexts of this RedefinableElement are properly related to the redefinition contexts of the specified RedefinableElement to allow this element to redefine the other. By default at least one of the redefinition contexts of this element must be a specialization of at least one of the redefinition contexts of the specified element.</body>
      </ownedComment>
      <ownedRule xmi:id="_NiwMfWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NiwMe2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NmLT3GEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = redefinitionContext->exists(c | c.allParents()->includes(redefined.redefinitionContext)))</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NiwMf2EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_NiwMgGEIEdqmfMQqVJOcWQ" name="redefined" type="_NiwMYGEIEdqmfMQqVJOcWQ" effect="read"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NiwMimEIEdqmfMQqVJOcWQ" name="StructuralFeature" isAbstract="true">
    <ownedComment xmi:id="_NiwMi2EIEdqmfMQqVJOcWQ" annotatedElement="_NiwMimEIEdqmfMQqVJOcWQ">
      <body>A structural feature is a typed feature of a classifier that specifies the structure of instances of the classifier. Structural feature is an abstract metaclass.</body>
    </ownedComment>
    <ownedComment xmi:id="_NmVE7GEIEdqmfMQqVJOcWQ" annotatedElement="_NiwMimEIEdqmfMQqVJOcWQ">
      <body>A structural feature is a typed feature of a classifier that specify the structure of instances of the classifier. Structural feature is an abstract metaclass.
By specializing multiplicity element, it supports a multiplicity that specifies valid cardinalities for the collection of values associated with an instantiation of the structural feature.
</body>
    </ownedComment>
    <generalization xmi:id="_NiwMjGEIEdqmfMQqVJOcWQ" general="_NidR-GEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NiwMjWEIEdqmfMQqVJOcWQ" general="_NiwMj2EIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NiwMjmEIEdqmfMQqVJOcWQ" general="_NimbYGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nme10GEIEdqmfMQqVJOcWQ" name="isReadOnly">
      <ownedComment xmi:id="_Nme10WEIEdqmfMQqVJOcWQ" annotatedElement="_Nme10GEIEdqmfMQqVJOcWQ">
        <body>States whether the feature's value may be modified by a client.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_Nme10mEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nme17GEIEdqmfMQqVJOcWQ" name="Slot">
    <ownedComment xmi:id="_Nme17WEIEdqmfMQqVJOcWQ" annotatedElement="_Nme17GEIEdqmfMQqVJOcWQ">
      <body>A slot is owned by an instance specification. It specifies the value or values for its defining feature, which must be a structural feature of a classifier of the instance specification owning the slot.</body>
    </ownedComment>
    <generalization xmi:id="_Nme17mEIEdqmfMQqVJOcWQ" general="_NidR0mEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nme172EIEdqmfMQqVJOcWQ" name="owningInstance" type="_Nme102EIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_Nn-DmmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_Nme18GEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nme18WEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nme18mEIEdqmfMQqVJOcWQ" annotatedElement="_Nme172EIEdqmfMQqVJOcWQ">
        <body>The instance specification that owns this slot.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nme182EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nme19GEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nme19WEIEdqmfMQqVJOcWQ" name="definingFeature" type="_NiwMimEIEdqmfMQqVJOcWQ" association="_Nn-DnGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nme19mEIEdqmfMQqVJOcWQ" annotatedElement="_Nme19WEIEdqmfMQqVJOcWQ">
        <body>The structural feature that specifies the values that may be held by the slot.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nme192EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nme1-GEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nme1-WEIEdqmfMQqVJOcWQ" name="value" type="_NiwMlmEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_No3bcGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nme1-mEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nme1-2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nme1_GEIEdqmfMQqVJOcWQ" annotatedElement="_Nme1-WEIEdqmfMQqVJOcWQ">
        <body>The value or values corresponding to the defining feature for the owning instance specification.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nme1_WEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nme1_mEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NjWCmWEIEdqmfMQqVJOcWQ" name="PackageImport">
    <ownedComment xmi:id="_NjWCmmEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCmWEIEdqmfMQqVJOcWQ">
      <body>A package import is defined as a directed relationship that identifies a package whose members are to be imported by a namespace.</body>
    </ownedComment>
    <ownedRule xmi:id="_NjWCm2EIEdqmfMQqVJOcWQ" name="public_or_private" constrainedElement="_NjWCmWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjWCnGEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCm2EIEdqmfMQqVJOcWQ">
        <body>The visibility of a PackageImport is either public or private.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nmn_w2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.visibility = #public or self.visibility = #private</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NjWCnmEIEdqmfMQqVJOcWQ" general="_NidRw2EIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NjWCn2EIEdqmfMQqVJOcWQ" name="visibility" type="_NjpkUmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NjWCoGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NjWCoWEIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjWComEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCn2EIEdqmfMQqVJOcWQ">
        <body>Specifies the visibility of the imported PackageableElements within the importing Namespace, i.e., whether imported elements will in turn be visible to other packages that use that importingPackage as an importedPackage. If the PackageImport is public, the imported elements will be visible outside the package, while if it is private they will not.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjWCp2EIEdqmfMQqVJOcWQ" name="importingNamespace" type="_NimbnWEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRxmEIEdqmfMQqVJOcWQ _NidR4GEIEdqmfMQqVJOcWQ" association="_NkGQNmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NjWCqGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjWCqWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjWCqmEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCp2EIEdqmfMQqVJOcWQ">
        <body>Specifies the Namespace that imports the members from a Package.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nmn_xGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nmn_xWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjWCo2EIEdqmfMQqVJOcWQ" name="importedPackage" type="_NjWCYGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRzGEIEdqmfMQqVJOcWQ" association="_Nj8fUWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjWCpGEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCo2EIEdqmfMQqVJOcWQ">
        <body>Specifies the Package whose members are imported into a Namespace.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nmn_xmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nmn_x2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NjDHUGEIEdqmfMQqVJOcWQ" name="DataType">
    <ownedComment xmi:id="_NjDHUWEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHUGEIEdqmfMQqVJOcWQ">
      <body>A data type is a type whose instances are identified only by their value. A DataType may contain attributes to support the modeling of structured data types.



A typical use of data types would be to represent programming language primitive types or CORBA basic types. For example, integer and string types are often treated as data types.</body>
    </ownedComment>
    <ownedComment xmi:id="_NnOcvmEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHUGEIEdqmfMQqVJOcWQ">
      <body>A data type is a type whose instances are identified only by their value. A DataType may contain attributes to support the modeling of structured data types.

A typical use of data types would be to represent programming language primitive types or CORBA basic types. For example, integer and string types are often treated as data types.

</body>
    </ownedComment>
    <generalization xmi:id="_NjDHUmEIEdqmfMQqVJOcWQ" general="_NiTgcGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NjDHU2EIEdqmfMQqVJOcWQ" name="ownedAttribute" type="_Ni59sGEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NiTgemEIEdqmfMQqVJOcWQ _NimbtWEIEdqmfMQqVJOcWQ" association="_Nj8fOmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NjDHVGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjDHVWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjDHVmEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHU2EIEdqmfMQqVJOcWQ">
        <body>The Attributes owned by the DataType.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnOcv2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnOcwGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjDHWWEIEdqmfMQqVJOcWQ" name="ownedOperation" type="_NjM4UGEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NiTggGEIEdqmfMQqVJOcWQ _NimbtWEIEdqmfMQqVJOcWQ" association="_Nj8fPWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NjDHWmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjDHW2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjDHXGEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHWWEIEdqmfMQqVJOcWQ">
        <body>The Operations owned by the DataType.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnOcwWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnOcwmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NjDHX2EIEdqmfMQqVJOcWQ" name="inherit" type="_NjfzQGEIEdqmfMQqVJOcWQ" isQuery="true" redefinedOperation="_NidRs2EIEdqmfMQqVJOcWQ" bodyCondition="_NjDHYWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjDHYGEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHX2EIEdqmfMQqVJOcWQ">
        <body>The inherit operation is overridden to exclude redefined properties.</body>
      </ownedComment>
      <ownedRule xmi:id="_NjDHYWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NjDHX2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NjDHYmEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = inhs->excluding(inh | ownedMember->select(oclIsKindOf(RedefinableElement))->select(redefinedElement->includes(inh)))</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NjDHY2EIEdqmfMQqVJOcWQ" type="_NjfzQGEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NjDHZGEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NjDHZWEIEdqmfMQqVJOcWQ"/>
      </returnResult>
      <ownedParameter xmi:id="_NjDHZmEIEdqmfMQqVJOcWQ" name="inhs" type="_NjfzQGEIEdqmfMQqVJOcWQ">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NjDHZ2EIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NjDHaGEIEdqmfMQqVJOcWQ"/>
      </ownedParameter>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NjDHaWEIEdqmfMQqVJOcWQ" name="Enumeration">
    <ownedComment xmi:id="_NjDHamEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHaWEIEdqmfMQqVJOcWQ">
      <body>Enumeration is a kind of data type, whose instances may be any of a number of predefined enumeration literals.

It is possible to extend the set of applicable enumeration literals in other packages or profiles.

</body>
    </ownedComment>
    <ownedComment xmi:id="_NnOcw2EIEdqmfMQqVJOcWQ" annotatedElement="_NjDHaWEIEdqmfMQqVJOcWQ">
      <body>Enumeration is a kind of data type, whose instances may be any of a number of user-defined enumeration literals.

It is possible to extend the set of applicable enumeration literals in other packages or profiles.

</body>
    </ownedComment>
    <generalization xmi:id="_NjDHa2EIEdqmfMQqVJOcWQ" general="_NjDHUGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NjDHbGEIEdqmfMQqVJOcWQ" name="ownedLiteral" type="_NjDHcmEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_Nj8fOGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NjDHbWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjDHbmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjDHb2EIEdqmfMQqVJOcWQ" annotatedElement="_NjDHbGEIEdqmfMQqVJOcWQ">
        <body>The ordered collection of literals for the enumeration.</body>
      </ownedComment>
      <ownedComment xmi:id="_NnOcxGEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHbGEIEdqmfMQqVJOcWQ">
        <body>The ordered set of literals for this Enumeration.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnOcxWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnOcxmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NjDHcmEIEdqmfMQqVJOcWQ" name="EnumerationLiteral">
    <ownedComment xmi:id="_NjDHc2EIEdqmfMQqVJOcWQ" annotatedElement="_NjDHcmEIEdqmfMQqVJOcWQ">
      <body>An enumeration literal is a value of an enumeration.</body>
    </ownedComment>
    <ownedComment xmi:id="_NnOcx2EIEdqmfMQqVJOcWQ" annotatedElement="_NjDHcmEIEdqmfMQqVJOcWQ">
      <body>An enumeration literal is a user-defined data value for an enumeration.</body>
    </ownedComment>
    <generalization xmi:id="_NnOcyGEIEdqmfMQqVJOcWQ" general="_Nme102EIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NjDHdWEIEdqmfMQqVJOcWQ" name="enumeration" type="_NjDHaWEIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ" association="_Nj8fOGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NjDHdmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjDHd2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjDHeGEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHdWEIEdqmfMQqVJOcWQ">
        <body>The enumeration that this literal belongs to.</body>
      </ownedComment>
      <ownedComment xmi:id="_NnXmoGEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHdWEIEdqmfMQqVJOcWQ">
        <body>The Enumeration that this EnumerationLiteral is a member of.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnXmoWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnXmomEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NjDHe2EIEdqmfMQqVJOcWQ" name="PrimitiveType">
    <ownedComment xmi:id="_NjDHfGEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHe2EIEdqmfMQqVJOcWQ">
      <body>A primitive type defines a predefined data type, without any relevant substructure (i.e. it has no parts in the context of the UML). A primitive datatype may have an algebra and operations defined out of UML, for example, mathematically.</body>
    </ownedComment>
    <generalization xmi:id="_NjDHfWEIEdqmfMQqVJOcWQ" general="_NjDHUGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Ni59cmEIEdqmfMQqVJOcWQ" name="Association">
    <ownedComment xmi:id="_Ni59c2EIEdqmfMQqVJOcWQ" annotatedElement="_Ni59cmEIEdqmfMQqVJOcWQ">
      <body>An association specifies a semantic relationship that can occur between typed instances. It has at least two ends represented by properties, each of which is connected to the type of the end. More than one end of an association may have the same type.



An end property of an association that is owned by an end class or that is a navigable owned end of the association indicates that the association is navigable from the opposite ends, otherwise the association is not navigable from the opposite ends.</body>
    </ownedComment>
    <ownedRule xmi:id="_NnXmo2EIEdqmfMQqVJOcWQ" name="specialized_end_number" constrainedElement="_Ni59cmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NnXmpGEIEdqmfMQqVJOcWQ" annotatedElement="_NnXmo2EIEdqmfMQqVJOcWQ">
        <body>An association specializing another association has the same number of ends as the other association.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnXmpWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.parents()->forAll(p | p.memberEnd.size() = self.memberEnd.size())</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NnXmpmEIEdqmfMQqVJOcWQ" name="specialized_end_types" constrainedElement="_Ni59cmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NnXmp2EIEdqmfMQqVJOcWQ" annotatedElement="_NnXmpmEIEdqmfMQqVJOcWQ">
        <body>When an association specializes another association, every end of the specific association corresponds to an end of the general association, and the specific end reaches the same type or a subtype of the more general end.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnXmqGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NnXmqWEIEdqmfMQqVJOcWQ" name="binary_associations" constrainedElement="_Ni59cmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NnXmqmEIEdqmfMQqVJOcWQ" annotatedElement="_NnXmqWEIEdqmfMQqVJOcWQ">
        <body>Only binary associations can be aggregations.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnXmq2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.memberEnd->exists(aggregation &lt;> Aggregation::none) implies self.memberEnd->size() = 2</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Ni59dGEIEdqmfMQqVJOcWQ" name="association_ends" constrainedElement="_Ni59cmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni59dWEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59dGEIEdqmfMQqVJOcWQ">
        <body>Association ends of associations with more than two ends must be owned by the association.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnXmrGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>if memberEnd->size() > 2 then ownedEnd->includesAll(memberEnd)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Ni59eGEIEdqmfMQqVJOcWQ" general="_NiwMgWEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_Ni59d2EIEdqmfMQqVJOcWQ" general="_NiTgcGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Ni59eWEIEdqmfMQqVJOcWQ" name="isDerived">
      <ownedComment xmi:id="_Ni59emEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59eWEIEdqmfMQqVJOcWQ">
        <body>Specifies whether the association is derived from other model elements such as other associations or constraints.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NnXmrWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ni59fGEIEdqmfMQqVJOcWQ" name="ownedEnd" type="_Ni59sGEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_Ni59iGEIEdqmfMQqVJOcWQ _NiTggGEIEdqmfMQqVJOcWQ _NimbtWEIEdqmfMQqVJOcWQ" association="_NjyuOWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Ni59fWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Ni59fmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ni59f2EIEdqmfMQqVJOcWQ" annotatedElement="_Ni59fGEIEdqmfMQqVJOcWQ">
        <body>The ends that are owned by the association itself. This is an ordered association.</body>
      </ownedComment>
      <ownedComment xmi:id="_NnXmrmEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59fGEIEdqmfMQqVJOcWQ">
        <body>The ends that are owned by the association itself.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnXmr2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnXmsGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ni59gmEIEdqmfMQqVJOcWQ" name="endType" type="_NjWCumEIEdqmfMQqVJOcWQ" isOrdered="true" isReadOnly="true" isDerived="true" subsettedProperty="_NiwMhGEIEdqmfMQqVJOcWQ" association="_Nj8fNWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_Ni59g2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Ni59hGEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ni59hWEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59gmEIEdqmfMQqVJOcWQ">
        <body>References the classifiers that are used as types of the ends of the association.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnXmsWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnXmsmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ni59iGEIEdqmfMQqVJOcWQ" name="memberEnd" type="_Ni59sGEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_Nimbu2EIEdqmfMQqVJOcWQ" association="_NkGQQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni59iWEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59iGEIEdqmfMQqVJOcWQ">
        <body>Each end represents participation of instances of the classifier connected to the end in links of the association. This is an ordered association.</body>
      </ownedComment>
      <ownedComment xmi:id="_NnXms2EIEdqmfMQqVJOcWQ" annotatedElement="_Ni59iGEIEdqmfMQqVJOcWQ">
        <body>Each end represents participation of instances of the classifier connected to the end in links of the association.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnXmtGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnXmtWEIEdqmfMQqVJOcWQ" value="2"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ni59jGEIEdqmfMQqVJOcWQ" name="navigableOwnedEnd" type="_Ni59sGEIEdqmfMQqVJOcWQ" subsettedProperty="_Ni59fGEIEdqmfMQqVJOcWQ" association="_NkZLLGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni59jWEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59jGEIEdqmfMQqVJOcWQ">
        <body>The navigable ends that are owned by the association itself.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnXmtmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnXmt2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NnXmuGEIEdqmfMQqVJOcWQ" name="endType" type="_NjWCumEIEdqmfMQqVJOcWQ" isOrdered="true" isQuery="true" bodyCondition="_NnXmvGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NnXmuWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EOperation" xmi:id="_NnXmumEIEdqmfMQqVJOcWQ" operationName="getEndTypes"/>
      </eAnnotations>
      <ownedComment xmi:id="_NnXmu2EIEdqmfMQqVJOcWQ" annotatedElement="_NnXmuGEIEdqmfMQqVJOcWQ">
        <body>endType is derived from the types of the member ends.</body>
      </ownedComment>
      <ownedRule xmi:id="_NnXmvGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NnXmuGEIEdqmfMQqVJOcWQ _Ni59gmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnXmvWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = self.memberEnd->collect(e | e.type)</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NnXmvmEIEdqmfMQqVJOcWQ" type="_NjWCumEIEdqmfMQqVJOcWQ" isOrdered="true" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnXmv2EIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnXmwGEIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Enumeration" xmi:id="_Njfzf2EIEdqmfMQqVJOcWQ" name="ParameterDirectionKind">
    <ownedComment xmi:id="_NjfzgGEIEdqmfMQqVJOcWQ" annotatedElement="_Njfzf2EIEdqmfMQqVJOcWQ">
      <body>ParameterDirectionKind is an enumeration of the following literal values:

  - in Indicates that parameter values are passed into the behavioral element by the caller.

  - inout Indicates that parameter values are passed into a behavioral element by the caller and then back out to the caller from the behavioral element.

  - out Indicates that parameter values are passed from a behavioral element out to the caller.

  - return Indicates that parameter values are passed as return values from a behavioral element back to the caller.

</body>
    </ownedComment>
    <ownedComment xmi:id="_NnhXs2EIEdqmfMQqVJOcWQ" annotatedElement="_Njfzf2EIEdqmfMQqVJOcWQ">
      <body>ParameterDirectionKind is an enumeration of the following literal values:
 in Indicates that parameter values are passed into the behavioral element by the caller.
 inout Indicates that parameter values are passed into a behavioral element by the caller and then back out to the caller from the behavioral element.
 out Indicates that parameter values are passed from a behavioral element out to the caller.
 return Indicates that parameter values are passed as return values from a behavioral element back to the caller.
</body>
    </ownedComment>
    <ownedLiteral xmi:id="_NjfzgWEIEdqmfMQqVJOcWQ" name="in">
      <ownedComment xmi:id="_NjpkQGEIEdqmfMQqVJOcWQ" annotatedElement="_NjfzgWEIEdqmfMQqVJOcWQ">
        <body>Indicates that parameter values are passed into the behavioral element by the caller.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_NjpkQWEIEdqmfMQqVJOcWQ" name="inout">
      <ownedComment xmi:id="_NjpkQmEIEdqmfMQqVJOcWQ" annotatedElement="_NjpkQWEIEdqmfMQqVJOcWQ">
        <body>Indicates that parameter values are passed into a behavioral element by the caller and then back out to the caller from the behavioral element.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_NjpkQ2EIEdqmfMQqVJOcWQ" name="out">
      <ownedComment xmi:id="_NjpkRGEIEdqmfMQqVJOcWQ" annotatedElement="_NjpkQ2EIEdqmfMQqVJOcWQ">
        <body>Indicates that parameter values are passed from a behavioral element out to the caller.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_NjpkRWEIEdqmfMQqVJOcWQ" name="return">
      <ownedComment xmi:id="_NjpkRmEIEdqmfMQqVJOcWQ" annotatedElement="_NjpkRWEIEdqmfMQqVJOcWQ">
        <body>Indicates that parameter values are passed as return values from a behavioral element back to the caller.</body>
      </ownedComment>
    </ownedLiteral>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NiwMgWEIEdqmfMQqVJOcWQ" name="Relationship" isAbstract="true">
    <ownedComment xmi:id="_NiwMgmEIEdqmfMQqVJOcWQ" annotatedElement="_NiwMgWEIEdqmfMQqVJOcWQ">
      <body>A relationship references one or more related elements. Relationship is an abstract metaclass.</body>
    </ownedComment>
    <generalization xmi:id="_NiwMg2EIEdqmfMQqVJOcWQ" general="_NidR0mEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NiwMhGEIEdqmfMQqVJOcWQ" name="relatedElement" type="_NidR0mEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="_NkPaImEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NiwMhWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NiwMhmEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NiwMh2EIEdqmfMQqVJOcWQ" annotatedElement="_NiwMhGEIEdqmfMQqVJOcWQ">
        <body>Specifies the elements related by the Relationship.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnrIpGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnrIpWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NjWCrWEIEdqmfMQqVJOcWQ" name="PackageMerge">
    <ownedComment xmi:id="_NjWCrmEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCrWEIEdqmfMQqVJOcWQ">
      <body>A package merge is a directed relationship between two packages, that indicates that the contents of the two packages are to be combined. It is very similar to Generalization in the sense that the source element conceptually adds the characteristics of the target element to its own characteristics resulting in an element that combines the characteristics of both.



This mechanism should be used when elements defined in different packages have the same name and are intended to represent the same concept. Most often it is used to provide different definitions of a given concept for different purposes, starting from a common base definition. A given base concept is extended in increments, with each increment defined in a separate merged package. By selecting which increments to merge, it is possible to obtain a custom definition of a concept for a specific end. Package merge is particularly useful in meta-modeling and is extensively used in the definition of the UML metamodel.



Conceptually, a package merge can be viewed as an operation that takes the contents of two packages and produces a new package that combines the contents of the packages involved in the merge. In terms of model semantics, there is no difference between a model with explicit package merges, and a model in which all the merges have been performed.</body>
    </ownedComment>
    <ownedComment xmi:id="_NnrIpmEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCrWEIEdqmfMQqVJOcWQ">
      <body>A package merge is a directed relationship between two packages, that indicates that the contents of the two packages are to be combined. It is very similar to Generalization in the sense that the source element conceptually adds the characteristics of the target element to its own characteristics resulting in an element that combines the characteristics of both. This mechanism should be used when elements defined in different packages have the same name and are intended to represent the same concept. Most often it is used to provide different definitions of a given concept for different purposes, starting from a common base definition. A given base concept is extended in increments, with each increment defined in a separate merged package. By selecting which increments to merge, it is possible to obtain a custom definition of a concept for a specific end. Package merge is particularly useful in meta-modeling and is extensively used in the definition of the UML metamodel.



Conceptually, a package merge can be viewed as an operation that takes the contents of two packages and produces a new package that combines the contents of the packages involved in the merge. In terms of model semantics, there is no difference between a model with explicit package merges, and a model in which all the merges have been performed.

</body>
    </ownedComment>
    <generalization xmi:id="_NjWCr2EIEdqmfMQqVJOcWQ" general="_NidRw2EIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NjWCsGEIEdqmfMQqVJOcWQ" name="receivingPackage" type="_NjWCYGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRxmEIEdqmfMQqVJOcWQ _NidR4GEIEdqmfMQqVJOcWQ" association="_NkGQRmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NjWCsWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjWCsmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjWCs2EIEdqmfMQqVJOcWQ" annotatedElement="_NjWCsGEIEdqmfMQqVJOcWQ">
        <body>References the Package that is being extended with the contents of the merged package of the PackageMerge.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnrIp2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnrIqGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjWCtmEIEdqmfMQqVJOcWQ" name="mergedPackage" type="_NjWCYGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRzGEIEdqmfMQqVJOcWQ" association="_NkGQSWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjWCt2EIEdqmfMQqVJOcWQ" annotatedElement="_NjWCtmEIEdqmfMQqVJOcWQ">
        <body>References the Package that is to be merged with the receiving package of the PackageMerge.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnrIqWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnrIqmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NnrIq2EIEdqmfMQqVJOcWQ" name="InstanceValue">
    <ownedComment xmi:id="_NnrIrGEIEdqmfMQqVJOcWQ" annotatedElement="_NnrIq2EIEdqmfMQqVJOcWQ">
      <body>An instance value specifies the value modeled by an instance specification.</body>
    </ownedComment>
    <generalization xmi:id="_NnrIrWEIEdqmfMQqVJOcWQ" general="_NiwMlmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NnrIrmEIEdqmfMQqVJOcWQ" name="instance" type="_Nme102EIEdqmfMQqVJOcWQ" association="_NotqemEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NnrIr2EIEdqmfMQqVJOcWQ" annotatedElement="_NnrIrmEIEdqmfMQqVJOcWQ">
        <body>The instance that is the specified value.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnrIsGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnrIsWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Enumeration" xmi:id="_NnrIsmEIEdqmfMQqVJOcWQ" name="AggregationKind">
    <ownedComment xmi:id="_NnrIs2EIEdqmfMQqVJOcWQ" annotatedElement="_NnrIsmEIEdqmfMQqVJOcWQ">
      <body>AggregationKind is an enumeration of the following literal values:
 none Indicates that the property has no aggregation.
 shared Indicates that the property has a shared aggregation.
 composite Indicates that the property is aggregated compositely, i.e., the composite object has
responsibility for the existence and storage of the composed objects (parts).
</body>
    </ownedComment>
    <ownedLiteral xmi:id="_NnrItGEIEdqmfMQqVJOcWQ" name="none">
      <ownedComment xmi:id="_NnrItWEIEdqmfMQqVJOcWQ" annotatedElement="_NnrItGEIEdqmfMQqVJOcWQ">
        <body>Indicates that the property has no aggregation.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_NnrItmEIEdqmfMQqVJOcWQ" name="shared">
      <ownedComment xmi:id="_NnrIt2EIEdqmfMQqVJOcWQ" annotatedElement="_NnrItmEIEdqmfMQqVJOcWQ">
        <body>Indicates that the property has a shared aggregation.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_NnrIuGEIEdqmfMQqVJOcWQ" name="composite">
      <ownedComment xmi:id="_NnrIuWEIEdqmfMQqVJOcWQ" annotatedElement="_NnrIuGEIEdqmfMQqVJOcWQ">
        <body>Indicates that the property is aggregated compositely, i.e., the composite object has responsibility for the existence and storage of the composed objects (parts).</body>
      </ownedComment>
    </ownedLiteral>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NnrIumEIEdqmfMQqVJOcWQ" name="LiteralUnlimitedNatural">
    <ownedComment xmi:id="_NnrIu2EIEdqmfMQqVJOcWQ" annotatedElement="_NnrIumEIEdqmfMQqVJOcWQ">
      <body>A literal unlimited natural contains a UnlimitedNatural-valued attribute.</body>
    </ownedComment>
    <generalization xmi:id="_NnrIvGEIEdqmfMQqVJOcWQ" general="_NlIyLWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NnrIvWEIEdqmfMQqVJOcWQ" name="value">
      <eAnnotations xmi:id="_NnrIvmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NnrIv2EIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NnrIwGEIEdqmfMQqVJOcWQ" annotatedElement="_NnrIvWEIEdqmfMQqVJOcWQ">
        <body>The specified UnlimitedNatural value.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3DE6A93C0003"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NnrIwWEIEdqmfMQqVJOcWQ" name="isComputable" isQuery="true" redefinedOperation="_NiwMmmEIEdqmfMQqVJOcWQ" bodyCondition="_NnrIw2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NnrIwmEIEdqmfMQqVJOcWQ" annotatedElement="_NnrIwWEIEdqmfMQqVJOcWQ">
        <body>The query isComputable() is redefined to be true.</body>
      </ownedComment>
      <ownedRule xmi:id="_NnrIw2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NnrIwWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnrIxGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = true</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NnrIxWEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NnrIxmEIEdqmfMQqVJOcWQ" name="unlimitedValue" isQuery="true" redefinedOperation="_Ni59aGEIEdqmfMQqVJOcWQ" bodyCondition="_NnrIyGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NnrIx2EIEdqmfMQqVJOcWQ" annotatedElement="_NnrIxmEIEdqmfMQqVJOcWQ">
        <body>The query unlimitedValue() gives the value.</body>
      </ownedComment>
      <ownedRule xmi:id="_NnrIyGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NnrIxmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnrIyWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = value</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NnrIymEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3DE6A93C0003"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3DE6A93C0003"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NjWCumEIEdqmfMQqVJOcWQ" name="Type" isAbstract="true">
    <ownedComment xmi:id="_NjWCu2EIEdqmfMQqVJOcWQ" annotatedElement="_NjWCumEIEdqmfMQqVJOcWQ">
      <body>A type serves as a constraint on the range of values represented by a typed element. Type is an abstract metaclass.</body>
    </ownedComment>
    <generalization xmi:id="_NjWCvWEIEdqmfMQqVJOcWQ" general="_Nimb8GEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NjWCvmEIEdqmfMQqVJOcWQ" name="package" type="_NjWCYGEIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ" association="_NkGQPmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NjWCv2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjWCwGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjWCwWEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCvmEIEdqmfMQqVJOcWQ">
        <body>References the owning package of a package.</body>
      </ownedComment>
      <ownedComment xmi:id="_Nn0SkGEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCvmEIEdqmfMQqVJOcWQ">
        <body>Specifies the owning package of this classifier, if any.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nn0SkWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nn0SkmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NjWCxGEIEdqmfMQqVJOcWQ" name="conformsTo" isQuery="true" bodyCondition="_NjWCxmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjWCxWEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCxGEIEdqmfMQqVJOcWQ">
        <body>The query conformsTo() gives true for a type that conforms to another. By default, two types do not conform to each other. This query is intended to be redefined for specific conformance situations.</body>
      </ownedComment>
      <ownedRule xmi:id="_NjWCxmEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NjWCxGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nn0Sk2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = false</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NjWCyGEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_NjWCyWEIEdqmfMQqVJOcWQ" name="other" type="_NjWCumEIEdqmfMQqVJOcWQ"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NjfzdmEIEdqmfMQqVJOcWQ" name="Expression">
    <ownedComment xmi:id="_Njfzd2EIEdqmfMQqVJOcWQ" annotatedElement="_NjfzdmEIEdqmfMQqVJOcWQ">
      <body>An expression is a structured tree of symbols that denotes a (possibly empty) set of values when evaluated in a context.</body>
    </ownedComment>
    <ownedComment xmi:id="_Nn0SlGEIEdqmfMQqVJOcWQ" annotatedElement="_NjfzdmEIEdqmfMQqVJOcWQ">
      <body>An expression represents a node in an expression tree, which may be non-terminal or terminal. It defines a symbol, and has a possibly empty sequence of operands which are value specifications.</body>
    </ownedComment>
    <generalization xmi:id="_NjfzeGEIEdqmfMQqVJOcWQ" general="_NiwMlmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nn0SlWEIEdqmfMQqVJOcWQ" name="symbol">
      <eAnnotations xmi:id="_Nn0SlmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_Nn0Sl2EIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nn0SmGEIEdqmfMQqVJOcWQ" annotatedElement="_Nn0SlWEIEdqmfMQqVJOcWQ">
        <body>The symbol associated with the node in the expression tree.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjfzeWEIEdqmfMQqVJOcWQ" name="operand" type="_NiwMlmEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NkZLJ2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NjfzemEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Njfze2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjfzfGEIEdqmfMQqVJOcWQ" annotatedElement="_NjfzeWEIEdqmfMQqVJOcWQ">
        <body>Specifies a sequence of operands.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nn0SmWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nn0SmmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkGQTGEIEdqmfMQqVJOcWQ" name="A_ownedElement_owner" memberEnd="_NidR4GEIEdqmfMQqVJOcWQ _NidR2mEIEdqmfMQqVJOcWQ"/>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkPaJGEIEdqmfMQqVJOcWQ" name="A_source_directedRelationship" memberEnd="_NidRxmEIEdqmfMQqVJOcWQ _NkPaJmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkPaJWEIEdqmfMQqVJOcWQ" general="_NkPaImEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NkPaJmEIEdqmfMQqVJOcWQ" type="_NidRw2EIEdqmfMQqVJOcWQ" redefinedProperty="_NkPaI2EIEdqmfMQqVJOcWQ" association="_NkPaJGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkPaJ2EIEdqmfMQqVJOcWQ" name="A_target_directedRelationship" memberEnd="_NkPaKWEIEdqmfMQqVJOcWQ _NidRzGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkPaKGEIEdqmfMQqVJOcWQ" general="_NkPaImEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NkPaKWEIEdqmfMQqVJOcWQ" type="_NidRw2EIEdqmfMQqVJOcWQ" redefinedProperty="_NkPaI2EIEdqmfMQqVJOcWQ" association="_NkPaJ2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkPaMGEIEdqmfMQqVJOcWQ" name="A_constrainedElement_constraint" memberEnd="_NjDHh2EIEdqmfMQqVJOcWQ _NkPaMWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NkPaMWEIEdqmfMQqVJOcWQ" type="_NjDHfmEIEdqmfMQqVJOcWQ" association="_NkPaMGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NjyuMGEIEdqmfMQqVJOcWQ" name="A_type_typedElement" memberEnd="_NjyuMWEIEdqmfMQqVJOcWQ _NiwMkmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NjyuMWEIEdqmfMQqVJOcWQ" type="_NiwMj2EIEdqmfMQqVJOcWQ" association="_NjyuMGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nn-DkGEIEdqmfMQqVJOcWQ" name="A_generalization_specific" memberEnd="_Nlun6WEIEdqmfMQqVJOcWQ _NmLT5GEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nn-DkWEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_Nn-DkmEIEdqmfMQqVJOcWQ" general="_NkPaJGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nn-Dk2EIEdqmfMQqVJOcWQ" name="A_general_generalization" memberEnd="_NmLT6mEIEdqmfMQqVJOcWQ _Nn-DlWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nn-DlGEIEdqmfMQqVJOcWQ" general="_NkPaJ2EIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nn-DlWEIEdqmfMQqVJOcWQ" type="_NmLT3WEIEdqmfMQqVJOcWQ" redefinedProperty="_NkPaKWEIEdqmfMQqVJOcWQ" association="_Nn-Dk2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkPaLmEIEdqmfMQqVJOcWQ" name="A_feature_featuringClassifier" memberEnd="_NidR-2EIEdqmfMQqVJOcWQ _NiTggGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkPaL2EIEdqmfMQqVJOcWQ" general="_NkZLJWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nj8fR2EIEdqmfMQqVJOcWQ" name="A_ownedParameter_ownerFormalParam" memberEnd="_Nj8fSWEIEdqmfMQqVJOcWQ _NjM45WEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nj8fSGEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nj8fSWEIEdqmfMQqVJOcWQ" name="ownerFormalParam" type="_NjM44WEIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ" association="_Nj8fR2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nn-DlmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nn-Dl2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nn-DmGEIEdqmfMQqVJOcWQ" name="A_classifier_instanceSpecification" memberEnd="_Nme13GEIEdqmfMQqVJOcWQ _Nn-DmWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nn-DmWEIEdqmfMQqVJOcWQ" type="_Nme102EIEdqmfMQqVJOcWQ" association="_Nn-DmGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nn-DmmEIEdqmfMQqVJOcWQ" name="A_slot_owningInstance" memberEnd="_Nme172EIEdqmfMQqVJOcWQ _Nme14GEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nn-Dm2EIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nn-DnGEIEdqmfMQqVJOcWQ" name="A_definingFeature_slot" memberEnd="_Nn-DnWEIEdqmfMQqVJOcWQ _Nme19WEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nn-DnWEIEdqmfMQqVJOcWQ" type="_Nme17GEIEdqmfMQqVJOcWQ" association="_Nn-DnGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkPaIGEIEdqmfMQqVJOcWQ" name="A_annotatedElement_comment" memberEnd="_NkPaIWEIEdqmfMQqVJOcWQ _NjpkTmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NkPaIWEIEdqmfMQqVJOcWQ" type="_NjpkR2EIEdqmfMQqVJOcWQ" association="_NkPaIGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkZLMWEIEdqmfMQqVJOcWQ" name="A_ownedComment_owningElement" memberEnd="_NkZLM2EIEdqmfMQqVJOcWQ _NidR5mEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkZLMmEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NkZLM2EIEdqmfMQqVJOcWQ" name="owningElement" type="_NidR0mEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_NkZLMWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NoHNgGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NoHNgWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkGQMGEIEdqmfMQqVJOcWQ" name="A_importedElement_elementImport" memberEnd="_NkGQMmEIEdqmfMQqVJOcWQ _NjWCUWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkGQMWEIEdqmfMQqVJOcWQ" general="_NkPaJ2EIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NkGQMmEIEdqmfMQqVJOcWQ" type="_NjWCQGEIEdqmfMQqVJOcWQ" redefinedProperty="_NkPaKWEIEdqmfMQqVJOcWQ" association="_NkGQMGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkZLOmEIEdqmfMQqVJOcWQ" name="A_inheritedMember_classifier" memberEnd="_NkZLPGEIEdqmfMQqVJOcWQ _NidRcGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkZLO2EIEdqmfMQqVJOcWQ" general="_NkZLJWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NkZLPGEIEdqmfMQqVJOcWQ" type="_NiTgcGEIEdqmfMQqVJOcWQ" redefinedProperty="_NkZLJmEIEdqmfMQqVJOcWQ" association="_NkZLOmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NoHNgmEIEdqmfMQqVJOcWQ" name="A_nestedClassifier_class" memberEnd="_Nmn_ymEIEdqmfMQqVJOcWQ _NoHNhWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NoHNg2EIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NoHNhGEIEdqmfMQqVJOcWQ" general="_NkPaKmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NoHNhWEIEdqmfMQqVJOcWQ" name="class" type="_Ni59kGEIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ _NiwMaWEIEdqmfMQqVJOcWQ" association="_NoHNgmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NoHNhmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NoHNh2EIEdqmfMQqVJOcWQ" referenceName="class_"/>
      </eAnnotations>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NoHNiGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NoHNiWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NjyuMmEIEdqmfMQqVJOcWQ" name="A_ownedAttribute_class" memberEnd="_Ni591WEIEdqmfMQqVJOcWQ _Ni59lmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NjyuNGEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N-UuEGEIEdqmfMQqVJOcWQ" general="_NrQBFGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NjyuNWEIEdqmfMQqVJOcWQ" name="A_ownedOperation_class" memberEnd="_NjM4dGEIEdqmfMQqVJOcWQ _Ni59nGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NjyuNmEIEdqmfMQqVJOcWQ" general="_NkPaLmEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NjyuN2EIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NjyuOGEIEdqmfMQqVJOcWQ" general="_NkPaKmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkZLPWEIEdqmfMQqVJOcWQ" name="A_precondition_preContext" memberEnd="_NjM4lGEIEdqmfMQqVJOcWQ _NkZLP2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkZLPmEIEdqmfMQqVJOcWQ" general="_NkiVGmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NkZLP2EIEdqmfMQqVJOcWQ" name="preContext" type="_NjM4UGEIEdqmfMQqVJOcWQ" subsettedProperty="_NjDHkWEIEdqmfMQqVJOcWQ _NjfzVmEIEdqmfMQqVJOcWQ" association="_NkZLPWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NoQ-gGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NoQ-gWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkiVEGEIEdqmfMQqVJOcWQ" name="A_postcondition_postContext" memberEnd="_NkiVEmEIEdqmfMQqVJOcWQ _NjM4mWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkiVEWEIEdqmfMQqVJOcWQ" general="_NkiVGmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NkiVEmEIEdqmfMQqVJOcWQ" name="postContext" type="_NjM4UGEIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ _NjDHkWEIEdqmfMQqVJOcWQ" association="_NkiVEGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NoQ-gmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NoQ-g2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nj8fRGEIEdqmfMQqVJOcWQ" name="A_redefinedOperation_operation" memberEnd="_Nj8fRmEIEdqmfMQqVJOcWQ _NjM4hGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nj8fRWEIEdqmfMQqVJOcWQ" general="_NkPaLGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nj8fRmEIEdqmfMQqVJOcWQ" type="_NjM4UGEIEdqmfMQqVJOcWQ" redefinedProperty="_NkPaLWEIEdqmfMQqVJOcWQ" association="_Nj8fRGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NjyuQ2EIEdqmfMQqVJOcWQ" name="A_redefinedProperty_property" memberEnd="_Ni594GEIEdqmfMQqVJOcWQ _NjyuRWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NjyuRGEIEdqmfMQqVJOcWQ" general="_NkPaLGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NjyuRWEIEdqmfMQqVJOcWQ" type="_Ni59sGEIEdqmfMQqVJOcWQ" redefinedProperty="_NkPaLWEIEdqmfMQqVJOcWQ" association="_NjyuQ2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NjyuOWEIEdqmfMQqVJOcWQ" name="A_ownedEnd_owningAssociation" memberEnd="_Ni592mEIEdqmfMQqVJOcWQ _Ni59fGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NjyuOmEIEdqmfMQqVJOcWQ" general="_NkGQQGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NjyuO2EIEdqmfMQqVJOcWQ" general="_NkPaLmEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NjyuPGEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nj8fOmEIEdqmfMQqVJOcWQ" name="A_ownedAttribute_datatype" memberEnd="_Ni597mEIEdqmfMQqVJOcWQ _NjDHU2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nj8fO2EIEdqmfMQqVJOcWQ" general="_NjyuPWEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_Nj8fPGEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nj8fPWEIEdqmfMQqVJOcWQ" name="A_ownedOperation_datatype" memberEnd="_NjDHWWEIEdqmfMQqVJOcWQ _NjM4emEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nj8fPmEIEdqmfMQqVJOcWQ" general="_NkPaLmEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_Nj8fP2EIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_Nj8fQGEIEdqmfMQqVJOcWQ" general="_NkPaKmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nj8fOGEIEdqmfMQqVJOcWQ" name="A_ownedLiteral_enumeration" memberEnd="_NjDHdWEIEdqmfMQqVJOcWQ _NjDHbGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nj8fOWEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkGQM2EIEdqmfMQqVJOcWQ" name="A_elementImport_importingNamespace" memberEnd="_NimbqWEIEdqmfMQqVJOcWQ _NjWCVWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkGQNGEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NkGQNWEIEdqmfMQqVJOcWQ" general="_NkPaJGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkGQNmEIEdqmfMQqVJOcWQ" name="A_packageImport_importingNamespace" memberEnd="_NjWCp2EIEdqmfMQqVJOcWQ _Nimbr2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkGQN2EIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NkGQOGEIEdqmfMQqVJOcWQ" general="_NkPaJGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nj8fUWEIEdqmfMQqVJOcWQ" name="A_importedPackage_packageImport" memberEnd="_Nj8fU2EIEdqmfMQqVJOcWQ _NjWCo2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nj8fUmEIEdqmfMQqVJOcWQ" general="_NkPaJ2EIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nj8fU2EIEdqmfMQqVJOcWQ" type="_NjWCmWEIEdqmfMQqVJOcWQ" redefinedProperty="_NkPaKWEIEdqmfMQqVJOcWQ" association="_Nj8fUWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Noj5cGEIEdqmfMQqVJOcWQ" name="A_redefinedClassifier_classifier" memberEnd="_Noj5cmEIEdqmfMQqVJOcWQ _Nlun-GEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Noj5cWEIEdqmfMQqVJOcWQ" general="_NkPaLGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Noj5cmEIEdqmfMQqVJOcWQ" type="_NiTgcGEIEdqmfMQqVJOcWQ" redefinedProperty="_NkPaLWEIEdqmfMQqVJOcWQ" association="_Noj5cGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkPaMmEIEdqmfMQqVJOcWQ" name="A_specification_owningConstraint" memberEnd="_NkPaNGEIEdqmfMQqVJOcWQ _NjDHi2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkPaM2EIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NkPaNGEIEdqmfMQqVJOcWQ" name="owningConstraint" type="_NjDHfmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_NkPaMmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Noj5c2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Noj5dGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Noj5dWEIEdqmfMQqVJOcWQ" name="A_defaultValue_owningParameter" memberEnd="_Noj5d2EIEdqmfMQqVJOcWQ _NmVE3WEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Noj5dmEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Noj5d2EIEdqmfMQqVJOcWQ" name="owningParameter" type="_NjM40GEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_Noj5dWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Noj5eGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Noj5eWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Noj5emEIEdqmfMQqVJOcWQ" name="A_defaultValue_owningProperty" memberEnd="_Nm66sGEIEdqmfMQqVJOcWQ _Noj5fGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Noj5e2EIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Noj5fGEIEdqmfMQqVJOcWQ" name="owningProperty" type="_Ni59sGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_Noj5emEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Noj5fWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Noj5fmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkiVGmEIEdqmfMQqVJOcWQ" name="A_ownedRule_context" memberEnd="_NjDHkWEIEdqmfMQqVJOcWQ _NimbwWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkiVG2EIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkZLJWEIEdqmfMQqVJOcWQ" name="A_member_namespace" memberEnd="_NkZLJmEIEdqmfMQqVJOcWQ _Nimbu2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NkZLJmEIEdqmfMQqVJOcWQ" type="_NimbnWEIEdqmfMQqVJOcWQ" association="_NkZLJWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkPaImEIEdqmfMQqVJOcWQ" name="A_relatedElement_relationship" memberEnd="_NkPaI2EIEdqmfMQqVJOcWQ _NiwMhGEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NkPaI2EIEdqmfMQqVJOcWQ" type="_NiwMgWEIEdqmfMQqVJOcWQ" association="_NkPaImEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nj8fNWEIEdqmfMQqVJOcWQ" name="A_endType_association" memberEnd="_Nj8fN2EIEdqmfMQqVJOcWQ _Ni59gmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nj8fNmEIEdqmfMQqVJOcWQ" general="_NkPaImEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nj8fN2EIEdqmfMQqVJOcWQ" type="_Ni59cmEIEdqmfMQqVJOcWQ" redefinedProperty="_NkPaI2EIEdqmfMQqVJOcWQ" association="_Nj8fNWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NotqcGEIEdqmfMQqVJOcWQ" name="A_upperValue_owningUpper" memberEnd="_Nlld_WEIEdqmfMQqVJOcWQ _NotqcmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NotqcWEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NotqcmEIEdqmfMQqVJOcWQ" name="owningUpper" type="_NimbYGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_NotqcGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Notqc2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NotqdGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NotqdWEIEdqmfMQqVJOcWQ" name="A_lowerValue_owningLower" memberEnd="_Notqd2EIEdqmfMQqVJOcWQ _NlleA2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NotqdmEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Notqd2EIEdqmfMQqVJOcWQ" name="owningLower" type="_NimbYGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_NotqdWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NotqeGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NotqeWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkGQRmEIEdqmfMQqVJOcWQ" name="A_receivingPackage_packageMerge" memberEnd="_NjWCf2EIEdqmfMQqVJOcWQ _NjWCsGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkGQSGEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NkGQR2EIEdqmfMQqVJOcWQ" general="_NkPaJGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkGQSWEIEdqmfMQqVJOcWQ" name="A_mergedPackage_packageMerge" memberEnd="_NjWCtmEIEdqmfMQqVJOcWQ _NkGQS2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkGQSmEIEdqmfMQqVJOcWQ" general="_NkPaJ2EIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NkGQS2EIEdqmfMQqVJOcWQ" type="_NjWCrWEIEdqmfMQqVJOcWQ" redefinedProperty="_NkPaKWEIEdqmfMQqVJOcWQ" association="_NkGQSWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NotqemEIEdqmfMQqVJOcWQ" name="A_instance_instanceValue" memberEnd="_NnrIrmEIEdqmfMQqVJOcWQ _Notqe2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Notqe2EIEdqmfMQqVJOcWQ" type="_NnrIq2EIEdqmfMQqVJOcWQ" association="_NotqemEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_No3bcGEIEdqmfMQqVJOcWQ" name="A_value_owningSlot" memberEnd="_Nme1-WEIEdqmfMQqVJOcWQ _No3bcmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_No3bcWEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_No3bcmEIEdqmfMQqVJOcWQ" name="owningSlot" type="_Nme17GEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_No3bcGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_No3bc2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_No3bdGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_No3bdWEIEdqmfMQqVJOcWQ" name="A_specification_owningInstanceSpec" memberEnd="_Nme15mEIEdqmfMQqVJOcWQ _No3bd2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_No3bdmEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_No3bd2EIEdqmfMQqVJOcWQ" name="owningInstanceSpec" type="_Nme102EIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_No3bdWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_No3beGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_No3beWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkGQOWEIEdqmfMQqVJOcWQ" name="A_packagedElement_owningPackage" memberEnd="_NkGQO2EIEdqmfMQqVJOcWQ _NjWCZ2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkGQOmEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NkGQO2EIEdqmfMQqVJOcWQ" name="owningPackage" type="_NjWCYGEIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ" association="_NkGQOWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_No3bemEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_No3be2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nj8fTmEIEdqmfMQqVJOcWQ" name="A_importedMember_namespace" memberEnd="_Nj8fUGEIEdqmfMQqVJOcWQ _Nimbo2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nj8fT2EIEdqmfMQqVJOcWQ" general="_NkZLJWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nj8fUGEIEdqmfMQqVJOcWQ" type="_NimbnWEIEdqmfMQqVJOcWQ" redefinedProperty="_NkZLJmEIEdqmfMQqVJOcWQ" association="_Nj8fTmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nj8fMGEIEdqmfMQqVJOcWQ" name="A_opposite_property" memberEnd="_Nj8fMWEIEdqmfMQqVJOcWQ _Ni596GEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nj8fMWEIEdqmfMQqVJOcWQ" type="_Ni59sGEIEdqmfMQqVJOcWQ" association="_Nj8fMGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NjyuRmEIEdqmfMQqVJOcWQ" name="A_subsettedProperty_property" memberEnd="_Ni595GEIEdqmfMQqVJOcWQ _NjyuR2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NjyuR2EIEdqmfMQqVJOcWQ" type="_Ni59sGEIEdqmfMQqVJOcWQ" association="_NjyuRmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkGQQGEIEdqmfMQqVJOcWQ" name="A_memberEnd_association" memberEnd="_Ni59iGEIEdqmfMQqVJOcWQ _Ni599GEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkGQQWEIEdqmfMQqVJOcWQ" general="_NkZLJWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkGQPmEIEdqmfMQqVJOcWQ" name="A_ownedType_package" memberEnd="_NjWCbWEIEdqmfMQqVJOcWQ _NjWCvmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkGQP2EIEdqmfMQqVJOcWQ" general="_NkGQOWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkGQQmEIEdqmfMQqVJOcWQ" name="A_nestedPackage_nestingPackage" memberEnd="_NjWCc2EIEdqmfMQqVJOcWQ _NjWCeWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkGQQ2EIEdqmfMQqVJOcWQ" general="_NkGQOWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkPaLGEIEdqmfMQqVJOcWQ" name="A_redefinedElement_redefinableElement" memberEnd="_NkPaLWEIEdqmfMQqVJOcWQ _NiwMb2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NkPaLWEIEdqmfMQqVJOcWQ" type="_NiwMYGEIEdqmfMQqVJOcWQ" association="_NkPaLGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NpAlYGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NpAlYWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkPaKmEIEdqmfMQqVJOcWQ" name="A_redefinitionContext_redefinableElement" memberEnd="_NkPaK2EIEdqmfMQqVJOcWQ _NiwMaWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NkPaK2EIEdqmfMQqVJOcWQ" type="_NiwMYGEIEdqmfMQqVJOcWQ" association="_NkPaKmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkZLIGEIEdqmfMQqVJOcWQ" name="A_general_classifier" memberEnd="_NkZLIWEIEdqmfMQqVJOcWQ _NiTghmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NkZLIWEIEdqmfMQqVJOcWQ" type="_NiTgcGEIEdqmfMQqVJOcWQ" association="_NkZLIGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nj8fMmEIEdqmfMQqVJOcWQ" name="A_superClass_class" memberEnd="_Nj8fNGEIEdqmfMQqVJOcWQ _Ni59omEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nj8fM2EIEdqmfMQqVJOcWQ" general="_NkZLIGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nj8fNGEIEdqmfMQqVJOcWQ" type="_Ni59kGEIEdqmfMQqVJOcWQ" redefinedProperty="_NkZLIWEIEdqmfMQqVJOcWQ" association="_Nj8fMmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkiVFWEIEdqmfMQqVJOcWQ" name="A_bodyCondition_bodyContext" memberEnd="_NkiVF2EIEdqmfMQqVJOcWQ _NjM4nmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkiVFmEIEdqmfMQqVJOcWQ" general="_NkiVGmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NkiVF2EIEdqmfMQqVJOcWQ" name="bodyContext" type="_NjM4UGEIEdqmfMQqVJOcWQ" subsettedProperty="_NjDHkWEIEdqmfMQqVJOcWQ _NjfzVmEIEdqmfMQqVJOcWQ" association="_NkiVFWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NpwMQGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NpwMQWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkGQRGEIEdqmfMQqVJOcWQ" name="A_type_operation" memberEnd="_NkGQRWEIEdqmfMQqVJOcWQ _NjM4iGEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NkGQRWEIEdqmfMQqVJOcWQ" type="_NjM4UGEIEdqmfMQqVJOcWQ" association="_NkGQRGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkZLL2EIEdqmfMQqVJOcWQ" name="A_ownedParameter_operation" memberEnd="_NjM4jmEIEdqmfMQqVJOcWQ _NjM422EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkZLMGEIEdqmfMQqVJOcWQ" general="_Nj8fR2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkZLJ2EIEdqmfMQqVJOcWQ" name="A_operand_expression" memberEnd="_NkZLKWEIEdqmfMQqVJOcWQ _NjfzeWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkZLKGEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NkZLKWEIEdqmfMQqVJOcWQ" name="expression" type="_NjfzdmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_NkZLJ2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Np59QGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Np59QWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nj8fQWEIEdqmfMQqVJOcWQ" name="A_raisedException_operation" memberEnd="_Nj8fQ2EIEdqmfMQqVJOcWQ _NjM4gGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nj8fQmEIEdqmfMQqVJOcWQ" general="_Nj8fTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nj8fQ2EIEdqmfMQqVJOcWQ" type="_NjM4UGEIEdqmfMQqVJOcWQ" redefinedProperty="_Nj8fTWEIEdqmfMQqVJOcWQ" association="_Nj8fQWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkZLLGEIEdqmfMQqVJOcWQ" name="A_navigableOwnedEnd_association" memberEnd="_NkZLLmEIEdqmfMQqVJOcWQ _Ni59jGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkZLLWEIEdqmfMQqVJOcWQ" general="_NjyuOWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NkZLLmEIEdqmfMQqVJOcWQ" type="_Ni59cmEIEdqmfMQqVJOcWQ" redefinedProperty="_NkZLJmEIEdqmfMQqVJOcWQ" association="_NkZLLGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkZLNmEIEdqmfMQqVJOcWQ" name="A_body_opaqueExpression" memberEnd="_NkZLN2EIEdqmfMQqVJOcWQ _NjDHn2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NkZLN2EIEdqmfMQqVJOcWQ" type="_NjDHlmEIEdqmfMQqVJOcWQ" association="_NkZLNmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Np59QmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Np59Q2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkZLOGEIEdqmfMQqVJOcWQ" name="A_language_opaqueExpression" memberEnd="_NkZLOWEIEdqmfMQqVJOcWQ _NjDHpmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NkZLOWEIEdqmfMQqVJOcWQ" type="_NjDHlmEIEdqmfMQqVJOcWQ" association="_NkZLOGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Np59RGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Np59RWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NjDHlmEIEdqmfMQqVJOcWQ" name="OpaqueExpression">
    <ownedComment xmi:id="_NjDHl2EIEdqmfMQqVJOcWQ" annotatedElement="_NjDHlmEIEdqmfMQqVJOcWQ">
      <body>An opaque expression contains language-specific text strings used to describe a value or values, and an optional specification of the languages.</body>
    </ownedComment>
    <ownedComment xmi:id="_NlIyCGEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHlmEIEdqmfMQqVJOcWQ">
      <body>An expression contains language-specific text strings used to describe a value or values, and an optional specification of the languages.

One predefined language for specifying expressions is OCL. Natural language or programming languages may also be used.

</body>
    </ownedComment>
    <ownedComment xmi:id="_NqDue2EIEdqmfMQqVJOcWQ" annotatedElement="_NjDHlmEIEdqmfMQqVJOcWQ">
      <body>Provides a mechanism for precisely defining the behavior of an opaque expression. An opaque expression is defined by a behavior restricted to return one result.</body>
    </ownedComment>
    <ownedRule xmi:id="_NjDHmGEIEdqmfMQqVJOcWQ" name="language_body_size" constrainedElement="_NjDHlmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjDHmWEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHmGEIEdqmfMQqVJOcWQ">
        <body>If the language attribute is not empty, then the size of the body and language arrays must be the same.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlIyCWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>language->notEmpty() implies (body->size() = language->size())</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NjDHm2EIEdqmfMQqVJOcWQ" name="one_body_default_language" constrainedElement="_NjDHlmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjDHnGEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHm2EIEdqmfMQqVJOcWQ">
        <body>If there is only one body then the size of the language is exactly 0 (corresponding to the default language).</body>
      </ownedComment>
      <ownedComment xmi:id="_NlIyCmEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHm2EIEdqmfMQqVJOcWQ">
        <body>The there is only one body then the size of the language is exactly 0 (corresponding to the default language).</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlIyC2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>language->isEmpty() implies (body->size() = 1)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NqDufGEIEdqmfMQqVJOcWQ" name="only_return_result_parameters" constrainedElement="_NjDHlmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqDufWEIEdqmfMQqVJOcWQ" annotatedElement="_NqDufGEIEdqmfMQqVJOcWQ">
        <body>The behavior may only have return result parameters.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NqDufmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.behavior.notEmpty() implies

  self.behavior.ownedParameters->select(p | p.direction&lt;>#return)->isEmpty()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NqDuf2EIEdqmfMQqVJOcWQ" name="one_return_result_parameter" constrainedElement="_NjDHlmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqDugGEIEdqmfMQqVJOcWQ" annotatedElement="_NqDuf2EIEdqmfMQqVJOcWQ">
        <body>The behavior must have exactly one return result parameter.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NqDugWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.behavior.notEmpty() implies

  self.behavior.ownedParameter->select(p | p.direction=#return)->size() = 1</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NjDHnmEIEdqmfMQqVJOcWQ" general="_NiwMlmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NjDHn2EIEdqmfMQqVJOcWQ" name="body" isOrdered="true" association="_NkZLNmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NjDHoGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NjDHoWEIEdqmfMQqVJOcWQ" isUnsettable="true" xmlFeatureKind="Element"/>
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjDHomEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjDHo2EIEdqmfMQqVJOcWQ" annotatedElement="_NjDHn2EIEdqmfMQqVJOcWQ">
        <body>The text of the expression, possibly in multiple languages.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NlIyDGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NlIyDWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjDHpmEIEdqmfMQqVJOcWQ" name="language" isOrdered="true" association="_NkZLOGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NjDHp2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjDHqGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjDHqWEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHpmEIEdqmfMQqVJOcWQ">
        <body>Specifies the languages in which the expression is stated. The interpretation of the expression body depends on the language. If languages are unspecified, it might be implicit from the expression body or the context. Languages are matched to body strings by order.</body>
      </ownedComment>
      <ownedComment xmi:id="_NlIyDmEIEdqmfMQqVJOcWQ" annotatedElement="_NjDHpmEIEdqmfMQqVJOcWQ">
        <body>Specifies the languages in which the expression is stated. The interpretation of the expression body depends on the languages. If the languages are unspecified, they might be implicit from the expression body or the context. Languages are matched to body strings by order.

</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NlIyD2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NlIyEGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqDugmEIEdqmfMQqVJOcWQ" name="result" type="_NjM40GEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" association="_NqM4TmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NqDug2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqDuhGEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqDuhWEIEdqmfMQqVJOcWQ" annotatedElement="_NqDugmEIEdqmfMQqVJOcWQ">
        <body>Restricts an opaque expression to return exactly one return result. When the invocation of the opaque expression completes, a single set of values is returned to its owner. This association is derived from the single return result parameter of the associated behavior.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqDuhmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqDuh2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqDuiGEIEdqmfMQqVJOcWQ" name="behavior" type="_NqDuQGEIEdqmfMQqVJOcWQ" association="_NqM4UmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqDuiWEIEdqmfMQqVJOcWQ" annotatedElement="_NqDuiGEIEdqmfMQqVJOcWQ">
        <body>Specifies the behavior of the opaque expression.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqDuimEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqDui2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NlIyEWEIEdqmfMQqVJOcWQ" name="value" isQuery="true" precondition="_NlIyFGEIEdqmfMQqVJOcWQ" bodyCondition="_NlIyFmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NlIyEmEIEdqmfMQqVJOcWQ" source="keywords"/>
      <ownedComment xmi:id="_NlIyE2EIEdqmfMQqVJOcWQ" annotatedElement="_NlIyEWEIEdqmfMQqVJOcWQ">
        <body>The query value() gives an integer value for an expression intended to produce one.</body>
      </ownedComment>
      <ownedRule xmi:id="_NlIyFGEIEdqmfMQqVJOcWQ" constrainedElement="_NlIyEWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlIyFWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>self.isIntegral()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_NlIyFmEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NlIyEWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlIyF2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>true</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NlIyGGEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NlIyGWEIEdqmfMQqVJOcWQ" name="isIntegral" isQuery="true" bodyCondition="_NlIyG2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NlIyGmEIEdqmfMQqVJOcWQ" annotatedElement="_NlIyGWEIEdqmfMQqVJOcWQ">
        <body>The query isIntegral() tells whether an expression is intended to produce an integer.</body>
      </ownedComment>
      <ownedRule xmi:id="_NlIyG2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NlIyGWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlIyHGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = false</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NlIyHWEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NlIyHmEIEdqmfMQqVJOcWQ" name="isPositive" isQuery="true" precondition="_NlIyIWEIEdqmfMQqVJOcWQ" bodyCondition="_NlIyI2EIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NlIyH2EIEdqmfMQqVJOcWQ" source="keywords"/>
      <ownedComment xmi:id="_NlIyIGEIEdqmfMQqVJOcWQ" annotatedElement="_NlIyHmEIEdqmfMQqVJOcWQ">
        <body>The query isPositive() tells whether an integer expression has a positive value.</body>
      </ownedComment>
      <ownedRule xmi:id="_NlIyIWEIEdqmfMQqVJOcWQ" constrainedElement="_NlIyHmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlIyImEIEdqmfMQqVJOcWQ" language="OCL">
          <body>self.isIntegral()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_NlIyI2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NlIyHmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlIyJGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = false</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NlIyJWEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NlIyJmEIEdqmfMQqVJOcWQ" name="isNonNegative" isQuery="true" precondition="_NlIyKGEIEdqmfMQqVJOcWQ" bodyCondition="_NlIyKmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NlIyJ2EIEdqmfMQqVJOcWQ" annotatedElement="_NlIyJmEIEdqmfMQqVJOcWQ">
        <body>The query isNonNegative() tells whether an integer expression has a non-negative value.</body>
      </ownedComment>
      <ownedRule xmi:id="_NlIyKGEIEdqmfMQqVJOcWQ" constrainedElement="_NlIyJmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlIyKWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>self.isIntegral()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_NlIyKmEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NlIyJmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NlIyK2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = false</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NlIyLGEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NqDujGEIEdqmfMQqVJOcWQ" name="getResult" visibility="protected" type="_NjM40GEIEdqmfMQqVJOcWQ">
      <returnResult xmi:id="_NqDujWEIEdqmfMQqVJOcWQ" type="_NjM40GEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqDujmEIEdqmfMQqVJOcWQ" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqDuj2EIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NqDumWEIEdqmfMQqVJOcWQ" name="OpaqueBehavior">
    <ownedComment xmi:id="_NqDummEIEdqmfMQqVJOcWQ" annotatedElement="_NqDumWEIEdqmfMQqVJOcWQ">
      <body>An behavior with implementation-specific semantics.</body>
    </ownedComment>
    <generalization xmi:id="_NqDum2EIEdqmfMQqVJOcWQ" general="_NqDuQGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NqDunGEIEdqmfMQqVJOcWQ" name="body" isOrdered="true" association="_NqM4W2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NqDunWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqDunmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NqDun2EIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqDuoGEIEdqmfMQqVJOcWQ" annotatedElement="_NqDunGEIEdqmfMQqVJOcWQ">
        <body>Specifies the behavior in one or more languages.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqDuoWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqDuomEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqDuo2EIEdqmfMQqVJOcWQ" name="language" isOrdered="true" association="_NqM4XWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NqDupGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqDupWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqDupmEIEdqmfMQqVJOcWQ" annotatedElement="_NqDuo2EIEdqmfMQqVJOcWQ">
        <body>Languages the body strings use in the same order as the body strings.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqDup2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqDuqGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NqM4MGEIEdqmfMQqVJOcWQ" name="FunctionBehavior">
    <ownedComment xmi:id="_NqM4MWEIEdqmfMQqVJOcWQ" annotatedElement="_NqM4MGEIEdqmfMQqVJOcWQ">
      <body>A function behavior is an opaque behavior that does not access or modify any objects or other external data.</body>
    </ownedComment>
    <ownedRule xmi:id="_NqM4MmEIEdqmfMQqVJOcWQ" name="one_output_parameter" constrainedElement="_NqM4MGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqM4M2EIEdqmfMQqVJOcWQ" annotatedElement="_NqM4MmEIEdqmfMQqVJOcWQ">
        <body>A function behavior has at least one output parameter.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NqM4NGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.ownedParameters->

  select(p | p.direction=#out or p.direction=#inout or p.direction=#return)->size() >= 1</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NqM4NWEIEdqmfMQqVJOcWQ" name="types_of_parameters" constrainedElement="_NqM4MGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqM4NmEIEdqmfMQqVJOcWQ" annotatedElement="_NqM4NWEIEdqmfMQqVJOcWQ">
        <body>The types of parameters are all data types, which may not nest anything but other datatypes.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NqM4N2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>def: hasAllDataTypeAttributes(d : DataType) : Boolean =

  d.ownedAttribute->forAll(a |

    a.type.oclIsTypeOf(DataType) and

      hasAllDataTypeAttributes(a.type))

self.ownedParameters->forAll(p | p.type.notEmpty() and

  p.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p))</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NqM4OGEIEdqmfMQqVJOcWQ" general="_NqDumWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqM4OWEIEdqmfMQqVJOcWQ" name="A_behavioredClassifier_ownedBehavior" memberEnd="_NqM4O2EIEdqmfMQqVJOcWQ _NqDucWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NqM4OmEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NqM4O2EIEdqmfMQqVJOcWQ" type="_NqDua2EIEdqmfMQqVJOcWQ" association="_NqM4OWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqM4PGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqM4PWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqM4PmEIEdqmfMQqVJOcWQ" name="A_classifierBehavior_behavioredClassifier" memberEnd="_NqM4QGEIEdqmfMQqVJOcWQ _NqDud2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NqM4P2EIEdqmfMQqVJOcWQ" general="_NqM4OWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NqM4QGEIEdqmfMQqVJOcWQ" type="_NqDua2EIEdqmfMQqVJOcWQ" redefinedProperty="_NqM4O2EIEdqmfMQqVJOcWQ" association="_NqM4PmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqM4QWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqM4QmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqM4Q2EIEdqmfMQqVJOcWQ" name="A_redefinedBehavior_behavior" memberEnd="_NqDuU2EIEdqmfMQqVJOcWQ _NqM4RWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NqM4RGEIEdqmfMQqVJOcWQ" general="_NkPaLGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NqM4RWEIEdqmfMQqVJOcWQ" type="_NqDuQGEIEdqmfMQqVJOcWQ" association="_NqM4Q2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqM4RmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqM4R2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqM4SGEIEdqmfMQqVJOcWQ" name="A_method_specification" memberEnd="_NqDuV2EIEdqmfMQqVJOcWQ _NqDulWEIEdqmfMQqVJOcWQ"/>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqM4SWEIEdqmfMQqVJOcWQ" name="A_behavior_ownedParameter" memberEnd="_NqM4S2EIEdqmfMQqVJOcWQ _NqDuW2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NqM4SmEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NqM4S2EIEdqmfMQqVJOcWQ" type="_NqDuQGEIEdqmfMQqVJOcWQ" association="_NqM4SWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqM4TGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqM4TWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqM4TmEIEdqmfMQqVJOcWQ" name="A_result_opaqueExpression" memberEnd="_NqM4T2EIEdqmfMQqVJOcWQ _NqDugmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NqM4T2EIEdqmfMQqVJOcWQ" type="_NjDHlmEIEdqmfMQqVJOcWQ" association="_NqM4TmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqM4UGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqM4UWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqM4UmEIEdqmfMQqVJOcWQ" name="A_behavior_opaqueExpression" memberEnd="_NqM4U2EIEdqmfMQqVJOcWQ _NqDuiGEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NqM4U2EIEdqmfMQqVJOcWQ" type="_NjDHlmEIEdqmfMQqVJOcWQ" association="_NqM4UmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqM4VGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqM4VWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqM4VmEIEdqmfMQqVJOcWQ" name="A_context_behavior" memberEnd="_NqDuYWEIEdqmfMQqVJOcWQ _NqM4WGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NqM4V2EIEdqmfMQqVJOcWQ" general="_NkPaKmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NqM4WGEIEdqmfMQqVJOcWQ" type="_NqDuQGEIEdqmfMQqVJOcWQ" association="_NqM4VmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqM4WWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqM4WmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqM4W2EIEdqmfMQqVJOcWQ" name="A_body_opaqueBehavior" memberEnd="_NqDunGEIEdqmfMQqVJOcWQ _NqM4XGEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NqM4XGEIEdqmfMQqVJOcWQ" type="_NqDumWEIEdqmfMQqVJOcWQ" association="_NqM4W2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqM4XWEIEdqmfMQqVJOcWQ" name="A_language_opaqueBehavior" memberEnd="_NqM4XmEIEdqmfMQqVJOcWQ _NqDuo2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NqM4XmEIEdqmfMQqVJOcWQ" type="_NqDumWEIEdqmfMQqVJOcWQ" association="_NqM4XWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NqM4X2EIEdqmfMQqVJOcWQ" name="Actor">
    <ownedComment xmi:id="_NqM4YGEIEdqmfMQqVJOcWQ" annotatedElement="_NqM4X2EIEdqmfMQqVJOcWQ">
      <body>An Actor models a type of role played by an entity that interacts with the subject (e.g., by exchanging signals and data), but which is external to the subject (i.e., in the sense that an instance of an actor is not a part of the instance of its corresponding subject). Actors may represent roles played by human users, external hardware, or other subjects. Note that an actor does not necessarily represent a specific physical entity but merely a particular facet (i.e., role) of some entity that is relevant to the specification of its associated use cases. Thus, a single physical instance may play the role of several different actors and, conversely, a given actor may be played by multiple different instances.



Since an actor is external to the subject, it is typically defined in the same classifier or package that incorporates the subject classifier.

</body>
    </ownedComment>
    <ownedRule xmi:id="_NqM4YWEIEdqmfMQqVJOcWQ" name="associations" constrainedElement="_NqM4X2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqM4YmEIEdqmfMQqVJOcWQ" annotatedElement="_NqM4YWEIEdqmfMQqVJOcWQ">
        <body>An actor can only have associations to use cases, components and classes. Furthermore these associations must be binary.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NqM4Y2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.ownedAttribute->forAll ( a |
(a.association->notEmpty()) implies
((a.association.memberEnd.size() = 2) and
(a.opposite.class.oclIsKindOf(UseCase) or
(a.opposite.class.oclIsKindOf(Class) and not a.opposite.class.oclIsKindOf(Behavior))))
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NqM4ZGEIEdqmfMQqVJOcWQ" name="must_have_name" constrainedElement="_NqM4X2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqM4ZWEIEdqmfMQqVJOcWQ" annotatedElement="_NqM4ZGEIEdqmfMQqVJOcWQ">
        <body>An actor must have a name.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NqM4ZmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>name->notEmpty()</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NqM4Z2EIEdqmfMQqVJOcWQ" general="_NqDua2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NqM4aGEIEdqmfMQqVJOcWQ" name="Extend">
    <ownedComment xmi:id="_NqM4aWEIEdqmfMQqVJOcWQ" annotatedElement="_NqM4aGEIEdqmfMQqVJOcWQ">
      <body>This relationship specifies that the behavior of a use case may be extended by the behavior of another (usually supplementary) use case. The extension takes place at one or more specific extension points defined in the extended use case. Note, however, that the extended use case is defined independently of the extending use case and is meaningful independently of the extending use case. On the other hand, the extending use case typically defines behavior that may not necessarily be meaningful by itself. Instead, the extending use case defines a set of modular behavior increments that augment an execution of the extended use case under specific conditions.



Note that the same extending use case can extend more than one use case. Furthermore, an extending use case may itself be extended.



It is a kind of DirectedRelationship, such that the source is the extending use case and the destination is the extended use case. It is also a kind of NamedElement so that it can have a name in the context of its owning use case. The extend relationship itself is owned by the extending use case.

</body>
    </ownedComment>
    <ownedRule xmi:id="_NqM4amEIEdqmfMQqVJOcWQ" name="extension_points" constrainedElement="_NqM4aGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqM4a2EIEdqmfMQqVJOcWQ" annotatedElement="_NqM4amEIEdqmfMQqVJOcWQ">
        <body>The extension points referenced by the extend relationship must belong to the use case that is being extended.



</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NqM4bGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>extensionLocation->forAll (xp | extendedCase.extensionPoint->includes(xp))</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NqM4bWEIEdqmfMQqVJOcWQ" general="_NidRw2EIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NqM4bmEIEdqmfMQqVJOcWQ" general="_NjfzQGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NqM4b2EIEdqmfMQqVJOcWQ" name="extendedCase" type="_NqWpPmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRzGEIEdqmfMQqVJOcWQ" association="_NqfzJWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqM4cGEIEdqmfMQqVJOcWQ" annotatedElement="_NqM4b2EIEdqmfMQqVJOcWQ">
        <body>References the use case that is being extended.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqM4cWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqM4cmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqM4c2EIEdqmfMQqVJOcWQ" name="extension" type="_NqWpPmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRxmEIEdqmfMQqVJOcWQ" association="_NqfzKmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NqM4dGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqM4dWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqM4dmEIEdqmfMQqVJOcWQ" annotatedElement="_NqM4c2EIEdqmfMQqVJOcWQ">
        <body>References the use case that represents the extension and owns the extend relationship.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqM4d2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqM4eGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqM4eWEIEdqmfMQqVJOcWQ" name="condition" type="_NjDHfmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NqfzL2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NqM4emEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqM4e2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqM4fGEIEdqmfMQqVJOcWQ" annotatedElement="_NqM4eWEIEdqmfMQqVJOcWQ">
        <body>References the condition that must hold when the first extension point is reached for the extension to take place. If no constraint is associated with the extend relationship, the extension is unconditional.

</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqM4fWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqM4fmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqM4f2EIEdqmfMQqVJOcWQ" name="extensionLocation" type="_NqWpamEIEdqmfMQqVJOcWQ" isOrdered="true" association="_NqfzNGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqM4gGEIEdqmfMQqVJOcWQ" annotatedElement="_NqM4f2EIEdqmfMQqVJOcWQ">
        <body>An ordered list of extension points belonging to the extended use case, specifying where the respective behavioral fragments of the extending use case are to be inserted. The first fragment in the extending use case is associated with the first extension point in the list, the second fragment with the second point, and so on. (Note that, in most practical cases, the extending use case has just a single behavior fragment, so that the list of extension points is trivial.)

</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqM4gWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqM4gmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NqWpMGEIEdqmfMQqVJOcWQ" name="Include">
    <ownedComment xmi:id="_NqWpMWEIEdqmfMQqVJOcWQ" annotatedElement="_NqWpMGEIEdqmfMQqVJOcWQ">
      <body>Note that the included use case is not optional, and is always required for the  including use case to execute correctly.



</body>
    </ownedComment>
    <generalization xmi:id="_NqWpMmEIEdqmfMQqVJOcWQ" general="_NidRw2EIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NqWpM2EIEdqmfMQqVJOcWQ" general="_NjfzQGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NqWpNGEIEdqmfMQqVJOcWQ" name="includingCase" type="_NqWpPmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRxmEIEdqmfMQqVJOcWQ" association="_NqWpgWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NqWpNWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqWpNmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqWpN2EIEdqmfMQqVJOcWQ" annotatedElement="_NqWpNGEIEdqmfMQqVJOcWQ">
        <body>References the use case which will include the addition and owns the include relationship.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqWpOGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqWpOWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqWpOmEIEdqmfMQqVJOcWQ" name="addition" type="_NqWpPmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRzGEIEdqmfMQqVJOcWQ" association="_NqfzIGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqWpO2EIEdqmfMQqVJOcWQ" annotatedElement="_NqWpOmEIEdqmfMQqVJOcWQ">
        <body>References the use case that is to be included.

</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqWpPGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqWpPWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NqWpPmEIEdqmfMQqVJOcWQ" name="UseCase">
    <ownedComment xmi:id="_NqWpP2EIEdqmfMQqVJOcWQ" annotatedElement="_NqWpPmEIEdqmfMQqVJOcWQ">
      <body>A UseCase is a kind of behaviored classifier that represents a declaration of an offered behavior. Each use case specifies some behavior, possibly including variants, that the subject can perform in collaboration with one or more actors. Use cases define the offered behavior of the subject without reference to its internal structure. These behaviors, involving

interactions between the actor and the subject, may result in changes to the state of the subject and communications with its environment. A use case can include possible variations of its basic behavior, including exceptional behavior and error handling.



The subject of a use case could be a physical system or any other element that may have behavior, such as a component, subsystem or class. Each use case specifies a unit of useful functionality that the subject provides to its users, i.e., a specific way of interacting with the subject. This functionality, which is initiated by an actor, must always be completed for the use case to complete. It is deemed complete if, after its execution, the subject will be in a state in which no further inputs or actions are expected and the use case can be initiated again or in an error state.



Use cases can be used both for specification of the (external) requirements on a subject and for the specification of the functionality offered by a subject. Moreover, the use cases also state the requirements the specified subject poses on its environment by defining how they should interact with the subject so that it will be able to perform its services.



The behavior of a use case can be described by a specification that is some kind of Behavior (through its ownedBehavior relationship), such as interactions, activities, and state machines, or by pre-conditions and post-conditions as well as by natural language text where appropriate. It may also be described indirectly through a Collaboration that uses the use case and its actors as the classifiers that type its parts. Which of these techniques to use depends on the nature of the use case behavior as well as on the intended reader. These descriptions can be combined.

</body>
    </ownedComment>
    <ownedRule xmi:id="_NqWpQGEIEdqmfMQqVJOcWQ" name="must_have_name" constrainedElement="_NqWpPmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqWpQWEIEdqmfMQqVJOcWQ" annotatedElement="_NqWpQGEIEdqmfMQqVJOcWQ">
        <body>A UseCase must have a name.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NqWpQmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.name -> notEmpty ()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NqWpQ2EIEdqmfMQqVJOcWQ" name="binary_associations" constrainedElement="_NqWpPmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqWpRGEIEdqmfMQqVJOcWQ" annotatedElement="_NqWpQ2EIEdqmfMQqVJOcWQ">
        <body>UseCases can only be involved in binary Associations.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NqWpRWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NqWpRmEIEdqmfMQqVJOcWQ" name="no_association_to_use_case" constrainedElement="_NqWpPmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqWpR2EIEdqmfMQqVJOcWQ" annotatedElement="_NqWpRmEIEdqmfMQqVJOcWQ">
        <body>UseCases can not have Associations to UseCases specifying the same subject.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NqWpSGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NqWpSWEIEdqmfMQqVJOcWQ" name="cannot_include_self" constrainedElement="_NqWpPmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqWpSmEIEdqmfMQqVJOcWQ" annotatedElement="_NqWpSWEIEdqmfMQqVJOcWQ">
        <body>A use case cannot include use cases that directly or indirectly include it.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NqWpS2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>not self.allIncludedUseCases()->includes(self)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NqWpTGEIEdqmfMQqVJOcWQ" general="_NqDua2EIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NqWpTWEIEdqmfMQqVJOcWQ" name="include" type="_NqWpMGEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_NqWpgWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NqWpTmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqWpT2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqWpUGEIEdqmfMQqVJOcWQ" annotatedElement="_NqWpTWEIEdqmfMQqVJOcWQ">
        <body>References the Include relationships owned by this use case.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqWpUWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqWpUmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqWpU2EIEdqmfMQqVJOcWQ" name="extend" type="_NqM4aGEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_NqfzKmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NqWpVGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqWpVWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqWpVmEIEdqmfMQqVJOcWQ" annotatedElement="_NqWpU2EIEdqmfMQqVJOcWQ">
        <body>References the Extend relationships owned by this use case.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqWpV2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqWpWGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqWpWWEIEdqmfMQqVJOcWQ" name="extensionPoint" type="_NqWpamEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_NqfzLWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NqWpWmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqWpW2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqWpXGEIEdqmfMQqVJOcWQ" annotatedElement="_NqWpWWEIEdqmfMQqVJOcWQ">
        <body>References the ExtensionPoints owned by the use case.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqWpXWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqWpXmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqWpX2EIEdqmfMQqVJOcWQ" name="subject" type="_NiTgcGEIEdqmfMQqVJOcWQ" association="_NqfzPWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqWpYGEIEdqmfMQqVJOcWQ" annotatedElement="_NqWpX2EIEdqmfMQqVJOcWQ">
        <body>References the subjects to which this use case applies. The subject or its parts realize all the use cases that apply to this subject. Use cases need not be attached to any specific subject, however. The subject may, but need not, own the use cases that apply to it.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqWpYWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqWpYmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NqWpY2EIEdqmfMQqVJOcWQ" name="allIncludedUseCases" type="_NqWpPmEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_NqWpZWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqWpZGEIEdqmfMQqVJOcWQ" annotatedElement="_NqWpY2EIEdqmfMQqVJOcWQ">
        <body>The query allIncludedUseCases() returns the transitive closure of all use cases (directly or indirectly) included by this use case.</body>
      </ownedComment>
      <ownedRule xmi:id="_NqWpZWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NqWpY2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NqWpZmEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = self.include->union(self.include->collect(in | in.allIncludedUseCases()))</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NqWpZ2EIEdqmfMQqVJOcWQ" type="_NqWpPmEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqWpaGEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqWpaWEIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NqWpamEIEdqmfMQqVJOcWQ" name="ExtensionPoint">
    <ownedComment xmi:id="_NqWpa2EIEdqmfMQqVJOcWQ" annotatedElement="_NqWpamEIEdqmfMQqVJOcWQ">
      <body>An ExtensionPoint is a feature of a use case that identifies a point where the behavior of a use case can be augmented with elements of another (extending) use case.</body>
    </ownedComment>
    <ownedRule xmi:id="_NqWpbGEIEdqmfMQqVJOcWQ" name="must_have_name" constrainedElement="_NqWpamEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqWpbWEIEdqmfMQqVJOcWQ" annotatedElement="_NqWpbGEIEdqmfMQqVJOcWQ">
        <body>An ExtensionPoint must have a name.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NqWpbmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.name->notEmpty ()</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NqWpb2EIEdqmfMQqVJOcWQ" general="_NiwMYGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NqWpcGEIEdqmfMQqVJOcWQ" name="useCase" type="_NqWpPmEIEdqmfMQqVJOcWQ" association="_NqfzLWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NqWpcWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqWpcmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqWpc2EIEdqmfMQqVJOcWQ" annotatedElement="_NqWpcGEIEdqmfMQqVJOcWQ">
        <body>References the use case that owns this extension point.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqWpdGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqWpdWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqWpgWEIEdqmfMQqVJOcWQ" name="A_includingCase_include" memberEnd="_NqWpNGEIEdqmfMQqVJOcWQ _NqWpTWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NqWpgmEIEdqmfMQqVJOcWQ" general="_NkPaJGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NqWpg2EIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqfzIGEIEdqmfMQqVJOcWQ" name="A_addition_include" memberEnd="_NqWpOmEIEdqmfMQqVJOcWQ _NqfzImEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NqfzIWEIEdqmfMQqVJOcWQ" general="_NkPaJ2EIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NqfzImEIEdqmfMQqVJOcWQ" type="_NqWpMGEIEdqmfMQqVJOcWQ" association="_NqfzIGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqfzI2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqfzJGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqfzJWEIEdqmfMQqVJOcWQ" name="A_extendedCase_extend" memberEnd="_NqM4b2EIEdqmfMQqVJOcWQ _NqfzJ2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NqfzJmEIEdqmfMQqVJOcWQ" general="_NkPaJ2EIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NqfzJ2EIEdqmfMQqVJOcWQ" type="_NqM4aGEIEdqmfMQqVJOcWQ" association="_NqfzJWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqfzKGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqfzKWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqfzKmEIEdqmfMQqVJOcWQ" name="A_extension_extend" memberEnd="_NqWpU2EIEdqmfMQqVJOcWQ _NqM4c2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NqfzK2EIEdqmfMQqVJOcWQ" general="_NkPaJGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NqfzLGEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqfzLWEIEdqmfMQqVJOcWQ" name="A_extensionPoint_useCase" memberEnd="_NqWpcGEIEdqmfMQqVJOcWQ _NqWpWWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NqfzLmEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqfzL2EIEdqmfMQqVJOcWQ" name="A_condition_extend" memberEnd="_NqM4eWEIEdqmfMQqVJOcWQ _NqfzMWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NqfzMGEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NqfzMWEIEdqmfMQqVJOcWQ" type="_NqM4aGEIEdqmfMQqVJOcWQ" association="_NqfzL2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqfzMmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqfzM2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqfzNGEIEdqmfMQqVJOcWQ" name="A_extensionLocation_extension" memberEnd="_NqM4f2EIEdqmfMQqVJOcWQ _NqfzNWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NqfzNWEIEdqmfMQqVJOcWQ" name="extension" type="_NqM4aGEIEdqmfMQqVJOcWQ" association="_NqfzNGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqfzNmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqfzN2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqfzOGEIEdqmfMQqVJOcWQ" name="A_ownedUseCase_classifier" memberEnd="_NqWpd2EIEdqmfMQqVJOcWQ _NqfzOmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NqfzOWEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NqfzOmEIEdqmfMQqVJOcWQ" type="_NiTgcGEIEdqmfMQqVJOcWQ" association="_NqfzOGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqfzO2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqfzPGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqfzPWEIEdqmfMQqVJOcWQ" name="A_subject_useCase" memberEnd="_NqWpfWEIEdqmfMQqVJOcWQ _NqWpX2EIEdqmfMQqVJOcWQ"/>
  <ownedMember xmi:type="uml:Class" xmi:id="_NqfzPmEIEdqmfMQqVJOcWQ" name="Usage">
    <ownedComment xmi:id="_NqfzP2EIEdqmfMQqVJOcWQ" annotatedElement="_NqfzPmEIEdqmfMQqVJOcWQ">
      <body>A usage is a relationship in which one element requires another element (or set of elements) for its full implementation or operation. In the metamodel, a Usage is a Dependency in which the client requires the presence of the supplier.

</body>
    </ownedComment>
    <generalization xmi:id="_NqfzQGEIEdqmfMQqVJOcWQ" general="_NqfzSmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NqfzQWEIEdqmfMQqVJOcWQ" name="Abstraction">
    <ownedComment xmi:id="_NqfzQmEIEdqmfMQqVJOcWQ" annotatedElement="_NqfzQWEIEdqmfMQqVJOcWQ">
      <body>An abstraction is a relationship that relates two elements or sets of elements that represent the same concept at different levels of abstraction or from different viewpoints. In the metamodel, an Abstraction is a Dependency in which there is a mapping between the supplier and the client.</body>
    </ownedComment>
    <generalization xmi:id="_NqfzQ2EIEdqmfMQqVJOcWQ" general="_NqfzSmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NqfzRGEIEdqmfMQqVJOcWQ" name="mapping" type="_NjDHlmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NqpkMGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NqfzRWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqfzRmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqfzR2EIEdqmfMQqVJOcWQ" annotatedElement="_NqfzRGEIEdqmfMQqVJOcWQ">
        <body>An composition of an Expression that states the abstraction relationship between the supplier and the client. In some cases, such as Derivation, it is usually formal and unidirectional; in other cases, such as Trace, it is usually informal and bidirectional. The mapping expression is optional and may be omitted if the precise relationship between the elements is not specified.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqfzSGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqfzSWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NqfzSmEIEdqmfMQqVJOcWQ" name="Dependency">
    <ownedComment xmi:id="_NqfzS2EIEdqmfMQqVJOcWQ" annotatedElement="_NqfzSmEIEdqmfMQqVJOcWQ">
      <body>A dependency is a relationship that signifies that a single or a set of model elements requires other model elements for their specification or implementation. This means that the complete semantics of the depending elements is either semantically or structurally dependent on the definition of the supplier element(s).</body>
    </ownedComment>
    <generalization xmi:id="_NqfzTGEIEdqmfMQqVJOcWQ" general="_NidRw2EIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NqfzTWEIEdqmfMQqVJOcWQ" general="_Nimb8GEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NqfzTmEIEdqmfMQqVJOcWQ" name="supplier" type="_NjfzQGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRzGEIEdqmfMQqVJOcWQ" association="_NqzVJGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqfzT2EIEdqmfMQqVJOcWQ" annotatedElement="_NqfzTmEIEdqmfMQqVJOcWQ">
        <body>The element(s) independent of the client element(s), in the same respect and the same dependency relationship. In some directed dependency relationships (such as Refinement Abstractions), a common convention in the domain of class-based OO software is to put the more abstract element in this role. Despite this convention, users of UML may stipulate a sense of dependency suitable for their domain, which makes a more abstract element dependent on that which is more specific.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqfzUGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqfzUWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqfzUmEIEdqmfMQqVJOcWQ" name="client" type="_NjfzQGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRxmEIEdqmfMQqVJOcWQ" association="_NqzVKmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqfzU2EIEdqmfMQqVJOcWQ" annotatedElement="_NqfzUmEIEdqmfMQqVJOcWQ">
        <body>The element(s) dependent on the supplier element(s). In some cases (such as a Trace Abstraction) the assignment of direction (that is, the designation of the client element) is at the discretion of the modeler, and is a stipulation.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqfzVGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqfzVWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NqfzVmEIEdqmfMQqVJOcWQ" name="Realization">
    <ownedComment xmi:id="_NqfzV2EIEdqmfMQqVJOcWQ" annotatedElement="_NqfzVmEIEdqmfMQqVJOcWQ">
      <body>Realization is a specialized abstraction relationship between two sets of model elements, one representing a specification (the supplier) and the other represents an implementation of the latter (the client). Realization can be used to model stepwise refinement, optimizations, transformations, templates, model synthesis, framework composition, etc.</body>
    </ownedComment>
    <generalization xmi:id="_NqfzWGEIEdqmfMQqVJOcWQ" general="_NqfzQWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NqfzWWEIEdqmfMQqVJOcWQ" name="Substitution">
    <ownedComment xmi:id="_NqfzWmEIEdqmfMQqVJOcWQ" annotatedElement="_NqfzWWEIEdqmfMQqVJOcWQ">
      <body>A substitution is a relationship between two classifiers signifies that the substitutingClassifier complies with the contract specified by the contract classifier. This implies that instances of the substitutingClassifier are runtime substitutable where instances of the contract classifier are expected.</body>
    </ownedComment>
    <generalization xmi:id="_NqfzW2EIEdqmfMQqVJOcWQ" general="_NqfzVmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NqfzXGEIEdqmfMQqVJOcWQ" name="contract" type="_NiTgcGEIEdqmfMQqVJOcWQ" subsettedProperty="_NqfzTmEIEdqmfMQqVJOcWQ _NidRzGEIEdqmfMQqVJOcWQ" association="_NqpkNWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqfzXWEIEdqmfMQqVJOcWQ" annotatedElement="_NqfzXGEIEdqmfMQqVJOcWQ"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqfzXmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqfzX2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqfzYGEIEdqmfMQqVJOcWQ" name="substitutingClassifier" type="_NiTgcGEIEdqmfMQqVJOcWQ" subsettedProperty="_NqfzUmEIEdqmfMQqVJOcWQ _NidRxmEIEdqmfMQqVJOcWQ" association="_NqzVIGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NqfzYWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqfzYmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqfzY2EIEdqmfMQqVJOcWQ" annotatedElement="_NqfzYGEIEdqmfMQqVJOcWQ"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqfzZGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqfzZWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NimbnWEIEdqmfMQqVJOcWQ" name="Namespace" isAbstract="true">
    <ownedComment xmi:id="_NimbnmEIEdqmfMQqVJOcWQ" annotatedElement="_NimbnWEIEdqmfMQqVJOcWQ">
      <body>A namespace has the ability to import either individial members or all members of a package, thereby making it possible to refer to those named elements without qualification in the importing namespace. In the case of conflicts, it is necessary to use qualified names or aliases to disambiguate the referenced elements.</body>
    </ownedComment>
    <ownedComment xmi:id="_NnXmwWEIEdqmfMQqVJOcWQ" annotatedElement="_NimbnWEIEdqmfMQqVJOcWQ">
      <body>A namespace is a named element that can own other named elements. Each named element may be owned by at most one namespace. A namespace provides a means for identifying named elements by name. Named elements can be identified by name in a namespace either by being directly owned by the namespace or by being introduced into the namespace by other means e.g. importing or inheriting. Namespace is an abstract metaclass.



A namespace can own constraints. The constraint does not necessarily apply to the namespace itself, but may also apply to elements in the namespace.



A namespace has the ability to import either individual members or all members of a package, thereby making it possible to refer to those named elements without qualification in the importing namespace. In the case of conflicts, it is necessary to use qualified names or aliases to disambiguate the referenced elements.



</body>
    </ownedComment>
    <ownedComment xmi:id="_NqpkLWEIEdqmfMQqVJOcWQ" annotatedElement="_NimbnWEIEdqmfMQqVJOcWQ">
      <body>A namespace is a named element that can own other named elements. Each named element may be owned by at most one namespace. A namespace provides a means for identifying named elements by name. Named elements can be identified by name in a namespace either by being directly owned by the namespace or by being introduced into the namespace by other means e.g. importing or inheriting. Namespace is an abstract metaclass.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nimbn2EIEdqmfMQqVJOcWQ" name="members_distinguishable" constrainedElement="_NimbnWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NimboGEIEdqmfMQqVJOcWQ" annotatedElement="_Nimbn2EIEdqmfMQqVJOcWQ">
        <body>All the members of a Namespace are distinguishable within it.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnXmwmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>membersAreDistinguishable()</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NimbomEIEdqmfMQqVJOcWQ" general="_NjfzQGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NimbqWEIEdqmfMQqVJOcWQ" name="elementImport" type="_NjWCQGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NkGQM2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NimbqmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nimbq2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NimbrGEIEdqmfMQqVJOcWQ" annotatedElement="_NimbqWEIEdqmfMQqVJOcWQ">
        <body>References the ElementImports owned by the Namespace.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnXmw2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnXmxGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nimbr2EIEdqmfMQqVJOcWQ" name="packageImport" type="_NjWCmWEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NkGQNmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NimbsGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NimbsWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NimbsmEIEdqmfMQqVJOcWQ" annotatedElement="_Nimbr2EIEdqmfMQqVJOcWQ">
        <body>References the PackageImports owned by the Namespace.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnXmxWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnXmxmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NimbwWEIEdqmfMQqVJOcWQ" name="ownedRule" type="_NjDHfmEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_NkiVGmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NimbwmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nimbw2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NnXmx2EIEdqmfMQqVJOcWQ" annotatedElement="_NimbwWEIEdqmfMQqVJOcWQ">
        <body>Specifies a set of Constraints owned by this Namespace.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnXmyGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnXmyWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nimbu2EIEdqmfMQqVJOcWQ" name="member" type="_NjfzQGEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="_NkZLJWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NimbvGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NimbvWEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NimbvmEIEdqmfMQqVJOcWQ" annotatedElement="_Nimbu2EIEdqmfMQqVJOcWQ">
        <body>Redefines the corresponding property of Abstractions::Namespaces::Namespace.</body>
      </ownedComment>
      <ownedComment xmi:id="_NnXmzWEIEdqmfMQqVJOcWQ" annotatedElement="_Nimbu2EIEdqmfMQqVJOcWQ">
        <body>A collection of NamedElements identifiable within the Namespace, either by being owned or by being introduced by importing or inheritance.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnhXoGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnhXoWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nimbo2EIEdqmfMQqVJOcWQ" name="importedMember" type="_Nimb8GEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" subsettedProperty="_Nimbu2EIEdqmfMQqVJOcWQ" association="_Nj8fTmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NimbpGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NimbpWEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NimbpmEIEdqmfMQqVJOcWQ" annotatedElement="_Nimbo2EIEdqmfMQqVJOcWQ">
        <body>References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnhXomEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnhXo2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NimbtWEIEdqmfMQqVJOcWQ" name="ownedMember" type="_NjfzQGEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" isDerivedUnion="true" subsettedProperty="_Nimbu2EIEdqmfMQqVJOcWQ _NidR2mEIEdqmfMQqVJOcWQ" association="_NkZLImEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NimbtmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nimbt2EIEdqmfMQqVJOcWQ" isTransient="true" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NimbuGEIEdqmfMQqVJOcWQ" annotatedElement="_NimbtWEIEdqmfMQqVJOcWQ">
        <body>Redefines the corresponding property of Abstractions::Namespaces::Namespace.</body>
      </ownedComment>
      <ownedComment xmi:id="_NnXmymEIEdqmfMQqVJOcWQ" annotatedElement="_NimbtWEIEdqmfMQqVJOcWQ">
        <body>A collection of NamedElements owned by the Namespace.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqpkLmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqpkL2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NimbxmEIEdqmfMQqVJOcWQ" name="importedMember" type="_Nimb8GEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_NimbymEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_Nimbx2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EOperation" xmi:id="_NimbyGEIEdqmfMQqVJOcWQ" operationName="getImportedMembers"/>
      </eAnnotations>
      <ownedComment xmi:id="_NimbyWEIEdqmfMQqVJOcWQ" annotatedElement="_NimbxmEIEdqmfMQqVJOcWQ">
        <body>The importedMember property is derived from the ElementImports and the PackageImports. References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.</body>
      </ownedComment>
      <ownedComment xmi:id="_NnhXpGEIEdqmfMQqVJOcWQ" annotatedElement="_NimbxmEIEdqmfMQqVJOcWQ">
        <body>The importedMember property is derived from the ElementImports and the PackageImports.</body>
      </ownedComment>
      <ownedRule xmi:id="_NimbymEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NimbxmEIEdqmfMQqVJOcWQ _Nimbo2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnhXpWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = self.importMembers(self.elementImport.importedElement.asSet()-
>union(self.packageImport.importedPackage->collect(p | p.visibleMembers())))</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NimbzGEIEdqmfMQqVJOcWQ" type="_Nimb8GEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnhXpmEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnhXp2EIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
    <ownedOperation xmi:id="_Nimbz2EIEdqmfMQqVJOcWQ" name="getNamesOfMember" isQuery="true" bodyCondition="_Nimb0WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nimb0GEIEdqmfMQqVJOcWQ" annotatedElement="_Nimbz2EIEdqmfMQqVJOcWQ">
        <body>The query getNamesOfMember() is overridden to take account of importing. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.</body>
      </ownedComment>
      <ownedComment xmi:id="_NnhXqGEIEdqmfMQqVJOcWQ" annotatedElement="_Nimbz2EIEdqmfMQqVJOcWQ">
        <body>The query getNamesOfMember() gives a set of all of the names that a member would have in a Namespace. In general a member can have multiple names in a Namespace if it is imported more than once with different aliases. The query takes account of importing. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.</body>
      </ownedComment>
      <ownedRule xmi:id="_Nimb0WEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_Nimbz2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnhXqWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if self.ownedMember ->includes(element)
then Set{}->include(element.name)
else let elementImports: ElementImport = self.elementImport->select(ei | ei.importedElement = element) in
  if elementImports->notEmpty()
  then elementImports->collect(el | el.getName())
  else self.packageImport->select(pi | pi.importedPackage.visibleMembers()->includes(element))-> collect(pi | pi.importedPackage.getNamesOfMember(element))
  endif
endif</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_Nimb02EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnhXqmEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnhXq2EIEdqmfMQqVJOcWQ"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
      <ownedParameter xmi:id="_Nimb1mEIEdqmfMQqVJOcWQ" name="element" type="_NjfzQGEIEdqmfMQqVJOcWQ"/>
    </ownedOperation>
    <ownedOperation xmi:id="_Nimb62EIEdqmfMQqVJOcWQ" name="membersAreDistinguishable" isQuery="true" bodyCondition="_Nimb7WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nimb7GEIEdqmfMQqVJOcWQ" annotatedElement="_Nimb62EIEdqmfMQqVJOcWQ">
        <body>The Boolean query membersAreDistinguishable() determines whether all of the namespace's members are distinguishable within it.</body>
      </ownedComment>
      <ownedRule xmi:id="_Nimb7WEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_Nimb62EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnhXrGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = self.member->forAll( memb |
self.member->excluding(memb)->forAll(other |
memb.isDistinguishableFrom(other, self)))</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_Nimb72EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_Nimb12EIEdqmfMQqVJOcWQ" name="importMembers" type="_Nimb8GEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_Nimb2WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nimb2GEIEdqmfMQqVJOcWQ" annotatedElement="_Nimb12EIEdqmfMQqVJOcWQ">
        <body>The query importMembers() defines which of a set of PackageableElements are actually imported into the namespace. This excludes hidden ones, i.e., those which have names that conflict with names of owned members, and also excludes elements which would have the same name when imported.</body>
      </ownedComment>
      <ownedRule xmi:id="_Nimb2WEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_Nimb12EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnhXrWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = self.excludeCollisions(imps)->select(imp | self.ownedMember->forAll(mem |
mem.imp.isDistinguishableFrom(mem, self)))</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_Nimb22EIEdqmfMQqVJOcWQ" type="_Nimb8GEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnhXrmEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnhXr2EIEdqmfMQqVJOcWQ"/>
      </returnResult>
      <ownedParameter xmi:id="_Nimb3mEIEdqmfMQqVJOcWQ" name="imps" type="_Nimb8GEIEdqmfMQqVJOcWQ">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nimb32EIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nimb4GEIEdqmfMQqVJOcWQ"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="_Nimb4WEIEdqmfMQqVJOcWQ" name="excludeCollisions" type="_Nimb8GEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_Nimb42EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nimb4mEIEdqmfMQqVJOcWQ" annotatedElement="_Nimb4WEIEdqmfMQqVJOcWQ">
        <body>The query excludeCollisions() excludes from a set of PackageableElements any that would not be distinguishable from each other in this namespace.</body>
      </ownedComment>
      <ownedRule xmi:id="_Nimb42EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_Nimb4WEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnhXsGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = imps->reject(imp1 | imps.exists(imp2 | not imp1.isDistinguishableFrom(imp2, self)))</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_Nimb5WEIEdqmfMQqVJOcWQ" type="_Nimb8GEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnhXsWEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnhXsmEIEdqmfMQqVJOcWQ"/>
      </returnResult>
      <ownedParameter xmi:id="_Nimb6GEIEdqmfMQqVJOcWQ" name="imps" type="_Nimb8GEIEdqmfMQqVJOcWQ">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nimb6WEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nimb6mEIEdqmfMQqVJOcWQ"/>
      </ownedParameter>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqpkMGEIEdqmfMQqVJOcWQ" name="A_mapping_abstraction" memberEnd="_NqfzRGEIEdqmfMQqVJOcWQ _NqpkMmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NqpkMWEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NqpkMmEIEdqmfMQqVJOcWQ" type="_NqfzQWEIEdqmfMQqVJOcWQ" association="_NqpkMGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqpkM2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqpkNGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqpkNWEIEdqmfMQqVJOcWQ" name="A_contract_substitution" memberEnd="_NqpkOGEIEdqmfMQqVJOcWQ _NqfzXGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NqpkNmEIEdqmfMQqVJOcWQ" general="_NqzVJGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NqpkOGEIEdqmfMQqVJOcWQ" type="_NqfzWWEIEdqmfMQqVJOcWQ" association="_NqpkNWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqpkOWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqpkOmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqzVIGEIEdqmfMQqVJOcWQ" name="A_substitution_substitutingClassifier" memberEnd="_NqpkIWEIEdqmfMQqVJOcWQ _NqfzYGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NqzVIWEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NqzVImEIEdqmfMQqVJOcWQ" general="_NqzVKmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqzVJGEIEdqmfMQqVJOcWQ" name="A_supplierDependency_supplier" memberEnd="_NqzVJmEIEdqmfMQqVJOcWQ _NqfzTmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NqzVJWEIEdqmfMQqVJOcWQ" general="_NkPaJ2EIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NqzVJmEIEdqmfMQqVJOcWQ" name="supplierDependency" type="_NqfzSmEIEdqmfMQqVJOcWQ" association="_NqzVJGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqzVJ2EIEdqmfMQqVJOcWQ" annotatedElement="_NqzVJmEIEdqmfMQqVJOcWQ">
        <body>Indicates the dependencies that reference the supplier.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqzVKGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqzVKWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NqzVKmEIEdqmfMQqVJOcWQ" name="A_clientDependency_client" memberEnd="_NqpkJ2EIEdqmfMQqVJOcWQ _NqfzUmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NqzVK2EIEdqmfMQqVJOcWQ" general="_NkPaJGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NkZLImEIEdqmfMQqVJOcWQ" name="A_ownedMember_namespace" memberEnd="_NimbtWEIEdqmfMQqVJOcWQ _NjfzVmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NkZLI2EIEdqmfMQqVJOcWQ" general="_NkZLJWEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NkZLJGEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NqzVSGEIEdqmfMQqVJOcWQ" name="InterfaceRealization">
    <ownedComment xmi:id="_NqzVSWEIEdqmfMQqVJOcWQ" annotatedElement="_NqzVSGEIEdqmfMQqVJOcWQ">
      <body>An InterfaceRealization is a specialized Realization relationship between a Classifier and an Interface. This relationship signifies that the realizing classifier conforms to the contract specified by the Interface.</body>
    </ownedComment>
    <generalization xmi:id="_NqzVSmEIEdqmfMQqVJOcWQ" general="_NqfzVmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NqzVS2EIEdqmfMQqVJOcWQ" name="contract" type="_NqzVLGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRzGEIEdqmfMQqVJOcWQ _NqfzTmEIEdqmfMQqVJOcWQ" association="_Nq8fGmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqzVTGEIEdqmfMQqVJOcWQ" annotatedElement="_NqzVS2EIEdqmfMQqVJOcWQ">
        <body>References the Interface specifying the conformance contract.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqzVTWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqzVTmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqzVT2EIEdqmfMQqVJOcWQ" name="implementingClassifier" type="_NqDua2EIEdqmfMQqVJOcWQ" subsettedProperty="_NqfzUmEIEdqmfMQqVJOcWQ _NidRxmEIEdqmfMQqVJOcWQ" association="_Nq8fIGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NqzVUGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqzVUWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqzVUmEIEdqmfMQqVJOcWQ" annotatedElement="_NqzVT2EIEdqmfMQqVJOcWQ">
        <body>References the BehavioredClassifier that owns this Interfacerealization (i.e., the classifier that realizes the Interface to which it points).</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqzVU2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqzVVGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nq8fEGEIEdqmfMQqVJOcWQ" name="A_interface_ownedAttribute" memberEnd="_Nq8fE2EIEdqmfMQqVJOcWQ _NqzVMmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nq8fEWEIEdqmfMQqVJOcWQ" general="_NjyuPWEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_Nq8fEmEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nq8fE2EIEdqmfMQqVJOcWQ" type="_NqzVLGEIEdqmfMQqVJOcWQ" subsettedProperty="_NjyuQGEIEdqmfMQqVJOcWQ _NjfzVmEIEdqmfMQqVJOcWQ _NidR-2EIEdqmfMQqVJOcWQ" association="_Nq8fEGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nq8fFGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nq8fFWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nq8fFmEIEdqmfMQqVJOcWQ" name="A_interface_ownedOperation" memberEnd="_NqzVXmEIEdqmfMQqVJOcWQ _NqzVOGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nq8fF2EIEdqmfMQqVJOcWQ" general="_NkPaKmEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_Nq8fGGEIEdqmfMQqVJOcWQ" general="_NkPaLmEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_Nq8fGWEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nq8fGmEIEdqmfMQqVJOcWQ" name="A_contract_interfaceRealization" memberEnd="_NqzVS2EIEdqmfMQqVJOcWQ _Nq8fHWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nq8fHGEIEdqmfMQqVJOcWQ" general="_NqzVJGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nq8fHWEIEdqmfMQqVJOcWQ" type="_NqzVSGEIEdqmfMQqVJOcWQ" association="_Nq8fGmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nq8fHmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nq8fH2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nq8fIGEIEdqmfMQqVJOcWQ" name="A_interfaceRealization_implementingClassifier" memberEnd="_NqzVV2EIEdqmfMQqVJOcWQ _NqzVT2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nq8fIWEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_Nq8fImEIEdqmfMQqVJOcWQ" general="_NqzVKmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nq8fJGEIEdqmfMQqVJOcWQ" name="A_nestedClassifier_interface" memberEnd="_NqzVPmEIEdqmfMQqVJOcWQ _Nq8fJ2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nq8fJWEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_Nq8fJmEIEdqmfMQqVJOcWQ" general="_NkPaKmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nq8fJ2EIEdqmfMQqVJOcWQ" type="_NqzVLGEIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ _NiwMaWEIEdqmfMQqVJOcWQ" association="_Nq8fJGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nq8fKGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nq8fKWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nq8fKmEIEdqmfMQqVJOcWQ" name="A_interface_redefinedInterface" memberEnd="_NqzVRGEIEdqmfMQqVJOcWQ _Nq8fLGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nq8fK2EIEdqmfMQqVJOcWQ" general="_NkPaLGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nq8fLGEIEdqmfMQqVJOcWQ" type="_NqzVLGEIEdqmfMQqVJOcWQ" association="_Nq8fKmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nq8fLWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nq8fLmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NrGQLGEIEdqmfMQqVJOcWQ" name="StructuredClassifier" isAbstract="true">
    <ownedComment xmi:id="_NrGQLWEIEdqmfMQqVJOcWQ" annotatedElement="_NrGQLGEIEdqmfMQqVJOcWQ">
      <body>A structured classifier is an abstract metaclass that represents any classifier whose behavior can be fully or partly described by the collaboration of owned or referenced instances.</body>
    </ownedComment>
    <ownedRule xmi:id="_NrGQLmEIEdqmfMQqVJOcWQ" name="multiplicities" constrainedElement="_NrGQLGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrGQL2EIEdqmfMQqVJOcWQ" annotatedElement="_NrGQLmEIEdqmfMQqVJOcWQ">
        <body>The multiplicities on connected elements must be consistent.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NrGQMGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NrGQMWEIEdqmfMQqVJOcWQ" general="_NiTgcGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NrGQMmEIEdqmfMQqVJOcWQ" name="ownedAttribute" type="_Ni59sGEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NrGQPmEIEdqmfMQqVJOcWQ _NimbtWEIEdqmfMQqVJOcWQ _NiTgemEIEdqmfMQqVJOcWQ" association="_NrQBFGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NrGQM2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NrGQNGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NrGQNWEIEdqmfMQqVJOcWQ" annotatedElement="_NrGQMmEIEdqmfMQqVJOcWQ">
        <body>References the properties owned by the classifier.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrGQNmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrGQN2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrGQOGEIEdqmfMQqVJOcWQ" name="part" type="_Ni59sGEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" association="_NrQBG2EIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NrGQOWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NrGQOmEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NrGQO2EIEdqmfMQqVJOcWQ" annotatedElement="_NrGQOGEIEdqmfMQqVJOcWQ">
        <body>References the properties specifying instances that the classifier owns by composition. This association is derived, selecting those owned properties where isComposite is true.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrGQPGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrGQPWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrGQPmEIEdqmfMQqVJOcWQ" name="role" type="_NrGQSmEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" isDerivedUnion="true" subsettedProperty="_Nimbu2EIEdqmfMQqVJOcWQ" association="_NrQBH2EIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NrGQP2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NrGQQGEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NrGQQWEIEdqmfMQqVJOcWQ" annotatedElement="_NrGQPmEIEdqmfMQqVJOcWQ">
        <body>References the roles that instances may play in this classifier.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrGQQmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrGQQ2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrGQRGEIEdqmfMQqVJOcWQ" name="ownedConnector" type="_NrGQEGEIEdqmfMQqVJOcWQ" subsettedProperty="_NiTggGEIEdqmfMQqVJOcWQ _NimbtWEIEdqmfMQqVJOcWQ" association="_NrQBJGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NrGQRWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NrGQRmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NrGQR2EIEdqmfMQqVJOcWQ" annotatedElement="_NrGQRGEIEdqmfMQqVJOcWQ">
        <body>References the connectors owned by the classifier.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrGQSGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrGQSWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NrQBEGEIEdqmfMQqVJOcWQ" name="A_type_connector" memberEnd="_NrQBEWEIEdqmfMQqVJOcWQ _NrGQHGEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NrQBEWEIEdqmfMQqVJOcWQ" type="_NrGQEGEIEdqmfMQqVJOcWQ" association="_NrQBEGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrQBEmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrQBE2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NrQBFGEIEdqmfMQqVJOcWQ" name="A_ownedAttribute_structuredClassifier" memberEnd="_NrGQMmEIEdqmfMQqVJOcWQ _NrQBGGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NrQBFWEIEdqmfMQqVJOcWQ" general="_NrQBH2EIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NrQBFmEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NrQBF2EIEdqmfMQqVJOcWQ" general="_NjyuPWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NrQBGGEIEdqmfMQqVJOcWQ" type="_NrGQLGEIEdqmfMQqVJOcWQ" redefinedProperty="_NrQBIWEIEdqmfMQqVJOcWQ" association="_NrQBFGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrQBGWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrQBGmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NrQBG2EIEdqmfMQqVJOcWQ" name="A_part_structuredClassifier" memberEnd="_NrGQOGEIEdqmfMQqVJOcWQ _NrQBHGEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NrQBHGEIEdqmfMQqVJOcWQ" type="_NrGQLGEIEdqmfMQqVJOcWQ" association="_NrQBG2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrQBHWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrQBHmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NrQBH2EIEdqmfMQqVJOcWQ" name="A_role_structuredClassifier" memberEnd="_NrGQPmEIEdqmfMQqVJOcWQ _NrQBIWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NrQBIGEIEdqmfMQqVJOcWQ" general="_NkZLJWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NrQBIWEIEdqmfMQqVJOcWQ" type="_NrGQLGEIEdqmfMQqVJOcWQ" association="_NrQBH2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrQBImEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrQBI2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NrQBJGEIEdqmfMQqVJOcWQ" name="A_ownedConnector_structuredClassifier" memberEnd="_NrGQRGEIEdqmfMQqVJOcWQ _NrQBKGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NrQBJWEIEdqmfMQqVJOcWQ" general="_NkPaLmEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NrQBJmEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NrQBJ2EIEdqmfMQqVJOcWQ" general="_NkPaKmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NrQBKGEIEdqmfMQqVJOcWQ" type="_NrGQLGEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMaWEIEdqmfMQqVJOcWQ" association="_NrQBJGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrQBKWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrQBKmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NrQBK2EIEdqmfMQqVJOcWQ" name="A_redefinedConnector_connector" memberEnd="_NrQBLWEIEdqmfMQqVJOcWQ _NrGQIGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NrQBLGEIEdqmfMQqVJOcWQ" general="_NkPaLGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NrQBLWEIEdqmfMQqVJOcWQ" type="_NrGQEGEIEdqmfMQqVJOcWQ" association="_NrQBK2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrQBLmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrQBL2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NrQBMGEIEdqmfMQqVJOcWQ" name="A_end_connector" memberEnd="_NrGQJGEIEdqmfMQqVJOcWQ _NrQBMmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NrQBMWEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NrQBMmEIEdqmfMQqVJOcWQ" type="_NrGQEGEIEdqmfMQqVJOcWQ" association="_NrQBMGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrQBM2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrQBNGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NrQBNWEIEdqmfMQqVJOcWQ" name="A_definingEnd_connectorEnd" memberEnd="_Nq8fNWEIEdqmfMQqVJOcWQ _NrQBNmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NrQBNmEIEdqmfMQqVJOcWQ" type="_Nq8fL2EIEdqmfMQqVJOcWQ" association="_NrQBNWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrQBN2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrQBOGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NrQBOWEIEdqmfMQqVJOcWQ" name="A_end_role" memberEnd="_NrGQTWEIEdqmfMQqVJOcWQ _Nq8fO2EIEdqmfMQqVJOcWQ"/>
  <ownedMember xmi:type="uml:Association" xmi:id="_NjyuPWEIEdqmfMQqVJOcWQ" name="A_attribute_classifier" memberEnd="_NiTgemEIEdqmfMQqVJOcWQ _NjyuQGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NjyuPmEIEdqmfMQqVJOcWQ" general="_NkPaLmEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NjyuP2EIEdqmfMQqVJOcWQ" general="_NkPaKmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NjyuQGEIEdqmfMQqVJOcWQ" name="classifier" type="_NiTgcGEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMaWEIEdqmfMQqVJOcWQ" association="_NjyuPWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrQBOmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrQBO2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NrZLOGEIEdqmfMQqVJOcWQ" name="Message">
    <ownedComment xmi:id="_NrZLOWEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLOGEIEdqmfMQqVJOcWQ">
      <body>A Message is a NamedElement that defines a particular communication between Lifelines of an Interaction. A communication can be e.g. raising a signal, invoking an Operation, creating or destroying an Instance. The Message specifies not only the kind of communication given by the dispatching ExecutionSpecification, but also the sender and the receiver. A Message associates normally two OccurrenceSpecifications - one sending OccurrenceSpecification and one receiving OccurrenceSpecification.

</body>
    </ownedComment>
    <ownedRule xmi:id="_NrZLOmEIEdqmfMQqVJOcWQ" name="sending_receiving_message_event" constrainedElement="_NrZLOGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLO2EIEdqmfMQqVJOcWQ" annotatedElement="_NrZLOmEIEdqmfMQqVJOcWQ">
        <body>If the sending MessageEvent and the receiving MessageEvent of the same Message are on the same Lifeline, the sending MessageEvent must be ordered before the receiving MessageEvent.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NrZLPGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NrZLPWEIEdqmfMQqVJOcWQ" name="signature_refer_to" constrainedElement="_NrZLOGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLPmEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLPWEIEdqmfMQqVJOcWQ">
        <body>The signature must either refer an Operation (in which case messageSort is either synchCall or asynchCall) or a Signal (in which case messageSort is asynchSignal). The name of the NamedElement referenced by signature must be the same as that of the Message.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NrZLP2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NrZLQGEIEdqmfMQqVJOcWQ" name="signature_is_operation" constrainedElement="_NrZLOGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLQWEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLQGEIEdqmfMQqVJOcWQ">
        <body>In the case when the Message signature is an Operation, the arguments of the Message must correspond to the parameters of the Operation. A Parameter corresponds to an Argument if the Argument is of the same Class or a specialization of that of the Parameter.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NrZLQmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NrZLQ2EIEdqmfMQqVJOcWQ" name="signature_is_signal" constrainedElement="_NrZLOGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLRGEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLQ2EIEdqmfMQqVJOcWQ">
        <body>In the case when the Message signature is a Signal, the arguments of the Message must correspond to the attributes of the Signal. A Message Argument corresponds to a Signal Attribute if the Arguement is of the same Class or a specialization of that of the Attribute.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NrZLRWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NrZLRmEIEdqmfMQqVJOcWQ" name="arguments" constrainedElement="_NrZLOGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLR2EIEdqmfMQqVJOcWQ" annotatedElement="_NrZLRmEIEdqmfMQqVJOcWQ">
        <body>Arguments of a Message must only be:
i) attributes of the sending lifeline
ii) constants
iii) symbolic values (which are wildcard values representing any legal value)
iv) explicit parameters of the enclosing Interaction
v) attributes of the class owning the Interaction
</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NrZLSGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NrZLSWEIEdqmfMQqVJOcWQ" name="cannot_cross_boundaries" constrainedElement="_NrZLOGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLSmEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLSWEIEdqmfMQqVJOcWQ">
        <body>Messages cannot cross bounderies of CombinedFragments or their operands.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NrZLS2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NrZLTGEIEdqmfMQqVJOcWQ" name="occurrence_specifications" constrainedElement="_NrZLOGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLTWEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLTGEIEdqmfMQqVJOcWQ">
        <body>If the MessageEnds are both OccurrenceSpecifications then the connector must go between the Parts represented by the Lifelines of the two MessageEnds.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NrZLTmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NrZLT2EIEdqmfMQqVJOcWQ" general="_NjfzQGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NrZLUGEIEdqmfMQqVJOcWQ" name="messageKind" type="_Nri8B2EIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true">
      <eAnnotations xmi:id="_NrZLUWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NrZLUmEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NrZLU2EIEdqmfMQqVJOcWQ" annotatedElement="_NrZLUGEIEdqmfMQqVJOcWQ">
        <body>The derived kind of the Message (complete, lost, found or unknown)</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrZLVGEIEdqmfMQqVJOcWQ" name="messageSort" type="_Nri8HmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NrZLVWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NrZLVmEIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NrZLV2EIEdqmfMQqVJOcWQ" annotatedElement="_NrZLVGEIEdqmfMQqVJOcWQ">
        <body>The sort of communication reflected by the Message</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrZLWGEIEdqmfMQqVJOcWQ" name="receiveEvent" type="_Nri8AGEIEdqmfMQqVJOcWQ" association="_NrsGIWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLWWEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLWGEIEdqmfMQqVJOcWQ">
        <body>References the Receiving of the Message</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLWmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLW2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrZLXGEIEdqmfMQqVJOcWQ" name="sendEvent" type="_Nri8AGEIEdqmfMQqVJOcWQ" association="_NrsGJWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLXWEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLXGEIEdqmfMQqVJOcWQ">
        <body>References the Sending of the Message.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLXmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLX2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrZLYGEIEdqmfMQqVJOcWQ" name="connector" type="_NrGQEGEIEdqmfMQqVJOcWQ" association="_Nr129WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLYWEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLYGEIEdqmfMQqVJOcWQ">
        <body>The Connector on which this Message is sent.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLYmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLY2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrZLZGEIEdqmfMQqVJOcWQ" name="interaction" type="_NrQBPGEIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ" association="_Nr12-WEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NrZLZWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NrZLZmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NrZLZ2EIEdqmfMQqVJOcWQ" annotatedElement="_NrZLZGEIEdqmfMQqVJOcWQ">
        <body>The enclosing Interaction owning the Message</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLaGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLaWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrZLamEIEdqmfMQqVJOcWQ" name="argument" type="_NiwMlmEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_Nr12_WEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NrZLa2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NrZLbGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NrZLbWEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLamEIEdqmfMQqVJOcWQ">
        <body>The arguments of the Message</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLbmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLb2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrZLcGEIEdqmfMQqVJOcWQ" name="signature" type="_NjfzQGEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" association="_Nr_n8GEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NrZLcWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NrZLcmEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NrZLc2EIEdqmfMQqVJOcWQ" annotatedElement="_NrZLcGEIEdqmfMQqVJOcWQ">
        <body>The definition of the type or signature of the Message (depending on its kind). The associated named element is derived from the message end that constitutes the sending or receiving message event. If both a sending event and a receiving message event are present, the signature is obtained from the sending event.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLdGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLdWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NrZLdmEIEdqmfMQqVJOcWQ" name="getMessageKind" visibility="protected" type="_Nri8B2EIEdqmfMQqVJOcWQ">
      <returnResult xmi:id="_NrZLd2EIEdqmfMQqVJOcWQ" type="_Nri8B2EIEdqmfMQqVJOcWQ" direction="return"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NrZLeGEIEdqmfMQqVJOcWQ" name="getSignature" visibility="protected" type="_NjfzQGEIEdqmfMQqVJOcWQ">
      <returnResult xmi:id="_NrZLeWEIEdqmfMQqVJOcWQ" type="_NjfzQGEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLemEIEdqmfMQqVJOcWQ" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLe2EIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NrZLfGEIEdqmfMQqVJOcWQ" name="GeneralOrdering">
    <ownedComment xmi:id="_NrZLfWEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLfGEIEdqmfMQqVJOcWQ">
      <body>A GeneralOrdering represents a binary relation between two OccurrenceSpecifications, to describe that one OccurrenceSpecification must occur before the other in a valid trace. This mechanism provides the ability to define partial orders of OccurrenceSpecifications that may otherwise not have a specified order. A GeneralOrdering is a specialization of NamedElement.</body>
    </ownedComment>
    <generalization xmi:id="_NrZLfmEIEdqmfMQqVJOcWQ" general="_NjfzQGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NrZLf2EIEdqmfMQqVJOcWQ" name="before" type="_NrZLlWEIEdqmfMQqVJOcWQ" association="_Nr12-2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLgGEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLf2EIEdqmfMQqVJOcWQ">
        <body>The OccurrenceSpecification referenced comes before the OccurrenceSpecification referenced by after.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLgWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLgmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrZLg2EIEdqmfMQqVJOcWQ" name="after" type="_NrZLlWEIEdqmfMQqVJOcWQ" association="_Nr12_GEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLhGEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLg2EIEdqmfMQqVJOcWQ">
        <body>The OccurrenceSpecification referenced comes after the OccurrenceSpecification referenced by before.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLhWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLhmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NrZLh2EIEdqmfMQqVJOcWQ" name="ExecutionSpecification" isAbstract="true">
    <ownedComment xmi:id="_NrZLiGEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLh2EIEdqmfMQqVJOcWQ">
      <body>An ExecutionSpecification is a specification of the execution of a unit of behavior or action within the Lifeline. The duration of an ExecutionSpecification is represented by two ExecutionOccurrenceSpecifications, the start ExecutionOccurrenceSpecification and the finish ExecutionOccurrenceSpecification.</body>
    </ownedComment>
    <ownedRule xmi:id="_NrZLiWEIEdqmfMQqVJOcWQ" name="same_lifeline" constrainedElement="_NrZLh2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLimEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLiWEIEdqmfMQqVJOcWQ">
        <body>The startEvent and the finishEvent must be on the same Lifeline</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NrZLi2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>start.lifeline = finish.lifeline</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NrZLjGEIEdqmfMQqVJOcWQ" general="_NrZLJWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NrZLjWEIEdqmfMQqVJOcWQ" name="start" type="_NrsGA2EIEdqmfMQqVJOcWQ" association="_NrsGEGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLjmEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLjWEIEdqmfMQqVJOcWQ">
        <body>References the OccurrenceSpecification that designates the start of the Action or Behavior</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLj2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLkGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrZLkWEIEdqmfMQqVJOcWQ" name="finish" type="_NrsGA2EIEdqmfMQqVJOcWQ" association="_NrsGFWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLkmEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLkWEIEdqmfMQqVJOcWQ">
        <body>References the OccurrenceSpecification that designates the finish of the Action or Behavior.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLk2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLlGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NrZLlWEIEdqmfMQqVJOcWQ" name="OccurrenceSpecification" isAbstract="true">
    <ownedComment xmi:id="_NrZLlmEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLlWEIEdqmfMQqVJOcWQ">
      <body>An OccurrenceSpecification is the basic semantic unit of Interactions. The sequences of occurrences specified by them are the meanings of Interactions.

OccurrenceSpecifications are ordered along a Lifeline.

The namespace of an OccurrenceSpecification is the Interaction in which it is contained.

</body>
    </ownedComment>
    <generalization xmi:id="_NrZLl2EIEdqmfMQqVJOcWQ" general="_NrZLJWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NrZLmGEIEdqmfMQqVJOcWQ" name="covered" type="_NrZLBmEIEdqmfMQqVJOcWQ" redefinedProperty="_NrZLKGEIEdqmfMQqVJOcWQ" association="_NrsGKWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLmWEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLmGEIEdqmfMQqVJOcWQ">
        <body>References the Lifeline on which the OccurrenceSpecification appears.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLmmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLm2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrZLnGEIEdqmfMQqVJOcWQ" name="toAfter" type="_NrZLfGEIEdqmfMQqVJOcWQ" association="_Nr12-2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLnWEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLnGEIEdqmfMQqVJOcWQ">
        <body>References the GeneralOrderings that specify EventOcurrences that must occur after this OccurrenceSpecification

</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLnmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLn2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrZLoGEIEdqmfMQqVJOcWQ" name="toBefore" type="_NrZLfGEIEdqmfMQqVJOcWQ" association="_Nr12_GEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLoWEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLoGEIEdqmfMQqVJOcWQ">
        <body>References the GeneralOrderings that specify EventOcurrences that must occur before this OccurrenceSpecification

</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLomEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLo2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrZLpGEIEdqmfMQqVJOcWQ" name="event" type="_Ns4YyWEIEdqmfMQqVJOcWQ" association="_Nr_oA2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLpWEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLpGEIEdqmfMQqVJOcWQ">
        <body>References a specification of the occurring event.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLpmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLp2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nri8AGEIEdqmfMQqVJOcWQ" name="MessageEnd" isAbstract="true">
    <ownedComment xmi:id="_Nri8AWEIEdqmfMQqVJOcWQ" annotatedElement="_Nri8AGEIEdqmfMQqVJOcWQ">
      <body>A MessageEnd is an abstract NamedElement that represents what can occur at the end of a Message.</body>
    </ownedComment>
    <generalization xmi:id="_Nri8AmEIEdqmfMQqVJOcWQ" general="_NjfzQGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nri8A2EIEdqmfMQqVJOcWQ" name="message" type="_NrZLOGEIEdqmfMQqVJOcWQ" association="_Nr_n-mEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nri8BGEIEdqmfMQqVJOcWQ" annotatedElement="_Nri8A2EIEdqmfMQqVJOcWQ">
        <body>References a Message.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nri8BWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nri8BmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Enumeration" xmi:id="_Nri8B2EIEdqmfMQqVJOcWQ" name="MessageKind">
    <ownedComment xmi:id="_Nri8CGEIEdqmfMQqVJOcWQ" annotatedElement="_Nri8B2EIEdqmfMQqVJOcWQ">
      <body>MessageKind is an enumeration of the following values:

- complete = sendEvent and receiveEvent are present

- lost = sendEvent present and receiveEvent absent

- found = sendEvent absent and receiveEvent present

- unknown = sendEvent and receiveEvent absent (should not appear)</body>
    </ownedComment>
    <ownedLiteral xmi:id="_Nri8CWEIEdqmfMQqVJOcWQ" name="complete">
      <ownedComment xmi:id="_Nri8CmEIEdqmfMQqVJOcWQ" annotatedElement="_Nri8CWEIEdqmfMQqVJOcWQ">
        <body>sendEvent and receiveEvent are present</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_Nri8C2EIEdqmfMQqVJOcWQ" name="lost">
      <ownedComment xmi:id="_Nri8DGEIEdqmfMQqVJOcWQ" annotatedElement="_Nri8C2EIEdqmfMQqVJOcWQ">
        <body>sendEvent present and receiveEvent absent</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_Nri8DWEIEdqmfMQqVJOcWQ" name="found">
      <ownedComment xmi:id="_Nri8DmEIEdqmfMQqVJOcWQ" annotatedElement="_Nri8DWEIEdqmfMQqVJOcWQ">
        <body>sendEvent absent and receiveEvent present</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_Nri8D2EIEdqmfMQqVJOcWQ" name="unknown">
      <ownedComment xmi:id="_Nri8EGEIEdqmfMQqVJOcWQ" annotatedElement="_Nri8D2EIEdqmfMQqVJOcWQ">
        <body>sendEvent and receiveEvent absent (should not appear)</body>
      </ownedComment>
    </ownedLiteral>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nri8EWEIEdqmfMQqVJOcWQ" name="StateInvariant">
    <ownedComment xmi:id="_Nri8EmEIEdqmfMQqVJOcWQ" annotatedElement="_Nri8EWEIEdqmfMQqVJOcWQ">
      <body>A StateInvariant is a runtime constraint on the participants of the interaction. It may be used to specify a variety of different kinds of constraints, such as values of attributes or variables, internal or external states, and so on. A StateInvariant is an InteractionFragment and it is placed on a Lifeline.</body>
    </ownedComment>
    <generalization xmi:id="_Nri8E2EIEdqmfMQqVJOcWQ" general="_NrZLJWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nri8FGEIEdqmfMQqVJOcWQ" name="invariant" type="_NjDHfmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_Nr13AmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nri8FWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nri8FmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nri8F2EIEdqmfMQqVJOcWQ" annotatedElement="_Nri8FGEIEdqmfMQqVJOcWQ">
        <body>A Constraint that should hold at runtime for this StateInvariant</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nri8GGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nri8GWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nri8GmEIEdqmfMQqVJOcWQ" name="covered" type="_NrZLBmEIEdqmfMQqVJOcWQ" redefinedProperty="_NrZLKGEIEdqmfMQqVJOcWQ" association="_Nr13BWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nri8G2EIEdqmfMQqVJOcWQ" annotatedElement="_Nri8GmEIEdqmfMQqVJOcWQ">
        <body>References the Lifeline on which the StateInvariant appears.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nri8HGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nri8HWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Enumeration" xmi:id="_Nri8HmEIEdqmfMQqVJOcWQ" name="MessageSort">
    <ownedComment xmi:id="_Nri8H2EIEdqmfMQqVJOcWQ" annotatedElement="_Nri8HmEIEdqmfMQqVJOcWQ">
      <body>MessageSort is an enumeration of the following values:
 synchCall - the message was generated by a synchronous call to an operation
 asynchCall - the message was generated by an asynchronous call to an operation; i.e., a CallAction with isSynchronous= false
 asynchSignal -the message was generated by an asynchronous send action
</body>
    </ownedComment>
    <ownedLiteral xmi:id="_Nri8IGEIEdqmfMQqVJOcWQ" name="synchCall">
      <ownedComment xmi:id="_Nri8IWEIEdqmfMQqVJOcWQ" annotatedElement="_Nri8IGEIEdqmfMQqVJOcWQ">
        <body>The message was generated by a synchronous call to an operation</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_Nri8ImEIEdqmfMQqVJOcWQ" name="asynchCall">
      <ownedComment xmi:id="_Nri8I2EIEdqmfMQqVJOcWQ" annotatedElement="_Nri8ImEIEdqmfMQqVJOcWQ">
        <body>The message was generated by an asynchronous call to an operation; i.e., a CallAction with isSynchronous
= false
</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_Nri8JGEIEdqmfMQqVJOcWQ" name="asynchSignal">
      <ownedComment xmi:id="_Nri8JWEIEdqmfMQqVJOcWQ" annotatedElement="_Nri8JGEIEdqmfMQqVJOcWQ">
        <body>The message was generated by an asynchronous send action</body>
      </ownedComment>
    </ownedLiteral>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nri8JmEIEdqmfMQqVJOcWQ" name="ActionExecutionSpecification">
    <ownedComment xmi:id="_Nri8J2EIEdqmfMQqVJOcWQ" annotatedElement="_Nri8JmEIEdqmfMQqVJOcWQ">
      <body>ActionExecutionSpecification is a kind of ExecutionSpecification representing the execution of an action.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nri8KGEIEdqmfMQqVJOcWQ" name="action_referenced" constrainedElement="_Nri8JmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nri8KWEIEdqmfMQqVJOcWQ" annotatedElement="_Nri8KGEIEdqmfMQqVJOcWQ">
        <body>The Action referenced by the ActionExecutionSpecification, if any, must be owned by the Interaction owning the ActionExecutionOccurrence.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nri8KmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nri8K2EIEdqmfMQqVJOcWQ" general="_NrZLh2EIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nri8LGEIEdqmfMQqVJOcWQ" name="action" type="_NvH0cGEIEdqmfMQqVJOcWQ" association="_Nr13FWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nri8LWEIEdqmfMQqVJOcWQ" annotatedElement="_Nri8LGEIEdqmfMQqVJOcWQ">
        <body>Action whose execution is occurring.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nri8LmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nri8L2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nri8MGEIEdqmfMQqVJOcWQ" name="BehaviorExecutionSpecification">
    <ownedComment xmi:id="_Nri8MWEIEdqmfMQqVJOcWQ" annotatedElement="_Nri8MGEIEdqmfMQqVJOcWQ">
      <body>BehaviorExecutionSpecification is a kind of ExecutionSpecification representing the execution of a behavior.</body>
    </ownedComment>
    <generalization xmi:id="_Nri8MmEIEdqmfMQqVJOcWQ" general="_NrZLh2EIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nri8M2EIEdqmfMQqVJOcWQ" name="behavior" type="_NqDuQGEIEdqmfMQqVJOcWQ" association="_Nr13E2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nri8NGEIEdqmfMQqVJOcWQ" annotatedElement="_Nri8M2EIEdqmfMQqVJOcWQ">
        <body>Behavior whose execution is occurring.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nri8NWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nri8NmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nri8N2EIEdqmfMQqVJOcWQ" name="ExecutionEvent">
    <ownedComment xmi:id="_Nri8OGEIEdqmfMQqVJOcWQ" annotatedElement="_Nri8N2EIEdqmfMQqVJOcWQ">
      <body>An ExecutionEvent models the start or finish of an execution occurrence.</body>
    </ownedComment>
    <generalization xmi:id="_Nri8OWEIEdqmfMQqVJOcWQ" general="_Ns4YyWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nri8OmEIEdqmfMQqVJOcWQ" name="CreationEvent">
    <ownedComment xmi:id="_Nri8O2EIEdqmfMQqVJOcWQ" annotatedElement="_Nri8OmEIEdqmfMQqVJOcWQ">
      <body>A CreationEvent models the creation of an object.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nri8PGEIEdqmfMQqVJOcWQ" name="no_occurrence_above" constrainedElement="_Nri8OmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nri8PWEIEdqmfMQqVJOcWQ" annotatedElement="_Nri8PGEIEdqmfMQqVJOcWQ">
        <body>No othet OccurrenceSpecification may appear above an OccurrenceSpecification which references a CreationEvent on a given Lifeline in an InteractionOperand.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nri8PmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nri8P2EIEdqmfMQqVJOcWQ" general="_Ns4YyWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nri8QGEIEdqmfMQqVJOcWQ" name="DestructionEvent">
    <ownedComment xmi:id="_Nri8QWEIEdqmfMQqVJOcWQ" annotatedElement="_Nri8QGEIEdqmfMQqVJOcWQ">
      <body>A DestructionEvent models the destruction of an object.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nri8QmEIEdqmfMQqVJOcWQ" name="no_occurrence_specifications_below" constrainedElement="_Nri8QGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nri8Q2EIEdqmfMQqVJOcWQ" annotatedElement="_Nri8QmEIEdqmfMQqVJOcWQ">
        <body>No other OccurrenceSpecifications may appear below an OccurrenceSpecification which references a DestructionEvent on a given Lifeline in an InteractionOperand.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nri8RGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nri8RWEIEdqmfMQqVJOcWQ" general="_Ns4YyWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nri8RmEIEdqmfMQqVJOcWQ" name="SendOperationEvent">
    <ownedComment xmi:id="_Nri8R2EIEdqmfMQqVJOcWQ" annotatedElement="_Nri8RmEIEdqmfMQqVJOcWQ">
      <body>A SendOperationEvent models the invocation of an operation call.</body>
    </ownedComment>
    <generalization xmi:id="_Nri8SGEIEdqmfMQqVJOcWQ" general="_NsvPFmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NrsF8GEIEdqmfMQqVJOcWQ" name="operation" type="_NjM4UGEIEdqmfMQqVJOcWQ" association="_Nr_n8mEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrsF8WEIEdqmfMQqVJOcWQ" annotatedElement="_NrsF8GEIEdqmfMQqVJOcWQ">
        <body>The operation associated with this event.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrsF8mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrsF82EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NrsF9GEIEdqmfMQqVJOcWQ" name="SendSignalEvent">
    <ownedComment xmi:id="_NrsF9WEIEdqmfMQqVJOcWQ" annotatedElement="_NrsF9GEIEdqmfMQqVJOcWQ">
      <body>A SendSignalEvent models the sending of a signal.</body>
    </ownedComment>
    <generalization xmi:id="_NrsF9mEIEdqmfMQqVJOcWQ" general="_NsvPFmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NrsF92EIEdqmfMQqVJOcWQ" name="signal" type="_NsvO82EIEdqmfMQqVJOcWQ" association="_Nr_n9mEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrsF-GEIEdqmfMQqVJOcWQ" annotatedElement="_NrsF92EIEdqmfMQqVJOcWQ">
        <body>The signal associated with this event.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrsF-WEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrsF-mEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NrsF-2EIEdqmfMQqVJOcWQ" name="MessageOccurrenceSpecification">
    <ownedComment xmi:id="_NrsF_GEIEdqmfMQqVJOcWQ" annotatedElement="_NrsF-2EIEdqmfMQqVJOcWQ">
      <body>Specifies the occurrence of message events, such as sending and receiving of signals or invoking or receiving of operation calls. A message occurrence specification is a kind of message end. Messages are generated either by synchronous operation calls or asynchronous signal sends. They are received by the execution of corresponding accept event actions.</body>
    </ownedComment>
    <generalization xmi:id="_NrsF_WEIEdqmfMQqVJOcWQ" general="_Nri8AGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NrsF_mEIEdqmfMQqVJOcWQ" general="_NrZLlWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NrsF_2EIEdqmfMQqVJOcWQ" name="event" type="_NsvPFmEIEdqmfMQqVJOcWQ" redefinedProperty="_NrZLpGEIEdqmfMQqVJOcWQ" association="_Nr_n_mEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrsGAGEIEdqmfMQqVJOcWQ" annotatedElement="_NrsF_2EIEdqmfMQqVJOcWQ">
        <body>Redefines the event referenced to be restricted to a message event.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrsGAWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrsGAmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NrsGA2EIEdqmfMQqVJOcWQ" name="ExecutionOccurrenceSpecification">
    <ownedComment xmi:id="_NrsGBGEIEdqmfMQqVJOcWQ" annotatedElement="_NrsGA2EIEdqmfMQqVJOcWQ">
      <body>An ExecutionOccurrenceSpecification represents moments in time at which actions or behaviors start or finish.</body>
    </ownedComment>
    <generalization xmi:id="_NrsGBWEIEdqmfMQqVJOcWQ" general="_NrZLlWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NrsGBmEIEdqmfMQqVJOcWQ" name="execution" type="_NrZLh2EIEdqmfMQqVJOcWQ" association="_Nr_oDGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrsGB2EIEdqmfMQqVJOcWQ" annotatedElement="_NrsGBmEIEdqmfMQqVJOcWQ">
        <body>References the execution specification describing the execution that is started or finished at this execution event.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrsGCGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrsGCWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrsGCmEIEdqmfMQqVJOcWQ" name="event" type="_Nri8N2EIEdqmfMQqVJOcWQ" redefinedProperty="_NrZLpGEIEdqmfMQqVJOcWQ" association="_NsIx4GEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrsGC2EIEdqmfMQqVJOcWQ" annotatedElement="_NrsGCmEIEdqmfMQqVJOcWQ">
        <body>Redefines the event referenced to be restricted to an execution event.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrsGDGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrsGDWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NrsGDmEIEdqmfMQqVJOcWQ" name="A_covered_coveredBy" memberEnd="_NrZLEmEIEdqmfMQqVJOcWQ _NrZLKGEIEdqmfMQqVJOcWQ">
    <ownedComment xmi:id="_NrsGD2EIEdqmfMQqVJOcWQ" annotatedElement="_NrsGDmEIEdqmfMQqVJOcWQ">
      <body>This association shows the lifelines that make up an interaction. A lifeline may be part of more than one interaction use.</body>
    </ownedComment>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NrsGEGEIEdqmfMQqVJOcWQ" name="A_executionSpecification_start" memberEnd="_NrsGEmEIEdqmfMQqVJOcWQ _NrZLjWEIEdqmfMQqVJOcWQ">
    <ownedComment xmi:id="_NrsGEWEIEdqmfMQqVJOcWQ" annotatedElement="_NrsGEGEIEdqmfMQqVJOcWQ">
      <body>The event shows the time point at which the action begins execution.</body>
    </ownedComment>
    <ownedEnd xmi:id="_NrsGEmEIEdqmfMQqVJOcWQ" type="_NrZLh2EIEdqmfMQqVJOcWQ" association="_NrsGEGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrsGE2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrsGFGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NrsGFWEIEdqmfMQqVJOcWQ" name="A_executionSpecification_finish" memberEnd="_NrsGF2EIEdqmfMQqVJOcWQ _NrZLkWEIEdqmfMQqVJOcWQ">
    <ownedComment xmi:id="_NrsGFmEIEdqmfMQqVJOcWQ" annotatedElement="_NrsGFWEIEdqmfMQqVJOcWQ">
      <body>The event shows the time point at which the action completes execution.</body>
    </ownedComment>
    <ownedEnd xmi:id="_NrsGF2EIEdqmfMQqVJOcWQ" type="_NrZLh2EIEdqmfMQqVJOcWQ" association="_NrsGFWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrsGGGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrsGGWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NrsGGmEIEdqmfMQqVJOcWQ" name="A_lifeline_represents" memberEnd="_NrsGHGEIEdqmfMQqVJOcWQ _NrZLFWEIEdqmfMQqVJOcWQ">
    <ownedComment xmi:id="_NrsGG2EIEdqmfMQqVJOcWQ" annotatedElement="_NrsGGmEIEdqmfMQqVJOcWQ">
      <body>If a Part has multiplicity, multiple lifelines might be used to show it.</body>
    </ownedComment>
    <ownedEnd xmi:id="_NrsGHGEIEdqmfMQqVJOcWQ" type="_NrZLBmEIEdqmfMQqVJOcWQ" association="_NrsGGmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrsGHWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrsGHmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NrsGH2EIEdqmfMQqVJOcWQ" name="A_lifeline_interaction" memberEnd="_NrQBQGEIEdqmfMQqVJOcWQ _NrZLGWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NrsGIGEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NrsGIWEIEdqmfMQqVJOcWQ" name="A_receiveEvent_message" memberEnd="_NrZLWGEIEdqmfMQqVJOcWQ _NrsGImEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NrsGImEIEdqmfMQqVJOcWQ" type="_NrZLOGEIEdqmfMQqVJOcWQ" association="_NrsGIWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrsGI2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrsGJGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NrsGJWEIEdqmfMQqVJOcWQ" name="A_sendEvent_message" memberEnd="_NrZLXGEIEdqmfMQqVJOcWQ _NrsGJmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NrsGJmEIEdqmfMQqVJOcWQ" type="_NrZLOGEIEdqmfMQqVJOcWQ" association="_NrsGJWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrsGJ2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrsGKGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NrsGKWEIEdqmfMQqVJOcWQ" name="A_events_covered" memberEnd="_NrZLmGEIEdqmfMQqVJOcWQ _NrsGK2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NrsGKmEIEdqmfMQqVJOcWQ" general="_NrsGDmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NrsGK2EIEdqmfMQqVJOcWQ" name="events" type="_NrZLlWEIEdqmfMQqVJOcWQ" isOrdered="true" association="_NrsGKWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrsGLGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrsGLWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nr128GEIEdqmfMQqVJOcWQ" name="A_selector_lifeline" memberEnd="_NrZLH2EIEdqmfMQqVJOcWQ _Nr128mEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nr128WEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nr128mEIEdqmfMQqVJOcWQ" type="_NrZLBmEIEdqmfMQqVJOcWQ" association="_Nr128GEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nr1282EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nr129GEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nr129WEIEdqmfMQqVJOcWQ" name="A_connector_message" memberEnd="_Nr129mEIEdqmfMQqVJOcWQ _NrZLYGEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nr129mEIEdqmfMQqVJOcWQ" type="_NrZLOGEIEdqmfMQqVJOcWQ" association="_Nr129WEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nr1292EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nr12-GEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nr12-WEIEdqmfMQqVJOcWQ" name="A_message_interaction" memberEnd="_NrZLZGEIEdqmfMQqVJOcWQ _NrQBRmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nr12-mEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nr12-2EIEdqmfMQqVJOcWQ" name="A_before_toAfter" memberEnd="_NrZLnGEIEdqmfMQqVJOcWQ _NrZLf2EIEdqmfMQqVJOcWQ"/>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nr12_GEIEdqmfMQqVJOcWQ" name="A_toBefore_after" memberEnd="_NrZLg2EIEdqmfMQqVJOcWQ _NrZLoGEIEdqmfMQqVJOcWQ"/>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nr12_WEIEdqmfMQqVJOcWQ" name="A_argument_message" memberEnd="_NrZLamEIEdqmfMQqVJOcWQ _Nr12_2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nr12_mEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nr12_2EIEdqmfMQqVJOcWQ" type="_NrZLOGEIEdqmfMQqVJOcWQ" association="_Nr12_WEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nr13AGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nr13AWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nr13AmEIEdqmfMQqVJOcWQ" name="A_invariant_stateInvariant" memberEnd="_Nri8FGEIEdqmfMQqVJOcWQ _Nr13BGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nr13A2EIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nr13BGEIEdqmfMQqVJOcWQ" type="_Nri8EWEIEdqmfMQqVJOcWQ" association="_Nr13AmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nr13BWEIEdqmfMQqVJOcWQ" name="A_stateInvariant_covered" memberEnd="_Nr13B2EIEdqmfMQqVJOcWQ _Nri8GmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nr13BmEIEdqmfMQqVJOcWQ" general="_NrsGDmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nr13B2EIEdqmfMQqVJOcWQ" name="stateInvariant" type="_Nri8EWEIEdqmfMQqVJOcWQ" association="_Nr13BWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nr13CGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nr13CWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nr13CmEIEdqmfMQqVJOcWQ" name="A_generalOrdering_interactionFragment" memberEnd="_Nr13DGEIEdqmfMQqVJOcWQ _NrZLLGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nr13C2EIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nr13DGEIEdqmfMQqVJOcWQ" type="_NrZLJWEIEdqmfMQqVJOcWQ" association="_Nr13CmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nr13DWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nr13DmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nr13D2EIEdqmfMQqVJOcWQ" name="A_enclosingInteraction_fragment" memberEnd="_NrZLMmEIEdqmfMQqVJOcWQ _NrQBTGEIEdqmfMQqVJOcWQ">
    <ownedRule xmi:id="_Nr13EGEIEdqmfMQqVJOcWQ" constrainedElement="_Nr13D2EIEdqmfMQqVJOcWQ">
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nr13EWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>ordered</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nr13EmEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nr13E2EIEdqmfMQqVJOcWQ" name="A_behavior_behaviorExecutionSpecification" memberEnd="_Nr13FGEIEdqmfMQqVJOcWQ _Nri8M2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nr13FGEIEdqmfMQqVJOcWQ" type="_Nri8MGEIEdqmfMQqVJOcWQ" association="_Nr13E2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nr13FWEIEdqmfMQqVJOcWQ" name="A_action_actionExecutionSpecification" memberEnd="_Nri8LGEIEdqmfMQqVJOcWQ _Nr13FmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nr13FmEIEdqmfMQqVJOcWQ" type="_Nri8JmEIEdqmfMQqVJOcWQ" association="_Nr13FWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nr13F2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nr13GGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nr_n8GEIEdqmfMQqVJOcWQ" name="A_signature_message" memberEnd="_NrZLcGEIEdqmfMQqVJOcWQ _Nr_n8WEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nr_n8WEIEdqmfMQqVJOcWQ" type="_NrZLOGEIEdqmfMQqVJOcWQ" association="_Nr_n8GEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nr_n8mEIEdqmfMQqVJOcWQ" name="A_operation_sendOperationEvent" memberEnd="_Nr_n82EIEdqmfMQqVJOcWQ _NrsF8GEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nr_n82EIEdqmfMQqVJOcWQ" type="_Nri8RmEIEdqmfMQqVJOcWQ" association="_Nr_n8mEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nr_n9GEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nr_n9WEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nr_n9mEIEdqmfMQqVJOcWQ" name="A_signal_sendSignalEvent" memberEnd="_NrsF92EIEdqmfMQqVJOcWQ _Nr_n92EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nr_n92EIEdqmfMQqVJOcWQ" type="_NrsF9GEIEdqmfMQqVJOcWQ" association="_Nr_n9mEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nr_n-GEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nr_n-WEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nr_n-mEIEdqmfMQqVJOcWQ" name="A_message_messageEnd" memberEnd="_Nri8A2EIEdqmfMQqVJOcWQ _Nr_n-2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nr_n-2EIEdqmfMQqVJOcWQ" type="_Nri8AGEIEdqmfMQqVJOcWQ" association="_Nr_n-mEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nr_n_GEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nr_n_WEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nr_n_mEIEdqmfMQqVJOcWQ" name="A_event_messageOccurrenceSpecification" memberEnd="_NrsF_2EIEdqmfMQqVJOcWQ _Nr_oAGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nr_n_2EIEdqmfMQqVJOcWQ" general="_Nr_oA2EIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nr_oAGEIEdqmfMQqVJOcWQ" type="_NrsF-2EIEdqmfMQqVJOcWQ" redefinedProperty="_Nr_oBGEIEdqmfMQqVJOcWQ" association="_Nr_n_mEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nr_oAWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nr_oAmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nr_oA2EIEdqmfMQqVJOcWQ" name="A_event_occurrenceSpecification" memberEnd="_NrZLpGEIEdqmfMQqVJOcWQ _Nr_oBGEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nr_oBGEIEdqmfMQqVJOcWQ" type="_NrZLlWEIEdqmfMQqVJOcWQ" association="_Nr_oA2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nr_oBWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nr_oBmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nr_oB2EIEdqmfMQqVJOcWQ" name="A_action_interaction" memberEnd="_Nr_oCWEIEdqmfMQqVJOcWQ _NrZLAGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nr_oCGEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nr_oCWEIEdqmfMQqVJOcWQ" type="_NrQBPGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_Nr_oB2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nr_oCmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nr_oC2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nr_oDGEIEdqmfMQqVJOcWQ" name="A_execution_executionOccurrenceSpecification" memberEnd="_NrsGBmEIEdqmfMQqVJOcWQ _Nr_oDWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nr_oDWEIEdqmfMQqVJOcWQ" type="_NrsGA2EIEdqmfMQqVJOcWQ" association="_Nr_oDGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nr_oDmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nr_oD2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NsIx4GEIEdqmfMQqVJOcWQ" name="A_event_executionOccurrenceSpecification" memberEnd="_NrsGCmEIEdqmfMQqVJOcWQ _NsIx4mEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NsIx4WEIEdqmfMQqVJOcWQ" general="_Nr_oA2EIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NsIx4mEIEdqmfMQqVJOcWQ" type="_NrsGA2EIEdqmfMQqVJOcWQ" redefinedProperty="_Nr_oBGEIEdqmfMQqVJOcWQ" association="_NsIx4GEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NsIx42EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsIx5GEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NsIx5WEIEdqmfMQqVJOcWQ" name="InteractionUse">
    <ownedComment xmi:id="_NsIx5mEIEdqmfMQqVJOcWQ" annotatedElement="_NsIx5WEIEdqmfMQqVJOcWQ">
      <body>An InteractionUse refers to an Interaction. The InteractionUse is a shorthand for copying the contents of the referred Interaction where the InteractionUse is. To be accurate the copying must take into account substituting parameters with arguments and connect the formal gates with the actual ones.



It is common to want to share portions of an interaction between several other interactions. An InteractionUse allows multiple interactions to reference an interaction that represents a common portion of their specification.

</body>
    </ownedComment>
    <ownedRule xmi:id="_NsIx52EIEdqmfMQqVJOcWQ" name="gates_match" constrainedElement="_NsIx5WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsIx6GEIEdqmfMQqVJOcWQ" annotatedElement="_NsIx52EIEdqmfMQqVJOcWQ">
        <body>Actual Gates of the InteractionUse must match Formal Gates of the referred Interaction. Gates match when their names are equal.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsIx6WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NsIx6mEIEdqmfMQqVJOcWQ" name="all_lifelines" constrainedElement="_NsIx5WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsIx62EIEdqmfMQqVJOcWQ" annotatedElement="_NsIx6mEIEdqmfMQqVJOcWQ">
        <body>The InteractionUse must cover all Lifelines of the enclosing Interaction which appear within the referred Interaction.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsIx7GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NsIx7WEIEdqmfMQqVJOcWQ" name="arguments_correspond_to_parameters" constrainedElement="_NsIx5WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsIx7mEIEdqmfMQqVJOcWQ" annotatedElement="_NsIx7WEIEdqmfMQqVJOcWQ">
        <body>The arguments of the InteractionUse must correspond to parameters of the referred Interaction</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsIx72EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NsIx8GEIEdqmfMQqVJOcWQ" name="arguments_are_constants" constrainedElement="_NsIx5WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsIx8WEIEdqmfMQqVJOcWQ" annotatedElement="_NsIx8GEIEdqmfMQqVJOcWQ">
        <body>The arguments must only be constants, parameters of the enclosing Interaction or attributes of the classifier owning the enclosing Interaction.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsIx8mEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NsIx82EIEdqmfMQqVJOcWQ" general="_NrZLJWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NsIx9GEIEdqmfMQqVJOcWQ" name="refersTo" type="_NrQBPGEIEdqmfMQqVJOcWQ" association="_NscT5WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsIx9WEIEdqmfMQqVJOcWQ" annotatedElement="_NsIx9GEIEdqmfMQqVJOcWQ">
        <body>Refers to the Interaction that defines its meaning</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NsIx9mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsIx92EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NsIx-GEIEdqmfMQqVJOcWQ" name="actualGate" type="_NsIyYWEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NscT7mEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NsIx-WEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NsIx-mEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NsIx-2EIEdqmfMQqVJOcWQ" annotatedElement="_NsIx-GEIEdqmfMQqVJOcWQ">
        <body>The actual gates of the InteractionUse</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NsIx_GEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsIx_WEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NsIx_mEIEdqmfMQqVJOcWQ" name="argument" type="_NvH0cGEIEdqmfMQqVJOcWQ" isOrdered="true" association="_NscT_mEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NsIx_2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NsIyAGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NsIyAWEIEdqmfMQqVJOcWQ" annotatedElement="_NsIx_mEIEdqmfMQqVJOcWQ">
        <body>The actual arguments of the Interaction</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NsIyAmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsIyA2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NsIyBGEIEdqmfMQqVJOcWQ" name="PartDecomposition">
    <ownedComment xmi:id="_NsIyBWEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyBGEIEdqmfMQqVJOcWQ">
      <body>PartDecomposition is a description of the internal interactions of one Lifeline relative to an Interaction.



A Lifeline has a class associated as the type of the ConnectableElement that the Lifeline represents. That class may have an internal structure and the PartDecomposition is an Interaction that describes the behavior of that internal structure relative to the Interaction where the decomposition is referenced.



A PartDecomposition is a specialization of InteractionUse. It associates with the ConnectableElement that it decomposes.

</body>
    </ownedComment>
    <ownedRule xmi:id="_NsIyBmEIEdqmfMQqVJOcWQ" name="parts_of_internal_structures" constrainedElement="_NsIyBGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsIyB2EIEdqmfMQqVJOcWQ" annotatedElement="_NsIyBmEIEdqmfMQqVJOcWQ">
        <body>PartDecompositions apply only to Parts that are Parts of Internal Structures not to Parts of Collaborations.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsIyCGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NsIyCWEIEdqmfMQqVJOcWQ" name="assume" constrainedElement="_NsIyBGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsIyCmEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyCWEIEdqmfMQqVJOcWQ">
        <body>Assume that within Interaction X, Lifeline L is of class C and decomposed to D. Within X there is a sequence of constructs along L (such constructs are CombinedFragments, InteractionUse and (plain) OccurrenceSpecifications). Then a corresponding sequence of constructs must appear within D, matched one-to-one in the same order.



i) CombinedFragment covering L are matched with an extra-global CombinedFragment in D

ii) An InteractionUse covering L are matched with a global (i.e. covering all Lifelines) InteractionUse in D.

iii) A plain OccurrenceSpecification on L is considered an actualGate that must be matched by a formalGate of D

</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsIyC2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NsIyDGEIEdqmfMQqVJOcWQ" name="commutativity_of_decomposition" constrainedElement="_NsIyBGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsIyDWEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyDGEIEdqmfMQqVJOcWQ">
        <body>Assume that within Interaction X, Lifeline L is of class C and decomposed to D. Assume also that there is within X an

InteractionUse (say) U that covers L. According to the constraint above U will have a counterpart CU within D. Within the Interaction referenced by U, L should also be decomposed, and the decomposition should reference CU. (This rule is called commutativity of decomposition)

</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsIyDmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NsIyD2EIEdqmfMQqVJOcWQ" general="_NsIx5WEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NsIyEGEIEdqmfMQqVJOcWQ" name="InteractionOperand">
    <ownedComment xmi:id="_NsIyEWEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyEGEIEdqmfMQqVJOcWQ">
      <body>An InteractionOperand is contained in a CombinedFragment. An InteractionOperand represents one operand of the expression given by the enclosing CombinedFragment. 



An InteractionOperand is an InteractionFragment with an optional guard expression. An InteractionOperand may be

guarded by a InteractionConstraint. Only InteractionOperands with a guard that evaluates to true at this point in the interaction will be considered for the production of the traces for the enclosing CombinedFragment.



InteractionOperand contains an ordered set of InteractionFragments.



In Sequence Diagrams these InteractionFragments are ordered according to their geometrical position vertically. The geometrical position of the InteractionFragment is given by the topmost vertical coordinate of its contained OccurrenceSpecifications or symbols.</body>
    </ownedComment>
    <ownedRule xmi:id="_NsIyEmEIEdqmfMQqVJOcWQ" name="guard_directly_prior" constrainedElement="_NsIyEGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsIyE2EIEdqmfMQqVJOcWQ" annotatedElement="_NsIyEmEIEdqmfMQqVJOcWQ">
        <body>The guard must be placed directly prior to (above) the OccurrenceSpecification that will become the first OccurrenceSpecification within this InteractionOperand.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsIyFGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NsIyFWEIEdqmfMQqVJOcWQ" name="guard_contain_references" constrainedElement="_NsIyEGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsIyFmEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyFWEIEdqmfMQqVJOcWQ">
        <body>The guard must contain only references to values local to the Lifeline on which it resides, or values global to the whole Interaction.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsIyF2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NsIyGGEIEdqmfMQqVJOcWQ" general="_NrZLJWEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NsIyGWEIEdqmfMQqVJOcWQ" general="_NimbnWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NsIyGmEIEdqmfMQqVJOcWQ" name="guard" type="_NsIyJmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NsSjLmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NsIyG2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NsIyHGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NsIyHWEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyGmEIEdqmfMQqVJOcWQ">
        <body>Constraint of the operand.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NsIyHmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsIyH2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NsIyIGEIEdqmfMQqVJOcWQ" name="fragment" type="_NrZLJWEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_NscUAmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NsIyIWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NsIyImEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NsIyI2EIEdqmfMQqVJOcWQ" annotatedElement="_NsIyIGEIEdqmfMQqVJOcWQ">
        <body>The fragments of the operand.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NsIyJGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsIyJWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NsIyJmEIEdqmfMQqVJOcWQ" name="InteractionConstraint">
    <ownedComment xmi:id="_NsIyJ2EIEdqmfMQqVJOcWQ" annotatedElement="_NsIyJmEIEdqmfMQqVJOcWQ">
      <body>An InteractionConstraint is a Boolean expression that guards an operand in a CombinedFragment. InteractionConstraint is a specialization of Constraint. Furthermore the InteractionConstraint contains two expressions designating the minimum and maximum number of times a loop CombinedFragment should execute.</body>
    </ownedComment>
    <ownedRule xmi:id="_NsIyKGEIEdqmfMQqVJOcWQ" name="dynamic_variables" constrainedElement="_NsIyJmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsIyKWEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyKGEIEdqmfMQqVJOcWQ">
        <body>The dynamic variables that take part in the constraint must be owned by the ConnectableElement corresponding to the covered Lifeline.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsIyKmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NsIyK2EIEdqmfMQqVJOcWQ" name="global_data" constrainedElement="_NsIyJmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsIyLGEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyK2EIEdqmfMQqVJOcWQ">
        <body>The constraint may contain references to global data or write-once data.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsIyLWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NsIyLmEIEdqmfMQqVJOcWQ" name="minint_maxint" constrainedElement="_NsIyJmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsIyL2EIEdqmfMQqVJOcWQ" annotatedElement="_NsIyLmEIEdqmfMQqVJOcWQ">
        <body>Minint/maxint can only be present if the InteractionConstraint is associated with the operand of a loop CombinedFragment.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsIyMGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NsIyMWEIEdqmfMQqVJOcWQ" name="minint_non_negative" constrainedElement="_NsIyJmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsIyMmEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyMWEIEdqmfMQqVJOcWQ">
        <body>If minint is specified, then the expression must evaluate to a non-negative integer.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsIyM2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NsIyNGEIEdqmfMQqVJOcWQ" name="maxint_positive" constrainedElement="_NsIyJmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsIyNWEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyNGEIEdqmfMQqVJOcWQ">
        <body>If maxint is specified, then the expression must evaluate to a positive integer.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsIyNmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NsIyN2EIEdqmfMQqVJOcWQ" name="maxint_greater_equal_minint" constrainedElement="_NsIyJmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsIyOGEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyN2EIEdqmfMQqVJOcWQ">
        <body>If maxint is specified, then minint must be specified and the evaluation of maxint must be >= the evaluation of minint</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsIyOWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NsIyOmEIEdqmfMQqVJOcWQ" general="_NjDHfmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NsIyO2EIEdqmfMQqVJOcWQ" name="minint" type="_NiwMlmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NscT-GEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NsIyPGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NsIyPWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NsIyPmEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyO2EIEdqmfMQqVJOcWQ">
        <body>The minimum number of iterations of a loop</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NsIyP2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsIyQGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NsIyQWEIEdqmfMQqVJOcWQ" name="maxint" type="_NiwMlmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NscT-2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NsIyQmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NsIyQ2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NsIyRGEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyQWEIEdqmfMQqVJOcWQ">
        <body>The maximum number of iterations of a loop</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NsIyRWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsIyRmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Enumeration" xmi:id="_NsIyR2EIEdqmfMQqVJOcWQ" name="InteractionOperatorKind">
    <ownedComment xmi:id="_NsIySGEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyR2EIEdqmfMQqVJOcWQ">
      <body>InteractionOperatorKind is an enumeration designating the different kinds of operators of CombinedFragments. The InteractionOperand defines the type of operator of a CombinedFragment.</body>
    </ownedComment>
    <ownedLiteral xmi:id="_NsIySWEIEdqmfMQqVJOcWQ" name="seq">
      <ownedComment xmi:id="_NsIySmEIEdqmfMQqVJOcWQ" annotatedElement="_NsIySWEIEdqmfMQqVJOcWQ">
        <body>The interactionOperator seq designates that the CombinedFragment represents a weak sequencing between the behaviors of the operands.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_NsIyS2EIEdqmfMQqVJOcWQ" name="alt">
      <ownedComment xmi:id="_NsIyTGEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyS2EIEdqmfMQqVJOcWQ">
        <body>The interactionOperator alt designates that the CombinedFragment represents a choice of behavior. At most one of the operands will be chosen. The chosen operand must have an explicit or implicit guard expression that evaluates to true at this point in the interaction. An implicit true guard is implied if the operand has no guard.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_NsIyTWEIEdqmfMQqVJOcWQ" name="opt">
      <ownedComment xmi:id="_NsIyTmEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyTWEIEdqmfMQqVJOcWQ">
        <body>The interactionOperator opt designates that the CombinedFragment represents a choice of behavior where either the (sole) operand happens or nothing happens. An option is semantically equivalent to an alternative CombinedFragment where there is one operand with non-empty content and the second operand is empty.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_NsIyT2EIEdqmfMQqVJOcWQ" name="break">
      <ownedComment xmi:id="_NsIyUGEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyT2EIEdqmfMQqVJOcWQ">
        <body>The interactionOperator break designates that the CombinedFragment represents a breaking scenario in the sense that the operand is a scenario that is performed instead of the remainder of the enclosing InteractionFragment. A break operator with a guard is chosen when the guard is true and the rest of the enclosing Interaction Fragment is ignored. When the guard of the break operand is false, the break operand is ignored and the rest of the enclosing InteractionFragment is chosen. The choice between a break operand without a guard and the rest of the enclosing InteractionFragment is done non-deterministically.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_NsIyUWEIEdqmfMQqVJOcWQ" name="par">
      <ownedComment xmi:id="_NsIyUmEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyUWEIEdqmfMQqVJOcWQ">
        <body>The interactionOperator par designates that the CombinedFragment represents a parallel merge between the behaviors of the operands. The OccurrenceSpecifications of the different operands can be interleaved in any way as long as the ordering imposed by each operand as such is preserved.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_NsIyU2EIEdqmfMQqVJOcWQ" name="strict">
      <ownedComment xmi:id="_NsIyVGEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyU2EIEdqmfMQqVJOcWQ">
        <body>The interactionOperator strict designates that the CombinedFragment represents a strict sequencing between the behaviors of the operands. The semantics of strict sequencing defines a strict ordering of the operands on the first level within the CombinedFragment with interactionOperator strict. Therefore OccurrenceSpecifications within contained CombinedFragment will not directly be compared with other OccurrenceSpecifications of the enclosing CombinedFragment.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_NsIyVWEIEdqmfMQqVJOcWQ" name="loop">
      <ownedComment xmi:id="_NsIyVmEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyVWEIEdqmfMQqVJOcWQ">
        <body>The interactionOperator loop designates that the CombinedFragment represents a loop. The loop operand will be repeated a number of times.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_NsIyV2EIEdqmfMQqVJOcWQ" name="critical">
      <ownedComment xmi:id="_NsIyWGEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyV2EIEdqmfMQqVJOcWQ">
        <body>The interactionOperator critical designates that the CombinedFragment represents a critical region. A critical region means that the traces of the region cannot be interleaved by other OccurrenceSpecifications (on those Lifelines covered by the region). This means that the region is treated atomically by the enclosing fragment when determining the set of valid traces. Even though enclosing CombinedFragments may imply that some OccurrenceSpecifications may interleave into the region, such as e.g. with par-operator, this is prevented by defining a region.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_NsIyWWEIEdqmfMQqVJOcWQ" name="neg">
      <ownedComment xmi:id="_NsIyWmEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyWWEIEdqmfMQqVJOcWQ">
        <body>The interactionOperator neg designates that the CombinedFragment represents traces that are defined to be invalid.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_NsIyW2EIEdqmfMQqVJOcWQ" name="assert">
      <ownedComment xmi:id="_NsIyXGEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyW2EIEdqmfMQqVJOcWQ">
        <body>The interactionOperator assert designates that the CombinedFragment represents an assertion. The sequences of the operand of the assertion are the only valid continuations. All other continuations result in an invalid trace.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_NsIyXWEIEdqmfMQqVJOcWQ" name="ignore">
      <ownedComment xmi:id="_NsIyXmEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyXWEIEdqmfMQqVJOcWQ">
        <body>The interacionOperator ignore designates that there are some message types that are not shown within this combined fragment. These message types can be considered insignificant and are implicitly ignored if they appear in a corresponding execution. Alternatively, one can understand ignore to mean that the message types that are ignored can appear anywhere in the traces.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_NsIyX2EIEdqmfMQqVJOcWQ" name="consider">
      <ownedComment xmi:id="_NsIyYGEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyX2EIEdqmfMQqVJOcWQ">
        <body>The interactionOperator consider designates which messages should be considered within this combined fragment. This is equivalent to defining every other message to be ignored.</body>
      </ownedComment>
    </ownedLiteral>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NsIyYWEIEdqmfMQqVJOcWQ" name="Gate">
    <ownedComment xmi:id="_NsIyYmEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyYWEIEdqmfMQqVJOcWQ">
      <body>A Gate is a connection point for relating a Message outside an InteractionFragment with a Message inside the InteractionFragment. Gate is a specialization of MessageEnd. Gates are connected through Messages. A Gate is actually a representative of an OccurrenceSpecification that is not in the same scope as the Gate. Gates play different roles: we have formal gates on Interactions, actual gates on InteractionUses, expression gates on CombinedFragments.</body>
    </ownedComment>
    <ownedRule xmi:id="_NsIyY2EIEdqmfMQqVJOcWQ" name="messages_actual_gate" constrainedElement="_NsIyYWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsIyZGEIEdqmfMQqVJOcWQ" annotatedElement="_NsIyY2EIEdqmfMQqVJOcWQ">
        <body>The message leading to/from an actualGate of an InteractionUse must correspond to the message leading from/to the formalGate with the same name of the Interaction referenced by the InteractionUse.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsIyZWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NsIyZmEIEdqmfMQqVJOcWQ" name="messages_combined_fragment" constrainedElement="_NsIyYWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsIyZ2EIEdqmfMQqVJOcWQ" annotatedElement="_NsIyZmEIEdqmfMQqVJOcWQ">
        <body>The message leading to/from an (expression) Gate within a CombinedFragment must correspond to the message leading from/to the CombinedFragment on its outside.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsIyaGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NsIyaWEIEdqmfMQqVJOcWQ" general="_Nri8AGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NsSi4GEIEdqmfMQqVJOcWQ" name="CombinedFragment">
    <ownedComment xmi:id="_NsSi4WEIEdqmfMQqVJOcWQ" annotatedElement="_NsSi4GEIEdqmfMQqVJOcWQ">
      <body>A combined fragment defines an expression of interaction fragments. A combined fragment is defined by an interaction operator and corresponding interaction operands. Through the use of CombinedFragments the user will be able to describe a number of traces in a compact and concise manner. CombinedFragment is a specialization of InteractionFragment.</body>
    </ownedComment>
    <ownedRule xmi:id="_NsSi4mEIEdqmfMQqVJOcWQ" name="opt_loop_break_neg" constrainedElement="_NsSi4GEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsSi42EIEdqmfMQqVJOcWQ" annotatedElement="_NsSi4mEIEdqmfMQqVJOcWQ">
        <body>If the interactionOperator is opt, loop, break, or neg there must be exactly one operand</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsSi5GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NsSi5WEIEdqmfMQqVJOcWQ" name="minint_and_maxint" constrainedElement="_NsSi4GEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsSi5mEIEdqmfMQqVJOcWQ" annotatedElement="_NsSi5WEIEdqmfMQqVJOcWQ">
        <body>The InteractionConstraint with minint and maxint only apply when attached to an InteractionOperand where the interactionOperator is loop.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsSi52EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NsSi6GEIEdqmfMQqVJOcWQ" name="break" constrainedElement="_NsSi4GEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsSi6WEIEdqmfMQqVJOcWQ" annotatedElement="_NsSi6GEIEdqmfMQqVJOcWQ">
        <body>If the interactionOperator is break, the corresponding InteractionOperand must cover all Lifelines within the enclosing InteractionFragment.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsSi6mEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NsSi62EIEdqmfMQqVJOcWQ" name="consider_and_ignore" constrainedElement="_NsSi4GEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsSi7GEIEdqmfMQqVJOcWQ" annotatedElement="_NsSi62EIEdqmfMQqVJOcWQ">
        <body>The interaction operators 'consider' and 'ignore' can only be used for the CombineIgnoreFragment subtype of CombinedFragment</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsSi7WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>((interactionOperator = #consider) or (interactionOperator = #ignore)) implies oclsisTypeOf(CombineIgnoreFragment)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NsSi7mEIEdqmfMQqVJOcWQ" general="_NrZLJWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NsSi72EIEdqmfMQqVJOcWQ" name="interactionOperator" type="_NsIyR2EIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NsSi8GEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NsSi8WEIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NsSi8mEIEdqmfMQqVJOcWQ" annotatedElement="_NsSi72EIEdqmfMQqVJOcWQ">
        <body>Specifies the operation which defines the semantics of this combination of InteractionFragments.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NsSi82EIEdqmfMQqVJOcWQ" name="operand" type="_NsIyEGEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NscT4GEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NsSi9GEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NsSi9WEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NsSi9mEIEdqmfMQqVJOcWQ" annotatedElement="_NsSi82EIEdqmfMQqVJOcWQ">
        <body>The set of operands of the combined fragment.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NsSi92EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsSi-GEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NsSi-WEIEdqmfMQqVJOcWQ" name="cfragmentGate" type="_NsIyYWEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NscT6WEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NsSi-mEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NsSi-2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NsSi_GEIEdqmfMQqVJOcWQ" annotatedElement="_NsSi-WEIEdqmfMQqVJOcWQ">
        <body>Specifies the gates that form the interface between this CombinedFragment and its surroundings</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NsSi_WEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsSi_mEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NrQBPGEIEdqmfMQqVJOcWQ" name="Interaction">
    <ownedComment xmi:id="_NrQBPWEIEdqmfMQqVJOcWQ" annotatedElement="_NrQBPGEIEdqmfMQqVJOcWQ">
      <body>An interaction is a unit of behavior that focuses on the observable exchange of information between ConnectableElements. An Interaction is a specialization of InteractionFragment and of Behavior.</body>
    </ownedComment>
    <generalization xmi:id="_NrQBPmEIEdqmfMQqVJOcWQ" general="_NrZLJWEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NrQBP2EIEdqmfMQqVJOcWQ" general="_NqDuQGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NrQBQGEIEdqmfMQqVJOcWQ" name="lifeline" type="_NrZLBmEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_NrsGH2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NrQBQWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NrQBQmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NrQBQ2EIEdqmfMQqVJOcWQ" annotatedElement="_NrQBQGEIEdqmfMQqVJOcWQ">
        <body>Specifies the participants in this Interaction.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrQBRGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrQBRWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrQBRmEIEdqmfMQqVJOcWQ" name="message" type="_NrZLOGEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_Nr12-WEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NrQBR2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NrQBSGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NrQBSWEIEdqmfMQqVJOcWQ" annotatedElement="_NrQBRmEIEdqmfMQqVJOcWQ">
        <body>The Messages contained in this Interaction.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrQBSmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrQBS2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrQBTGEIEdqmfMQqVJOcWQ" name="fragment" type="_NrZLJWEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_Nr13D2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NrQBTWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NrQBTmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NrQBT2EIEdqmfMQqVJOcWQ" annotatedElement="_NrQBTGEIEdqmfMQqVJOcWQ">
        <body>The ordered set of fragments in the Interaction.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrQBUGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrQBUWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrZLAGEIEdqmfMQqVJOcWQ" name="action" type="_NvH0cGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_Nr_oB2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NrZLAWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NrZLAmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NrZLA2EIEdqmfMQqVJOcWQ" annotatedElement="_NrZLAGEIEdqmfMQqVJOcWQ">
        <body>Actions owned by the Interaction.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLBGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLBWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NsSi_2EIEdqmfMQqVJOcWQ" name="formalGate" type="_NsIyYWEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_NscT82EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NsSjAGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NsSjAWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NsSjAmEIEdqmfMQqVJOcWQ" annotatedElement="_NsSi_2EIEdqmfMQqVJOcWQ">
        <body>Specifies the gates that form the message interface between this Interaction and any InteractionUses which reference it.

</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NsSjA2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsSjBGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NrZLBmEIEdqmfMQqVJOcWQ" name="Lifeline">
    <ownedComment xmi:id="_NrZLB2EIEdqmfMQqVJOcWQ" annotatedElement="_NrZLBmEIEdqmfMQqVJOcWQ">
      <body>A lifeline represents an individual participant in the Interaction. While Parts and StructuralFeatures may have multiplicity greater than 1, Lifelines represent only one interacting entity. Lifeline is a specialization of NamedElement. If the referenced ConnectableElement is multivalued (i.e. has a multiplicity > 1), then the Lifeline may have an expression (the 'selector') that specifies which particular part is represented by this Lifeline. If the selector is omitted this means that an arbitrary representative of the multivalued ConnectableElement is chosen.</body>
    </ownedComment>
    <ownedComment xmi:id="_NsSjBWEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLBmEIEdqmfMQqVJOcWQ">
      <body>A lifeline represents an individual participant in the Interaction. While Parts and StructuralFeatures may have multiplicity greater than 1, Lifelines represent only one interacting entity. Lifeline is a specialization of NamedElement.



If the referenced ConnectableElement is multivalued (i.e. has a multiplicity > 1), then the Lifeline may have an expression (the 'selector') that specifies which particular part is represented by this Lifeline.



If the selector is omitted this means that an arbitrary representative of the multivalued ConnectableElement is chosen.

</body>
    </ownedComment>
    <ownedRule xmi:id="_NrZLCGEIEdqmfMQqVJOcWQ" name="interaction_uses_share_lifeline" constrainedElement="_NrZLBmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLCWEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLCGEIEdqmfMQqVJOcWQ">
        <body>If two (or more) InteractionUses within one Interaction, refer to Interactions with 'common Lifelines,' those Lifelines must also appear in the Interaction with the InteractionUses. By common Lifelines we mean Lifelines with the same selector and represents associations.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NrZLCmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NrZLC2EIEdqmfMQqVJOcWQ" name="selector_specified" constrainedElement="_NrZLBmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLDGEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLC2EIEdqmfMQqVJOcWQ">
        <body>The selector for a Lifeline must only be specified if the referenced Part is multivalued.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NrZLDWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>(self.selector->isEmpty() implies not self.represents.isMultivalued()) or
(not self.selector->isEmpty() implies self.represents.isMultivalued())
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NrZLDmEIEdqmfMQqVJOcWQ" name="same_classifier" constrainedElement="_NrZLBmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLD2EIEdqmfMQqVJOcWQ" annotatedElement="_NrZLDmEIEdqmfMQqVJOcWQ">
        <body>The classifier containing the referenced ConnectableElement must be the same classifier, or an ancestor, of the classifier that contains the interaction enclosing this lifeline.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NrZLEGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>if (represents->notEmpty()) then
(if selector->notEmpty() then represents.isMultivalued() else not represents.isMultivalued())
</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NrZLEWEIEdqmfMQqVJOcWQ" general="_NjfzQGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NrZLEmEIEdqmfMQqVJOcWQ" name="coveredBy" type="_NrZLJWEIEdqmfMQqVJOcWQ" association="_NrsGDmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLE2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLFGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrZLFWEIEdqmfMQqVJOcWQ" name="represents" type="_NrGQSmEIEdqmfMQqVJOcWQ" association="_NrsGGmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLFmEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLFWEIEdqmfMQqVJOcWQ">
        <body>References the ConnectableElement within the classifier that contains the enclosing interaction.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLF2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLGGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrZLGWEIEdqmfMQqVJOcWQ" name="interaction" type="_NrQBPGEIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ" association="_NrsGH2EIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NrZLGmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NrZLG2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NrZLHGEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLGWEIEdqmfMQqVJOcWQ">
        <body>References the Interaction enclosing this Lifeline.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLHWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLHmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrZLH2EIEdqmfMQqVJOcWQ" name="selector" type="_NiwMlmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_Nr128GEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NrZLIGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NrZLIWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NrZLImEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLH2EIEdqmfMQqVJOcWQ">
        <body>If the referenced ConnectableElement is multivalued, then this specifies the specific individual part within that set.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLI2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLJGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NsSjBmEIEdqmfMQqVJOcWQ" name="decomposedAs" type="_NsIyBGEIEdqmfMQqVJOcWQ" association="_NsSjLGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsSjB2EIEdqmfMQqVJOcWQ" annotatedElement="_NsSjBmEIEdqmfMQqVJOcWQ">
        <body>References the Interaction that represents the decomposition.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NsSjCGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsSjCWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NsSjCmEIEdqmfMQqVJOcWQ" name="Continuation">
    <ownedComment xmi:id="_NsSjC2EIEdqmfMQqVJOcWQ" annotatedElement="_NsSjCmEIEdqmfMQqVJOcWQ">
      <body>A Continuation is a syntactic way to define continuations of different branches of an Alternative CombinedFragment. Continuations is intuitively similar to labels representing intermediate points in a flow of control.</body>
    </ownedComment>
    <ownedRule xmi:id="_NsSjDGEIEdqmfMQqVJOcWQ" name="same_name" constrainedElement="_NsSjCmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsSjDWEIEdqmfMQqVJOcWQ" annotatedElement="_NsSjDGEIEdqmfMQqVJOcWQ">
        <body>Continuations with the same name may only cover the same set of Lifelines (within one Classifier).</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsSjDmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NsSjD2EIEdqmfMQqVJOcWQ" name="global" constrainedElement="_NsSjCmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsSjEGEIEdqmfMQqVJOcWQ" annotatedElement="_NsSjD2EIEdqmfMQqVJOcWQ">
        <body>Continuations are always global in the enclosing InteractionFragment e.g. it always covers all Lifelines covered by the enclosing InteractionFragment.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsSjEWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NsSjEmEIEdqmfMQqVJOcWQ" name="first_or_last_interaction_fragment" constrainedElement="_NsSjCmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsSjE2EIEdqmfMQqVJOcWQ" annotatedElement="_NsSjEmEIEdqmfMQqVJOcWQ">
        <body>Continuations always occur as the very first InteractionFragment or the very last InteractionFragment of the enclosing InteractionFragment.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsSjFGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NsSjFWEIEdqmfMQqVJOcWQ" general="_NrZLJWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NsSjFmEIEdqmfMQqVJOcWQ" name="setting">
      <ownedComment xmi:id="_NsSjF2EIEdqmfMQqVJOcWQ" annotatedElement="_NsSjFmEIEdqmfMQqVJOcWQ">
        <body>True: when the Continuation is at the end of the enclosing InteractionFragment and False when it is in the beginning.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NsSjGGEIEdqmfMQqVJOcWQ" value="true"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NrZLJWEIEdqmfMQqVJOcWQ" name="InteractionFragment" isAbstract="true">
    <ownedComment xmi:id="_NrZLJmEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLJWEIEdqmfMQqVJOcWQ">
      <body>InteractionFragment is an abstract notion of the most general interaction unit. An interaction fragment is a piece of an interaction. Each interaction fragment is conceptually like an interaction by itself. InteractionFragment is an abstract class and a specialization of NamedElement.</body>
    </ownedComment>
    <generalization xmi:id="_NrZLJ2EIEdqmfMQqVJOcWQ" general="_NjfzQGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NrZLKGEIEdqmfMQqVJOcWQ" name="covered" type="_NrZLBmEIEdqmfMQqVJOcWQ" association="_NrsGDmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrZLKWEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLKGEIEdqmfMQqVJOcWQ">
        <body>References the Lifelines that the InteractionFragment involves.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLKmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLK2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrZLLGEIEdqmfMQqVJOcWQ" name="generalOrdering" type="_NrZLfGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_Nr13CmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NrZLLWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NrZLLmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NrZLL2EIEdqmfMQqVJOcWQ" annotatedElement="_NrZLLGEIEdqmfMQqVJOcWQ">
        <body>The general ordering relationships contained in this fragment.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLMGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLMWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrZLMmEIEdqmfMQqVJOcWQ" name="enclosingInteraction" type="_NrQBPGEIEdqmfMQqVJOcWQ" association="_Nr13D2EIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NrZLM2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NrZLNGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NrZLNWEIEdqmfMQqVJOcWQ" annotatedElement="_NrZLMmEIEdqmfMQqVJOcWQ">
        <body>The Interaction enclosing this InteractionFragment.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrZLNmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrZLN2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NsSjGWEIEdqmfMQqVJOcWQ" name="enclosingOperand" type="_NsIyEGEIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ" association="_NscUAmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NsSjGmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NsSjG2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NsSjHGEIEdqmfMQqVJOcWQ" annotatedElement="_NsSjGWEIEdqmfMQqVJOcWQ">
        <body>The operand enclosing this InteractionFragment (they may nest recursively)</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NsSjHWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsSjHmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NsSjH2EIEdqmfMQqVJOcWQ" name="ConsiderIgnoreFragment">
    <ownedComment xmi:id="_NsSjIGEIEdqmfMQqVJOcWQ" annotatedElement="_NsSjH2EIEdqmfMQqVJOcWQ">
      <body>A ConsiderIgnoreFragment is a kind of combined fragment that is used for the consider and ignore cases, which require lists of pertinent messages to be specified.</body>
    </ownedComment>
    <ownedRule xmi:id="_NsSjIWEIEdqmfMQqVJOcWQ" name="consider_or_ignore" constrainedElement="_NsSjH2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsSjImEIEdqmfMQqVJOcWQ" annotatedElement="_NsSjIWEIEdqmfMQqVJOcWQ">
        <body>The interaction operator of a ConsiderIgnoreFragment must be either 'consider' or 'ignore'.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsSjI2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>(interactionOperator = #consider) or (interactionOperator = #ignore)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NsSjJGEIEdqmfMQqVJOcWQ" name="type" constrainedElement="_NsSjH2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsSjJWEIEdqmfMQqVJOcWQ" annotatedElement="_NsSjJGEIEdqmfMQqVJOcWQ">
        <body>The NamedElements must be of a type of element that identifies a message (e.g., an Operation, Reception, or a Signal).</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsSjJmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>message->forAll(m | m.oclIsKindOf(Operation) or m.oclIsKindOf(Reception) or m.oclIsKindOf(Signal))</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NsSjJ2EIEdqmfMQqVJOcWQ" general="_NsSi4GEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NsSjKGEIEdqmfMQqVJOcWQ" name="message" type="_NjfzQGEIEdqmfMQqVJOcWQ" association="_NscUBmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsSjKWEIEdqmfMQqVJOcWQ" annotatedElement="_NsSjKGEIEdqmfMQqVJOcWQ">
        <body>The set of messages that apply to this fragment</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NsSjKmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsSjK2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NsSjLGEIEdqmfMQqVJOcWQ" name="A_lifeline_decomposedAs" memberEnd="_NsSjLWEIEdqmfMQqVJOcWQ _NsSjBmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NsSjLWEIEdqmfMQqVJOcWQ" type="_NrZLBmEIEdqmfMQqVJOcWQ" association="_NsSjLGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NsSjLmEIEdqmfMQqVJOcWQ" name="A_guard_interactionOperand" memberEnd="_NsSjMGEIEdqmfMQqVJOcWQ _NsIyGmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NsSjL2EIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NsSjMGEIEdqmfMQqVJOcWQ" type="_NsIyEGEIEdqmfMQqVJOcWQ" association="_NsSjLmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NsSjMWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsSjMmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NscT4GEIEdqmfMQqVJOcWQ" name="A_operand_combinedFragment" memberEnd="_NsSi82EIEdqmfMQqVJOcWQ _NscT4mEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NscT4WEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NscT4mEIEdqmfMQqVJOcWQ" type="_NsSi4GEIEdqmfMQqVJOcWQ" association="_NscT4GEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NscT42EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NscT5GEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NscT5WEIEdqmfMQqVJOcWQ" name="A_refersTo_interactionUse" memberEnd="_NsIx9GEIEdqmfMQqVJOcWQ _NscT5mEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NscT5mEIEdqmfMQqVJOcWQ" type="_NsIx5WEIEdqmfMQqVJOcWQ" association="_NscT5WEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NscT52EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NscT6GEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NscT6WEIEdqmfMQqVJOcWQ" name="A_cfragmentGate_combinedFragment" memberEnd="_NsSi-WEIEdqmfMQqVJOcWQ _NscT62EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NscT6mEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NscT62EIEdqmfMQqVJOcWQ" type="_NsSi4GEIEdqmfMQqVJOcWQ" association="_NscT6WEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NscT7GEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NscT7WEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NscT7mEIEdqmfMQqVJOcWQ" name="A_interactionUse_actualGate" memberEnd="_NsIx-GEIEdqmfMQqVJOcWQ _NscT8GEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NscT72EIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NscT8GEIEdqmfMQqVJOcWQ" type="_NsIx5WEIEdqmfMQqVJOcWQ" association="_NscT7mEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NscT8WEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NscT8mEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NscT82EIEdqmfMQqVJOcWQ" name="A_formalGate_interaction" memberEnd="_NsSi_2EIEdqmfMQqVJOcWQ _NscT9WEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NscT9GEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NscT9WEIEdqmfMQqVJOcWQ" type="_NrQBPGEIEdqmfMQqVJOcWQ" association="_NscT82EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NscT9mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NscT92EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NscT-GEIEdqmfMQqVJOcWQ" name="A_minint_interactionConstraint" memberEnd="_NsIyO2EIEdqmfMQqVJOcWQ _NscT-mEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NscT-WEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NscT-mEIEdqmfMQqVJOcWQ" type="_NsIyJmEIEdqmfMQqVJOcWQ" association="_NscT-GEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NscT-2EIEdqmfMQqVJOcWQ" name="A_maxint_interactionConstraint" memberEnd="_NscT_WEIEdqmfMQqVJOcWQ _NsIyQWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NscT_GEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NscT_WEIEdqmfMQqVJOcWQ" type="_NsIyJmEIEdqmfMQqVJOcWQ" association="_NscT-2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NscT_mEIEdqmfMQqVJOcWQ" name="A_argument_interactionUse" memberEnd="_NscT_2EIEdqmfMQqVJOcWQ _NsIx_mEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NscT_2EIEdqmfMQqVJOcWQ" type="_NsIx5WEIEdqmfMQqVJOcWQ" association="_NscT_mEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NscUAGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NscUAWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NscUAmEIEdqmfMQqVJOcWQ" name="A_fragment_enclosingOperand" memberEnd="_NsIyIGEIEdqmfMQqVJOcWQ _NsSjGWEIEdqmfMQqVJOcWQ">
    <ownedRule xmi:id="_NscUA2EIEdqmfMQqVJOcWQ" constrainedElement="_NscUAmEIEdqmfMQqVJOcWQ">
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NscUBGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>ordered</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NscUBWEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NscUBmEIEdqmfMQqVJOcWQ" name="A_message_considerIgnoreFragment" memberEnd="_NsSjKGEIEdqmfMQqVJOcWQ _NscUB2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NscUB2EIEdqmfMQqVJOcWQ" type="_NsSjH2EIEdqmfMQqVJOcWQ" association="_NscUBmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NscUCGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NscUCWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nsld0GEIEdqmfMQqVJOcWQ" name="Manifestation">
    <ownedComment xmi:id="_Nsld0WEIEdqmfMQqVJOcWQ" annotatedElement="_Nsld0GEIEdqmfMQqVJOcWQ">
      <body>In the metamodel, a Manifestation is a subtype of Abstraction. A Manifestation is owned by an Artifact.</body>
    </ownedComment>
    <generalization xmi:id="_Nsld0mEIEdqmfMQqVJOcWQ" general="_NqfzQWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nsld02EIEdqmfMQqVJOcWQ" name="utilizedElement" type="_Nimb8GEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRzGEIEdqmfMQqVJOcWQ _NqfzTmEIEdqmfMQqVJOcWQ" association="_Nsld12EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nsld1GEIEdqmfMQqVJOcWQ" annotatedElement="_Nsld02EIEdqmfMQqVJOcWQ">
        <body>The model element that is utilized in the manifestation in an Artifact.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nsld1WEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nsld1mEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nsld12EIEdqmfMQqVJOcWQ" name="A_utilizedElement_manifestation" memberEnd="_Nsld2mEIEdqmfMQqVJOcWQ _Nsld02EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nsld2WEIEdqmfMQqVJOcWQ" general="_NqzVJGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nsld2mEIEdqmfMQqVJOcWQ" type="_Nsld0GEIEdqmfMQqVJOcWQ" association="_Nsld12EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nsld22EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nsld3GEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nsld3WEIEdqmfMQqVJOcWQ" name="A_nestedArtifact_artifact" memberEnd="_NscUEmEIEdqmfMQqVJOcWQ _Nsld32EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nsld3mEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nsld32EIEdqmfMQqVJOcWQ" type="_NscUCmEIEdqmfMQqVJOcWQ" redefinedProperty="_NkZLJmEIEdqmfMQqVJOcWQ" association="_Nsld3WEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nsld4GEIEdqmfMQqVJOcWQ" name="A_manifestation_artifact" memberEnd="_NscUGGEIEdqmfMQqVJOcWQ _Nsld42EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nsld4WEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_Nsld4mEIEdqmfMQqVJOcWQ" general="_NqzVKmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nsld42EIEdqmfMQqVJOcWQ" type="_NscUCmEIEdqmfMQqVJOcWQ" association="_Nsld4GEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nsld5GEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nsld5WEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nsld5mEIEdqmfMQqVJOcWQ" name="A_ownedOperation_artifact" memberEnd="_NscUHmEIEdqmfMQqVJOcWQ _Nsld6mEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nsld52EIEdqmfMQqVJOcWQ" general="_NkPaLmEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_Nsld6GEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_Nsld6WEIEdqmfMQqVJOcWQ" general="_NkPaKmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nsld6mEIEdqmfMQqVJOcWQ" type="_NscUCmEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMaWEIEdqmfMQqVJOcWQ _NjfzVmEIEdqmfMQqVJOcWQ _NidR-2EIEdqmfMQqVJOcWQ" association="_Nsld5mEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nsld62EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nsld7GEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nsld7WEIEdqmfMQqVJOcWQ" name="A_ownedAttribute_artifact" memberEnd="_NscUJGEIEdqmfMQqVJOcWQ _Nsld8GEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nsld7mEIEdqmfMQqVJOcWQ" general="_NjyuPWEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_Nsld72EIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nsld8GEIEdqmfMQqVJOcWQ" type="_NscUCmEIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ _NidR-2EIEdqmfMQqVJOcWQ _NjyuQGEIEdqmfMQqVJOcWQ" association="_Nsld7WEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nsld8WEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nsld8mEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nsld-mEIEdqmfMQqVJOcWQ" name="CallEvent">
    <ownedComment xmi:id="_Nsld-2EIEdqmfMQqVJOcWQ" annotatedElement="_Nsld-mEIEdqmfMQqVJOcWQ">
      <body>A call event represents the reception of a request to invoke a specific operation. A call event is distinct from the call action that caused it. A call event may cause the invocation of a behavior that is the method of the operation referenced by the call request, if that operation is owned or inherited by the classifier that specified the receiver object.</body>
    </ownedComment>
    <generalization xmi:id="_Nsld_GEIEdqmfMQqVJOcWQ" general="_NsvPFmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nsld_WEIEdqmfMQqVJOcWQ" name="operation" type="_NjM4UGEIEdqmfMQqVJOcWQ" association="_NtCJxGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nsld_mEIEdqmfMQqVJOcWQ" annotatedElement="_Nsld_WEIEdqmfMQqVJOcWQ">
        <body>Designates the operation whose invocation raised the call event.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nsld_2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsleAGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NsleAWEIEdqmfMQqVJOcWQ" name="ChangeEvent">
    <ownedComment xmi:id="_NsleAmEIEdqmfMQqVJOcWQ" annotatedElement="_NsleAWEIEdqmfMQqVJOcWQ">
      <body>A change event occurs when a Boolean-valued expression becomes true, for example, as a result of a change in the value held in a slot corresponding to an attribute, or a change in the value referenced by a link corresponding to an association. A change event is raised implicitly and is not the result of an explicit action.</body>
    </ownedComment>
    <generalization xmi:id="_NsleA2EIEdqmfMQqVJOcWQ" general="_Ns4YyWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NsleBGEIEdqmfMQqVJOcWQ" name="changeExpression" type="_NiwMlmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NtCJ22EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NsleBWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NsleBmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NsleB2EIEdqmfMQqVJOcWQ" annotatedElement="_NsleBGEIEdqmfMQqVJOcWQ">
        <body>A Boolean-valued expression that will result in a change event whenever its value changes from false to true.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NsleCGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsleCWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NsvO6WEIEdqmfMQqVJOcWQ" name="Reception">
    <ownedComment xmi:id="_NsvO6mEIEdqmfMQqVJOcWQ" annotatedElement="_NsvO6WEIEdqmfMQqVJOcWQ">
      <body>A reception is a declaration stating that a classifier is prepared to react to the receipt of a signal. A reception designates a signal and specifies the expected behavioral response. The details of handling a signal are specified by the behavior associated with the reception or the classifier itself.</body>
    </ownedComment>
    <ownedRule xmi:id="_NsvO62EIEdqmfMQqVJOcWQ" name="not_query" constrainedElement="_NsvO6WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsvO7GEIEdqmfMQqVJOcWQ" annotatedElement="_NsvO62EIEdqmfMQqVJOcWQ">
        <body>A Reception can not be a query.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsvO7WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>not self.isQuery</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NsvO7mEIEdqmfMQqVJOcWQ" general="_NjM44WEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NsvO72EIEdqmfMQqVJOcWQ" name="signal" type="_NsvO82EIEdqmfMQqVJOcWQ" association="_NtCJwGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsvO8GEIEdqmfMQqVJOcWQ" annotatedElement="_NsvO72EIEdqmfMQqVJOcWQ">
        <body>The signal that this reception handles.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NsvO8WEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsvO8mEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NsvO82EIEdqmfMQqVJOcWQ" name="Signal">
    <ownedComment xmi:id="_NsvO9GEIEdqmfMQqVJOcWQ" annotatedElement="_NsvO82EIEdqmfMQqVJOcWQ">
      <body>A signal is a specification of send request instances communicated between objects. The receiving object handles the received request instances as specified by its receptions. The data carried by a send request (which was passed to it by the send invocation occurrence that caused that request) are represented as attributes of the signal. A signal is defined independently of the classifiers handling the signal occurrence.</body>
    </ownedComment>
    <generalization xmi:id="_NsvO9WEIEdqmfMQqVJOcWQ" general="_NiTgcGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NsvO9mEIEdqmfMQqVJOcWQ" name="ownedAttribute" type="_Ni59sGEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NiTgemEIEdqmfMQqVJOcWQ _NimbtWEIEdqmfMQqVJOcWQ" association="_NtCJ4GEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NsvO92EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NsvO-GEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NsvO-WEIEdqmfMQqVJOcWQ" annotatedElement="_NsvO9mEIEdqmfMQqVJOcWQ">
        <body>The attributes owned by the signal.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NsvO-mEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsvO-2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NsvO_GEIEdqmfMQqVJOcWQ" name="SignalEvent">
    <ownedComment xmi:id="_NsvO_WEIEdqmfMQqVJOcWQ" annotatedElement="_NsvO_GEIEdqmfMQqVJOcWQ">
      <body>A signal event represents the receipt of an asynchronous signal. A signal event may cause a response, such as a state machine transition as specified in the classifier behavior of the classifier that specified the receiver object, if the signal referenced by the send request is mentioned in a reception owned or inherited by the classifier that specified the receiver object.</body>
    </ownedComment>
    <generalization xmi:id="_NsvO_mEIEdqmfMQqVJOcWQ" general="_NsvPFmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NsvO_2EIEdqmfMQqVJOcWQ" name="signal" type="_NsvO82EIEdqmfMQqVJOcWQ" association="_NtCJyGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsvPAGEIEdqmfMQqVJOcWQ" annotatedElement="_NsvO_2EIEdqmfMQqVJOcWQ">
        <body>The specific signal that is associated with this event.</body>
      </ownedComment>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Enumeration" xmi:id="_NsvPDmEIEdqmfMQqVJOcWQ" name="CallConcurrencyKind">
    <ownedComment xmi:id="_NsvPD2EIEdqmfMQqVJOcWQ" annotatedElement="_NsvPDmEIEdqmfMQqVJOcWQ">
      <body>CallConcurrencyKind is an enumeration with the following literals:

 sequential No concurrency management mechanism is associated with the operation and, therefore, concurrency conflicts may occur. Instances that invoke a behavioral feature need to coordinate so that only one invocation to a target on any behavioral feature occurs at once.

 guarded Multiple invocations of a behavioral feature may occur simultaneously to one instance, but only one is allowed to commence. The others are blocked until the performance of the first behavioral feature is complete. It is the responsibility of the system designer to ensure that deadlocks do not occur due to simultaneous blocks.

 concurrent Multiple invocations of a behavioral feature may occur simultaneously to one instance and all of them may proceed concurrently.



</body>
    </ownedComment>
    <ownedLiteral xmi:id="_NsvPEGEIEdqmfMQqVJOcWQ" name="sequential">
      <ownedComment xmi:id="_NsvPEWEIEdqmfMQqVJOcWQ" annotatedElement="_NsvPEGEIEdqmfMQqVJOcWQ">
        <body>No concurrency management mechanism is associated with the operation and, therefore, concurrency conflicts may occur. Instances that invoke a behavioral feature need to coordinate so that only one invocation to a target on any behavioral feature occurs at once.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_NsvPEmEIEdqmfMQqVJOcWQ" name="guarded">
      <ownedComment xmi:id="_NsvPE2EIEdqmfMQqVJOcWQ" annotatedElement="_NsvPEmEIEdqmfMQqVJOcWQ">
        <body>Multiple invocations of a behavioral feature may occur simultaneously to one instance, but only one is allowed to commence. The others are blocked until the performance of the first behavioral feature is complete. It is the responsibility of the system designer to ensure that deadlocks do not occur due to simultaneous blocks.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_NsvPFGEIEdqmfMQqVJOcWQ" name="concurrent">
      <ownedComment xmi:id="_NsvPFWEIEdqmfMQqVJOcWQ" annotatedElement="_NsvPFGEIEdqmfMQqVJOcWQ">
        <body>Multiple invocations of a behavioral feature may occur simultaneously to one instance and all of them may proceed concurrently.</body>
      </ownedComment>
    </ownedLiteral>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NsvPFmEIEdqmfMQqVJOcWQ" name="MessageEvent" isAbstract="true">
    <ownedComment xmi:id="_NsvPF2EIEdqmfMQqVJOcWQ" annotatedElement="_NsvPFmEIEdqmfMQqVJOcWQ">
      <body>A message event specifies the receipt by an object of either a call or a signal. MessageEvent is an abstract metaclass.</body>
    </ownedComment>
    <generalization xmi:id="_NsvPGGEIEdqmfMQqVJOcWQ" general="_Ns4YyWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Ns4YwGEIEdqmfMQqVJOcWQ" name="AnyReceiveEvent">
    <ownedComment xmi:id="_Ns4YwWEIEdqmfMQqVJOcWQ" annotatedElement="_Ns4YwGEIEdqmfMQqVJOcWQ">
      <body>A transition trigger associated with AnyReceiveEvent specifies that the transition is to be triggered by the receipt of any message that is not explicitly referenced in another transition from the same vertex.</body>
    </ownedComment>
    <generalization xmi:id="_Ns4YwmEIEdqmfMQqVJOcWQ" general="_NsvPFmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NqDua2EIEdqmfMQqVJOcWQ" name="BehavioredClassifier" isAbstract="true">
    <ownedComment xmi:id="_NqzVVWEIEdqmfMQqVJOcWQ" annotatedElement="_NqDua2EIEdqmfMQqVJOcWQ">
      <body>A BehavioredClassifier may have an interface realization.</body>
    </ownedComment>
    <ownedComment xmi:id="_NqDubGEIEdqmfMQqVJOcWQ" annotatedElement="_NqDua2EIEdqmfMQqVJOcWQ">
      <body>A classifier can have behavior specifications defined in its namespace. One of these may specify the behavior of the classifier itself.</body>
    </ownedComment>
    <ownedRule xmi:id="_NqDubWEIEdqmfMQqVJOcWQ" name="class_behavior" constrainedElement="_NqDua2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqDubmEIEdqmfMQqVJOcWQ" annotatedElement="_NqDubWEIEdqmfMQqVJOcWQ">
        <body>If a behavior is classifier behavior, it does not have a specification.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NqDub2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.classifierBehavior.notEmpty() implies self.specification.isEmpty()</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NqDucGEIEdqmfMQqVJOcWQ" general="_NiTgcGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NqDucWEIEdqmfMQqVJOcWQ" name="ownedBehavior" type="_NqDuQGEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_NqM4OWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NqDucmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqDuc2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqDudGEIEdqmfMQqVJOcWQ" annotatedElement="_NqDucWEIEdqmfMQqVJOcWQ">
        <body>References behavior specifications owned by a classifier.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqDudWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqDudmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqDud2EIEdqmfMQqVJOcWQ" name="classifierBehavior" type="_NqDuQGEIEdqmfMQqVJOcWQ" subsettedProperty="_NqDucWEIEdqmfMQqVJOcWQ" association="_NqM4PmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqDueGEIEdqmfMQqVJOcWQ" annotatedElement="_NqDud2EIEdqmfMQqVJOcWQ">
        <body>A behavior specification that specifies the behavior of the classifier itself.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqDueWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqDuemEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqzVV2EIEdqmfMQqVJOcWQ" name="interfaceRealization" type="_NqzVSGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ _NqpkJ2EIEdqmfMQqVJOcWQ" association="_Nq8fIGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NqzVWGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqzVWWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqzVWmEIEdqmfMQqVJOcWQ" annotatedElement="_NqzVV2EIEdqmfMQqVJOcWQ"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqzVW2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqzVXGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ns4Yw2EIEdqmfMQqVJOcWQ" name="ownedTrigger" type="_NsvO22EIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_NtL6wGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Ns4YxGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Ns4YxWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ns4YxmEIEdqmfMQqVJOcWQ" annotatedElement="_Ns4Yw2EIEdqmfMQqVJOcWQ">
        <body>References Trigger descriptions owned by a Classifier.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ns4Yx2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ns4YyGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Ns4YyWEIEdqmfMQqVJOcWQ" name="Event" isAbstract="true">
    <ownedComment xmi:id="_Ns4YymEIEdqmfMQqVJOcWQ" annotatedElement="_Ns4YyWEIEdqmfMQqVJOcWQ">
      <body>An event is the specification of some occurrence that may potentially trigger effects by an object.</body>
    </ownedComment>
    <generalization xmi:id="_Ns4Yy2EIEdqmfMQqVJOcWQ" general="_Nimb8GEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NtCJwGEIEdqmfMQqVJOcWQ" name="A_reception_signal" memberEnd="_NtCJwWEIEdqmfMQqVJOcWQ _NsvO72EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NtCJwWEIEdqmfMQqVJOcWQ" type="_NsvO6WEIEdqmfMQqVJOcWQ" association="_NtCJwGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtCJwmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtCJw2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NtCJxGEIEdqmfMQqVJOcWQ" name="A_operation_callEvent" memberEnd="_NtCJxWEIEdqmfMQqVJOcWQ _Nsld_WEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NtCJxWEIEdqmfMQqVJOcWQ" type="_Nsld-mEIEdqmfMQqVJOcWQ" association="_NtCJxGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtCJxmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtCJx2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NtCJyGEIEdqmfMQqVJOcWQ" name="A_signal_signalEvent" memberEnd="_NtCJyWEIEdqmfMQqVJOcWQ _NsvO_2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NtCJyWEIEdqmfMQqVJOcWQ" type="_NsvO_GEIEdqmfMQqVJOcWQ" association="_NtCJyGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtCJymEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtCJy2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NtCJzGEIEdqmfMQqVJOcWQ" name="A_ownedReception_interface" memberEnd="_NtCJz2EIEdqmfMQqVJOcWQ _NsvO42EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NtCJzWEIEdqmfMQqVJOcWQ" general="_NkPaLmEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NtCJzmEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NtCJz2EIEdqmfMQqVJOcWQ" type="_NqzVLGEIEdqmfMQqVJOcWQ" association="_NtCJzGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtCJ0GEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtCJ0WEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NtCJ0mEIEdqmfMQqVJOcWQ" name="A_ownedReception_class" memberEnd="_NsvO1WEIEdqmfMQqVJOcWQ _NtCJ1WEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NtCJ02EIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NtCJ1GEIEdqmfMQqVJOcWQ" general="_NkPaLmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NtCJ1WEIEdqmfMQqVJOcWQ" type="_Ni59kGEIEdqmfMQqVJOcWQ" association="_NtCJ0mEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtCJ1mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtCJ12EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NtCJ22EIEdqmfMQqVJOcWQ" name="A_changeExpression_changeEvent" memberEnd="_NsleBGEIEdqmfMQqVJOcWQ _NtCJ3WEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NtCJ3GEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NtCJ3WEIEdqmfMQqVJOcWQ" type="_NsleAWEIEdqmfMQqVJOcWQ" association="_NtCJ22EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nj8fTGEIEdqmfMQqVJOcWQ" name="A_raisedException_behavioralFeature" memberEnd="_NjM462EIEdqmfMQqVJOcWQ _Nj8fTWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nj8fTWEIEdqmfMQqVJOcWQ" type="_NjM44WEIEdqmfMQqVJOcWQ" association="_Nj8fTGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtCJ3mEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtCJ32EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NtCJ4GEIEdqmfMQqVJOcWQ" name="A_ownedAttribute_owningSignal" memberEnd="_NtCJ42EIEdqmfMQqVJOcWQ _NsvO9mEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NtCJ4WEIEdqmfMQqVJOcWQ" general="_NjyuPWEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NtCJ4mEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NtCJ42EIEdqmfMQqVJOcWQ" name="owningSignal" type="_NsvO82EIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ _NjyuQGEIEdqmfMQqVJOcWQ _NidR-2EIEdqmfMQqVJOcWQ" association="_NtCJ4GEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtCJ5GEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtCJ5WEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NtL6wGEIEdqmfMQqVJOcWQ" name="A_ownedTrigger_behavioredClassifier" memberEnd="_Ns4Yw2EIEdqmfMQqVJOcWQ _NtL6wmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NtL6wWEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NtL6wmEIEdqmfMQqVJOcWQ" type="_NqDua2EIEdqmfMQqVJOcWQ" association="_NtL6wGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtL6w2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtL6xGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NtL6xWEIEdqmfMQqVJOcWQ" name="A_event_trigger" memberEnd="_NsvO3mEIEdqmfMQqVJOcWQ _NtL6xmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NtL6xmEIEdqmfMQqVJOcWQ" type="_NsvO22EIEdqmfMQqVJOcWQ" association="_NtL6xWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NtL69GEIEdqmfMQqVJOcWQ" name="EncapsulatedClassifier" isAbstract="true">
    <ownedComment xmi:id="_NtL69WEIEdqmfMQqVJOcWQ" annotatedElement="_NtL69GEIEdqmfMQqVJOcWQ">
      <body>Extends a classifier with the ability to own ports as specific and type checked interaction points.</body>
    </ownedComment>
    <generalization xmi:id="_NtL69mEIEdqmfMQqVJOcWQ" general="_NrGQLGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NtL692EIEdqmfMQqVJOcWQ" name="ownedPort" type="_NtL6x2EIEdqmfMQqVJOcWQ" subsettedProperty="_NrGQMmEIEdqmfMQqVJOcWQ" association="_NtL7CmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NtL6-GEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NtL6-WEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NtL6-mEIEdqmfMQqVJOcWQ" annotatedElement="_NtL692EIEdqmfMQqVJOcWQ">
        <body>References a set of ports that an encapsulated classifier owns.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtL6-2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtL6_GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nq8fL2EIEdqmfMQqVJOcWQ" name="ConnectorEnd">
    <ownedComment xmi:id="_Nq8fMGEIEdqmfMQqVJOcWQ" annotatedElement="_Nq8fL2EIEdqmfMQqVJOcWQ">
      <body>A connector end is an endpoint of a connector, which attaches the connector to a connectable element. Each connector end is part of one connector.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nq8fMWEIEdqmfMQqVJOcWQ" name="multiplicity" constrainedElement="_Nq8fL2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nq8fMmEIEdqmfMQqVJOcWQ" annotatedElement="_Nq8fMWEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the connector end may not be more general than the multiplicity of the association typing the owning connector.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nq8fM2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NtL6_WEIEdqmfMQqVJOcWQ" name="part_with_port_empty" constrainedElement="_Nq8fL2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtL6_mEIEdqmfMQqVJOcWQ" annotatedElement="_NtL6_WEIEdqmfMQqVJOcWQ">
        <body>If a connector end is attached to a port of the containing classifier, partWithPort will be empty.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtL6_2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NtL7AGEIEdqmfMQqVJOcWQ" name="role_and_part_with_port" constrainedElement="_Nq8fL2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtL7AWEIEdqmfMQqVJOcWQ" annotatedElement="_NtL7AGEIEdqmfMQqVJOcWQ">
        <body>If a connector end references both a role and a partWithPort, then the role must be a port that is defined by the type of the partWithPort.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtL7AmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NtL7A2EIEdqmfMQqVJOcWQ" name="self_part_with_port" constrainedElement="_Nq8fL2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtL7BGEIEdqmfMQqVJOcWQ" annotatedElement="_NtL7A2EIEdqmfMQqVJOcWQ">
        <body>The property held in self.partWithPort must not be a Port.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtL7BWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nq8fNGEIEdqmfMQqVJOcWQ" general="_NimbYGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nq8fNWEIEdqmfMQqVJOcWQ" name="definingEnd" type="_Ni59sGEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" association="_NrQBNWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_Nq8fNmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nq8fN2EIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nq8fOGEIEdqmfMQqVJOcWQ" annotatedElement="_Nq8fNWEIEdqmfMQqVJOcWQ">
        <body>A derived association referencing the corresponding association end on the association which types the connector owing this connector end. This association is derived by selecting the association end at the same place in the ordering of association ends as this connector end.

</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nq8fOWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nq8fOmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nq8fO2EIEdqmfMQqVJOcWQ" name="role" type="_NrGQSmEIEdqmfMQqVJOcWQ" association="_NrQBOWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nq8fPGEIEdqmfMQqVJOcWQ" annotatedElement="_Nq8fO2EIEdqmfMQqVJOcWQ">
        <body>The connectable element attached at this connector end. When an instance of the containing classifier is created, a link may (depending on the multiplicities) be created to an instance of the classifier that types this connectable element.

</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nq8fPWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nq8fPmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NtL7BmEIEdqmfMQqVJOcWQ" name="partWithPort" type="_Ni59sGEIEdqmfMQqVJOcWQ" association="_NtVEsGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtL7B2EIEdqmfMQqVJOcWQ" annotatedElement="_NtL7BmEIEdqmfMQqVJOcWQ">
        <body>Indicates the role of the internal structure of a classifier with the port to which the connector end is attached.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtL7CGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtL7CWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_Nq8fP2EIEdqmfMQqVJOcWQ" name="getDefiningEnd" visibility="protected" type="_Ni59sGEIEdqmfMQqVJOcWQ">
      <returnResult xmi:id="_Nq8fQGEIEdqmfMQqVJOcWQ" type="_Ni59sGEIEdqmfMQqVJOcWQ" direction="return"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NtL7CmEIEdqmfMQqVJOcWQ" name="A_encapsulatedClassifier_ownedPort" memberEnd="_NtL7DWEIEdqmfMQqVJOcWQ _NtL692EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NtL7DGEIEdqmfMQqVJOcWQ" general="_NrQBFGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NtL7DWEIEdqmfMQqVJOcWQ" type="_NtL69GEIEdqmfMQqVJOcWQ" redefinedProperty="_NrQBGGEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMaWEIEdqmfMQqVJOcWQ" association="_NtL7CmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtL7DmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtL7D2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NtL7EGEIEdqmfMQqVJOcWQ" name="A_required_port" memberEnd="_NtL63GEIEdqmfMQqVJOcWQ _NtL7EWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NtL7EWEIEdqmfMQqVJOcWQ" type="_NtL6x2EIEdqmfMQqVJOcWQ" association="_NtL7EGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtL7EmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtL7E2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NtL7FGEIEdqmfMQqVJOcWQ" name="A_redefinedPort_port" memberEnd="_NtL64mEIEdqmfMQqVJOcWQ _NtL7FmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NtL7FWEIEdqmfMQqVJOcWQ" general="_NkPaLGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NtL7FmEIEdqmfMQqVJOcWQ" type="_NtL6x2EIEdqmfMQqVJOcWQ" association="_NtL7FGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtL7F2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtL7GGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NtL7GWEIEdqmfMQqVJOcWQ" name="A_provided_port" memberEnd="_NtL7GmEIEdqmfMQqVJOcWQ _NtL65mEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NtL7GmEIEdqmfMQqVJOcWQ" type="_NtL6x2EIEdqmfMQqVJOcWQ" association="_NtL7GWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtL7G2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtL7HGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NtVEsGEIEdqmfMQqVJOcWQ" name="A_partWithPort_connectorEnd" memberEnd="_NtL7BmEIEdqmfMQqVJOcWQ _NtVEsWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NtVEsWEIEdqmfMQqVJOcWQ" type="_Nq8fL2EIEdqmfMQqVJOcWQ" association="_NtVEsGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NtVEtGEIEdqmfMQqVJOcWQ" name="CollaborationUse">
    <ownedComment xmi:id="_NtVEtWEIEdqmfMQqVJOcWQ" annotatedElement="_NtVEtGEIEdqmfMQqVJOcWQ">
      <body>A collaboration use represents one particular use of a collaboration to explain the relationships between the properties of a classifier. A collaboration use shows how the pattern described by a collaboration is applied in a given context, by binding specific entities from that context to the roles of the collaboration. Depending on the context, these entities could be structural features of a classifier, instance specifications, or even roles in some containing collaboration. There may be multiple occurrences of a given collaboration within a classifier, each involving a different set of roles and connectors. A given role or connector may be involved in multiple occurrences of the same or different collaborations.



Associated dependencies map features of the collaboration type to features in the classifier. These dependencies indicate which role in the classifier plays which role in the collaboration.

</body>
    </ownedComment>
    <ownedRule xmi:id="_NtVEtmEIEdqmfMQqVJOcWQ" name="client_elements" constrainedElement="_NtVEtGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtVEt2EIEdqmfMQqVJOcWQ" annotatedElement="_NtVEtmEIEdqmfMQqVJOcWQ">
        <body>All the client elements of a roleBinding are in one classifier and all supplier elements of a roleBinding are in one collaboration and they are compatible.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtVEuGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NtVEuWEIEdqmfMQqVJOcWQ" name="every_role" constrainedElement="_NtVEtGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtVEumEIEdqmfMQqVJOcWQ" annotatedElement="_NtVEuWEIEdqmfMQqVJOcWQ">
        <body>Every role in the collaboration is bound within the collaboration use to a connectable element within the classifier or operation.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtVEu2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NtVEvGEIEdqmfMQqVJOcWQ" name="connectors" constrainedElement="_NtVEtGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtVEvWEIEdqmfMQqVJOcWQ" annotatedElement="_NtVEvGEIEdqmfMQqVJOcWQ">
        <body>The connectors in the classifier connect according to the connectors in the collaboration</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtVEvmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NtVEv2EIEdqmfMQqVJOcWQ" general="_NjfzQGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NtVEwGEIEdqmfMQqVJOcWQ" name="type" type="_NtVEymEIEdqmfMQqVJOcWQ" association="_Nte1tWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtVEwWEIEdqmfMQqVJOcWQ" annotatedElement="_NtVEwGEIEdqmfMQqVJOcWQ">
        <body>The collaboration which is used in this occurrence. The collaboration defines the cooperation between its roles which are mapped to properties of the classifier owning the collaboration use.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtVEwmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtVEw2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NtVExGEIEdqmfMQqVJOcWQ" name="roleBinding" type="_NqfzSmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_Nte1uWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NtVExWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NtVExmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NtVEx2EIEdqmfMQqVJOcWQ" annotatedElement="_NtVExGEIEdqmfMQqVJOcWQ">
        <body>A mapping between features of the collaboration type and features of the classifier or operation. This mapping indicates which connectable element of the classifier or operation plays which role(s) in the collaboration. A connectable element may be bound to multiple roles in the same collaboration use (that is, it may play multiple roles).

</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtVEyGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtVEyWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NtVEymEIEdqmfMQqVJOcWQ" name="Collaboration">
    <ownedComment xmi:id="_NtVEy2EIEdqmfMQqVJOcWQ" annotatedElement="_NtVEymEIEdqmfMQqVJOcWQ">
      <body>A collaboration is represented as a kind of classifier and defines a set of cooperating entities to be played by instances (its roles), as well as a set of connectors that define communication paths between the participating instances. The cooperating entities are the properties of the collaboration.



A collaboration specifies a view (or projection) of a set of cooperating classifiers. It describes the required links between instances that play the roles of the collaboration, as well as the features required of the classifiers that specify the participating instances. Several collaborations may describe different projections of the same set of classifiers.

</body>
    </ownedComment>
    <generalization xmi:id="_NtVEzWEIEdqmfMQqVJOcWQ" general="_NrGQLGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NtVEzmEIEdqmfMQqVJOcWQ" general="_NqDua2EIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NtVEz2EIEdqmfMQqVJOcWQ" name="collaborationRole" type="_NrGQSmEIEdqmfMQqVJOcWQ" subsettedProperty="_NrGQPmEIEdqmfMQqVJOcWQ" association="_Nte1yGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtVE0GEIEdqmfMQqVJOcWQ" annotatedElement="_NtVEz2EIEdqmfMQqVJOcWQ">
        <body>References connectable elements (possibly owned by other classifiers) which represent roles that instances may play in this collaboration.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtVE0WEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtVE0mEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nte1tWEIEdqmfMQqVJOcWQ" name="A_type_collaborationUse" memberEnd="_NtVEwGEIEdqmfMQqVJOcWQ _Nte1tmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nte1tmEIEdqmfMQqVJOcWQ" type="_NtVEtGEIEdqmfMQqVJOcWQ" association="_Nte1tWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nte1t2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nte1uGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nte1uWEIEdqmfMQqVJOcWQ" name="A_roleBinding_collaborationUse" memberEnd="_NtVExGEIEdqmfMQqVJOcWQ _Nte1u2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nte1umEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nte1u2EIEdqmfMQqVJOcWQ" type="_NtVEtGEIEdqmfMQqVJOcWQ" association="_Nte1uWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nte1vGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nte1vWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nte1vmEIEdqmfMQqVJOcWQ" name="A_classifier_representation" memberEnd="_NtVE02EIEdqmfMQqVJOcWQ _Nte1wGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nte1v2EIEdqmfMQqVJOcWQ" general="_Nte1w2EIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nte1wGEIEdqmfMQqVJOcWQ" type="_NiTgcGEIEdqmfMQqVJOcWQ" redefinedProperty="_Nte1xWEIEdqmfMQqVJOcWQ" association="_Nte1vmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nte1wWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nte1wmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nte1w2EIEdqmfMQqVJOcWQ" name="A_collaborationUse_classifier" memberEnd="_Nte1xWEIEdqmfMQqVJOcWQ _NtVE12EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nte1xGEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nte1xWEIEdqmfMQqVJOcWQ" type="_NiTgcGEIEdqmfMQqVJOcWQ" association="_Nte1w2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nte1xmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nte1x2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nte1yGEIEdqmfMQqVJOcWQ" name="A_collaborationRole_collaboration" memberEnd="_NtVEz2EIEdqmfMQqVJOcWQ _Nte1ymEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nte1yWEIEdqmfMQqVJOcWQ" general="_NrQBH2EIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nte1ymEIEdqmfMQqVJOcWQ" type="_NtVEymEIEdqmfMQqVJOcWQ" redefinedProperty="_NrQBIWEIEdqmfMQqVJOcWQ" association="_Nte1yGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nte1y2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nte1zGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nte1zWEIEdqmfMQqVJOcWQ" name="CreateObjectAction">
    <ownedComment xmi:id="_Nte1zmEIEdqmfMQqVJOcWQ" annotatedElement="_Nte1zWEIEdqmfMQqVJOcWQ">
      <body>CreateObjectAction is an action that creates an object that conforms to a statically specified classifier and puts it on an output pin at runtime.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nte1z2EIEdqmfMQqVJOcWQ" name="classifier_not_abstract" constrainedElement="_Nte1zWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nte10GEIEdqmfMQqVJOcWQ" annotatedElement="_Nte1z2EIEdqmfMQqVJOcWQ">
        <body>The classifier cannot be abstract.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nte10WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>not (self.classifier.isAbstract = #true)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nte10mEIEdqmfMQqVJOcWQ" name="classifier_not_association_class" constrainedElement="_Nte1zWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nte102EIEdqmfMQqVJOcWQ" annotatedElement="_Nte10mEIEdqmfMQqVJOcWQ">
        <body>The classifier cannot be an association class</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nte11GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>not self.classifier.oclIsKindOf(AssociationClass)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nte11WEIEdqmfMQqVJOcWQ" name="same_type" constrainedElement="_Nte1zWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nte11mEIEdqmfMQqVJOcWQ" annotatedElement="_Nte11WEIEdqmfMQqVJOcWQ">
        <body>The type of the result pin must be the same as the classifier of the action.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nte112EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.result.type = self.classifier</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nte12GEIEdqmfMQqVJOcWQ" name="multiplicity" constrainedElement="_Nte1zWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nte12WEIEdqmfMQqVJOcWQ" annotatedElement="_Nte12GEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the output pin is 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nte12mEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.result.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nte122EIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nte13GEIEdqmfMQqVJOcWQ" name="classifier" type="_NiTgcGEIEdqmfMQqVJOcWQ" association="_Nt7h9mEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nte13WEIEdqmfMQqVJOcWQ" annotatedElement="_Nte13GEIEdqmfMQqVJOcWQ">
        <body>Classifier to be instantiated.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nte13mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nte132EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nte14GEIEdqmfMQqVJOcWQ" name="result" type="_Nu-DfGEIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0c2EIEdqmfMQqVJOcWQ" association="_Nt7h-mEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nte14WEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nte14mEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nte142EIEdqmfMQqVJOcWQ" annotatedElement="_Nte14GEIEdqmfMQqVJOcWQ">
        <body>Gives the output pin on which the result is put.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nte15GEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nte15WEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nte15mEIEdqmfMQqVJOcWQ" name="DestroyObjectAction">
    <ownedComment xmi:id="_Nte152EIEdqmfMQqVJOcWQ" annotatedElement="_Nte15mEIEdqmfMQqVJOcWQ">
      <body>This action destroys the object on its input pin at runtime. The object may be a link object, in which case the semantics of DestroyLinkAction also applies.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nte16GEIEdqmfMQqVJOcWQ" name="multiplicity" constrainedElement="_Nte15mEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nte16WEIEdqmfMQqVJOcWQ" annotatedElement="_Nte16GEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the input pin is 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nte16mEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.target.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nte162EIEdqmfMQqVJOcWQ" name="no_type" constrainedElement="_Nte15mEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nte17GEIEdqmfMQqVJOcWQ" annotatedElement="_Nte162EIEdqmfMQqVJOcWQ">
        <body>The input pin has no type.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nte17WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.target.type->size() = 0</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nte17mEIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nte172EIEdqmfMQqVJOcWQ" name="isDestroyLinks">
      <ownedComment xmi:id="_Nte18GEIEdqmfMQqVJOcWQ" annotatedElement="_Nte172EIEdqmfMQqVJOcWQ">
        <body>Specifies whether links in which the object participates are destroyed along with the object.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_Nte18WEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nte18mEIEdqmfMQqVJOcWQ" name="isDestroyOwnedObjects">
      <ownedComment xmi:id="_Nte182EIEdqmfMQqVJOcWQ" annotatedElement="_Nte18mEIEdqmfMQqVJOcWQ">
        <body>Specifies whether objects owned by the object are destroyed along with the object.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_Nte19GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nte19WEIEdqmfMQqVJOcWQ" name="target" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NuErkGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nte19mEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nte192EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nte1-GEIEdqmfMQqVJOcWQ" annotatedElement="_Nte19WEIEdqmfMQqVJOcWQ">
        <body>The input pin providing the object to be destroyed.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nte1-WEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nte1-mEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NtomsGEIEdqmfMQqVJOcWQ" name="TestIdentityAction">
    <ownedComment xmi:id="_NtomsWEIEdqmfMQqVJOcWQ" annotatedElement="_NtomsGEIEdqmfMQqVJOcWQ">
      <body>This action returns true if the two input values are the same identity, false if they are not.</body>
    </ownedComment>
    <ownedRule xmi:id="_NtomsmEIEdqmfMQqVJOcWQ" name="no_type" constrainedElement="_NtomsGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntoms2EIEdqmfMQqVJOcWQ" annotatedElement="_NtomsmEIEdqmfMQqVJOcWQ">
        <body>The input pins have no type.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtomtGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.first.type->size() = 0
and self.second.type->size() = 0
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NtomtWEIEdqmfMQqVJOcWQ" name="multiplicity" constrainedElement="_NtomsGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtomtmEIEdqmfMQqVJOcWQ" annotatedElement="_NtomtWEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the input pins is 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ntomt2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.first.multiplicity.is(1,1)
and self.second.multiplicity.is(1,1)
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NtomuGEIEdqmfMQqVJOcWQ" name="result_is_boolean" constrainedElement="_NtomsGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtomuWEIEdqmfMQqVJOcWQ" annotatedElement="_NtomuGEIEdqmfMQqVJOcWQ">
        <body>The type of the result is Boolean.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtomumEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.result.type.oclIsTypeOf(Boolean)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Ntomu2EIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NtomvGEIEdqmfMQqVJOcWQ" name="first" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NuErlWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NtomvWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NtomvmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ntomv2EIEdqmfMQqVJOcWQ" annotatedElement="_NtomvGEIEdqmfMQqVJOcWQ">
        <body>Gives the pin on which an object is placed.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtomwGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtomwWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NtomwmEIEdqmfMQqVJOcWQ" name="second" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NuErmmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Ntomw2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NtomxGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NtomxWEIEdqmfMQqVJOcWQ" annotatedElement="_NtomwmEIEdqmfMQqVJOcWQ">
        <body>Gives the pin on which an object is placed.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtomxmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ntomx2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NtomyGEIEdqmfMQqVJOcWQ" name="result" type="_Nu-DfGEIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0c2EIEdqmfMQqVJOcWQ" association="_NuErn2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NtomyWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NtomymEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ntomy2EIEdqmfMQqVJOcWQ" annotatedElement="_NtomyGEIEdqmfMQqVJOcWQ">
        <body>Tells whether the two input objects are identical.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtomzGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtomzWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NtomzmEIEdqmfMQqVJOcWQ" name="ReadSelfAction">
    <ownedComment xmi:id="_Ntomz2EIEdqmfMQqVJOcWQ" annotatedElement="_NtomzmEIEdqmfMQqVJOcWQ">
      <body>Every action is ultimately a part of some behavior, which is in turn optionally attached in some way to the specification of a classifier; for example as the body of a method or as part of a state machine. When the behavior executes, it does so in the context of some specific host instance of that classifier. This action produces this host instance, if any, on its output pin. The type of the output pin is the classifier to which the behavior is associated in the user model.</body>
    </ownedComment>
    <ownedRule xmi:id="_Ntom0GEIEdqmfMQqVJOcWQ" name="contained" constrainedElement="_NtomzmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntom0WEIEdqmfMQqVJOcWQ" annotatedElement="_Ntom0GEIEdqmfMQqVJOcWQ">
        <body>The action must be contained in an behavior that has a host classifier.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ntom0mEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.context->size() = 1</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Ntom02EIEdqmfMQqVJOcWQ" name="not_static" constrainedElement="_NtomzmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntom1GEIEdqmfMQqVJOcWQ" annotatedElement="_Ntom02EIEdqmfMQqVJOcWQ">
        <body>If the action is contained in an behavior that is acting as the body of a method, then the operation of the method must not be static.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ntom1WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Ntom1mEIEdqmfMQqVJOcWQ" name="type" constrainedElement="_NtomzmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntom12EIEdqmfMQqVJOcWQ" annotatedElement="_Ntom1mEIEdqmfMQqVJOcWQ">
        <body>The type of the result output pin is the host classifier.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ntom2GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.result.type = self.context</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Ntom2WEIEdqmfMQqVJOcWQ" name="multiplicity" constrainedElement="_NtomzmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntom2mEIEdqmfMQqVJOcWQ" annotatedElement="_Ntom2WEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the result output pin is 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ntom22EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.result.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Ntom3GEIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Ntom3WEIEdqmfMQqVJOcWQ" name="result" type="_Nu-DfGEIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0c2EIEdqmfMQqVJOcWQ" association="_NuErpGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Ntom3mEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Ntom32EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ntom4GEIEdqmfMQqVJOcWQ" annotatedElement="_Ntom3WEIEdqmfMQqVJOcWQ">
        <body>Gives the output pin on which the hosting object is placed.

</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ntom4WEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ntom4mEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Ntom42EIEdqmfMQqVJOcWQ" name="StructuralFeatureAction" isAbstract="true">
    <ownedComment xmi:id="_Ntom5GEIEdqmfMQqVJOcWQ" annotatedElement="_Ntom42EIEdqmfMQqVJOcWQ">
      <body>This abstract action class statically specifies the structural feature being accessed. The object to access is specified dynamically, by referring to an input pin on which the object will be placed at runtime. The type of the value of this pin is the classifier that owns the specified structural feature, and the value's multiplicity is 1..1.</body>
    </ownedComment>
    <ownedRule xmi:id="_Ntom5WEIEdqmfMQqVJOcWQ" name="not_static" constrainedElement="_Ntom42EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntom5mEIEdqmfMQqVJOcWQ" annotatedElement="_Ntom5WEIEdqmfMQqVJOcWQ">
        <body>The structural feature must not be static.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ntom52EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.structuralFeature.isStatic = #false</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Ntom6GEIEdqmfMQqVJOcWQ" name="same_type" constrainedElement="_Ntom42EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntom6WEIEdqmfMQqVJOcWQ" annotatedElement="_Ntom6GEIEdqmfMQqVJOcWQ">
        <body>The type of the object input pin is the same as the classifier of the object passed on this pin.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ntom6mEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Ntom62EIEdqmfMQqVJOcWQ" name="multiplicity" constrainedElement="_Ntom42EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntom7GEIEdqmfMQqVJOcWQ" annotatedElement="_Ntom62EIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the input pin must be 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ntom7WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.object.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Ntom7mEIEdqmfMQqVJOcWQ" name="visibility" constrainedElement="_Ntom42EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntom72EIEdqmfMQqVJOcWQ" annotatedElement="_Ntom7mEIEdqmfMQqVJOcWQ">
        <body>Visibility of structural feature must allow access to the object performing the action.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ntom8GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>let host : Classifier = self.context in
self.structuralFeature.visibility = #public
or host = self.structuralFeature.featuringClassifier.type
or (self.structuralFeature.visibility = #protected and host.allSupertypes
->includes(self.structuralFeature.featuringClassifier.type)))
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Ntom8WEIEdqmfMQqVJOcWQ" name="one_featuring_classifier" constrainedElement="_Ntom42EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntom8mEIEdqmfMQqVJOcWQ" annotatedElement="_Ntom8WEIEdqmfMQqVJOcWQ">
        <body>A structural feature has exactly one featuringClassifier.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ntom82EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.structuralFeature.featuringClassifier->size() = 1</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Ntom9GEIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Ntom9WEIEdqmfMQqVJOcWQ" name="structuralFeature" type="_NiwMimEIEdqmfMQqVJOcWQ" association="_NuErqWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntom9mEIEdqmfMQqVJOcWQ" annotatedElement="_Ntom9WEIEdqmfMQqVJOcWQ">
        <body>Structural feature to be read.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ntom92EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ntom-GEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ntom-WEIEdqmfMQqVJOcWQ" name="object" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NuErrWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Ntom-mEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Ntom-2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ntom_GEIEdqmfMQqVJOcWQ" annotatedElement="_Ntom-WEIEdqmfMQqVJOcWQ">
        <body>Gives the input pin from which the object whose structural feature is to be read or written is obtained.

</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ntom_WEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ntom_mEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Ntom_2EIEdqmfMQqVJOcWQ" name="ReadStructuralFeatureAction">
    <ownedComment xmi:id="_NtonAGEIEdqmfMQqVJOcWQ" annotatedElement="_Ntom_2EIEdqmfMQqVJOcWQ">
      <body>This action reads the values of a structural feature, in order if the structural feature is ordered.</body>
    </ownedComment>
    <ownedRule xmi:id="_NtonAWEIEdqmfMQqVJOcWQ" name="type_and_ordering" constrainedElement="_Ntom_2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtonAmEIEdqmfMQqVJOcWQ" annotatedElement="_NtonAWEIEdqmfMQqVJOcWQ">
        <body>The type and ordering of the result output pin are the same as the type and ordering of the structural feature.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtonA2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.result.type = self.structuralFeature.type
and self.result.ordering = self.structuralFeature.ordering
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NtonBGEIEdqmfMQqVJOcWQ" name="multiplicity" constrainedElement="_Ntom_2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtonBWEIEdqmfMQqVJOcWQ" annotatedElement="_NtonBGEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the structural feature must be compatible with the multiplicity of the output pin.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtonBmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.structuralFeature.multiplicity.compatibleWith(self.result.multiplicity)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NtonB2EIEdqmfMQqVJOcWQ" general="_Ntom42EIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NtonCGEIEdqmfMQqVJOcWQ" name="result" type="_Nu-DfGEIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0c2EIEdqmfMQqVJOcWQ" association="_NuErsmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NtonCWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NtonCmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NtonC2EIEdqmfMQqVJOcWQ" annotatedElement="_NtonCGEIEdqmfMQqVJOcWQ">
        <body>Gives the output pin on which the result is put.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtonDGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtonDWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NtonDmEIEdqmfMQqVJOcWQ" name="WriteStructuralFeatureAction" isAbstract="true">
    <ownedComment xmi:id="_NtonD2EIEdqmfMQqVJOcWQ" annotatedElement="_NtonDmEIEdqmfMQqVJOcWQ">
      <body>A write structural feature action operates on a structural feature of an object to modify its values. It has an input pin on which the value that will be added or removed is put. Other aspects of write structural feature actions are inherited from StructuralFeatureAction.</body>
    </ownedComment>
    <ownedRule xmi:id="_NtonEGEIEdqmfMQqVJOcWQ" name="input_pin" constrainedElement="_NtonDmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtonEWEIEdqmfMQqVJOcWQ" annotatedElement="_NtonEGEIEdqmfMQqVJOcWQ">
        <body>The type input pin is the same as the classifier of the structural feature.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtonEmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.value.type = self.structuralFeature.featuringClassifier</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NtonE2EIEdqmfMQqVJOcWQ" name="multiplicity" constrainedElement="_NtonDmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtonFGEIEdqmfMQqVJOcWQ" annotatedElement="_NtonE2EIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the input pin is 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtonFWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.value.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NtonFmEIEdqmfMQqVJOcWQ" general="_Ntom42EIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NtonF2EIEdqmfMQqVJOcWQ" name="value" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NuErt2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NtonGGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NtonGWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NtonGmEIEdqmfMQqVJOcWQ" annotatedElement="_NtonF2EIEdqmfMQqVJOcWQ">
        <body>Value to be added or removed from the structural feature.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtonG2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtonHGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NtonHWEIEdqmfMQqVJOcWQ" name="ClearStructuralFeatureAction">
    <ownedComment xmi:id="_NtonHmEIEdqmfMQqVJOcWQ" annotatedElement="_NtonHWEIEdqmfMQqVJOcWQ">
      <body>This action removes all values of a structural feature.</body>
    </ownedComment>
    <generalization xmi:id="_NtonH2EIEdqmfMQqVJOcWQ" general="_Ntom42EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NtonIGEIEdqmfMQqVJOcWQ" name="RemoveStructuralFeatureValueAction">
    <ownedComment xmi:id="_NtonIWEIEdqmfMQqVJOcWQ" annotatedElement="_NtonIGEIEdqmfMQqVJOcWQ">
      <body>The object to access is specified dynamically, by referring to an input pin on which the object will be placed at runtime. The type of the value of this pin is the classifier that owns the specified structural feature, and the value's multiplicity is 1..1.



Structural features are potentially multi-valued and ordered, and may support duplicates, so the action supports specification of removal points for new values. It also supports the removal of all duplicate values.

</body>
    </ownedComment>
    <ownedRule xmi:id="_NtonImEIEdqmfMQqVJOcWQ" name="non_unique_removal" constrainedElement="_NtonIGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtonI2EIEdqmfMQqVJOcWQ" annotatedElement="_NtonImEIEdqmfMQqVJOcWQ">
        <body>Actions removing a value from ordered nonunique structural features must have a single removeAt input pin if isRemoveDuplicates is false. It must be of type Unlimited Natural with multiplicity 1..1. Otherwise, the action has no removeAt input pin.

</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtonJGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NtonJWEIEdqmfMQqVJOcWQ" general="_NtonDmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NtonJmEIEdqmfMQqVJOcWQ" name="isRemoveDuplicates">
      <ownedComment xmi:id="_NtonJ2EIEdqmfMQqVJOcWQ" annotatedElement="_NtonJmEIEdqmfMQqVJOcWQ">
        <body>Specifies whether to remove duplicates of the value in nonunique structural features.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NtonKGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NtonKWEIEdqmfMQqVJOcWQ" name="removeAt" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NuYNkGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NtonKmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NtonK2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NtonLGEIEdqmfMQqVJOcWQ" annotatedElement="_NtonKWEIEdqmfMQqVJOcWQ">
        <body>Specifies the position of an existing value to remove in ordered nonunique structural features. The type of the pin is UnlimitedNatural, but the value cannot be zero or unlimited.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtonLWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtonLmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NtonL2EIEdqmfMQqVJOcWQ" name="AddStructuralFeatureValueAction">
    <ownedComment xmi:id="_NtonMGEIEdqmfMQqVJOcWQ" annotatedElement="_NtonL2EIEdqmfMQqVJOcWQ">
      <body>Structural Features are potentially multi-valued and ordered, so the action supports specification of insertion points for new values. It also supports the removal of existing values of the structural feature before the new value is added.



The object to access is specified dynamically, by referring to an input pin on which the object will be placed at runtime. The type of the value of this pin is the classifier that owns the specified structural feature, and the value's multiplicity is 1..1.

</body>
    </ownedComment>
    <ownedRule xmi:id="_NtonMWEIEdqmfMQqVJOcWQ" name="unlimited_natural_and_multiplicity" constrainedElement="_NtonL2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtonMmEIEdqmfMQqVJOcWQ" annotatedElement="_NtonMWEIEdqmfMQqVJOcWQ">
        <body>Actions adding a value to ordered structural features must have a single input pin for the insertion point with type UnlimitedNatural and multiplicity of 1..1, otherwise the action has no input pin for the insertion point.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtonM2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>let insertAtPins : Collection = self.insertAt in
if self.structuralFeature.isOrdered = #false
then insertAtPins->size() = 0
else let insertAtPin : InputPin= insertAt->asSequence()->first() in
insertAtPins->size() = 1
and insertAtPin.type = UnlimitedNatural
and insertAtPin.multiplicity.is(1,1))
endif
</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NtonNGEIEdqmfMQqVJOcWQ" general="_NtonDmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NtonNWEIEdqmfMQqVJOcWQ" name="isReplaceAll">
      <ownedComment xmi:id="_NtonNmEIEdqmfMQqVJOcWQ" annotatedElement="_NtonNWEIEdqmfMQqVJOcWQ">
        <body>Specifies whether existing values of the structural feature of the object should be removed before adding the new value.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NtonN2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NtonOGEIEdqmfMQqVJOcWQ" name="insertAt" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NuErvGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NtonOWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NtonOmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NtonO2EIEdqmfMQqVJOcWQ" annotatedElement="_NtonOGEIEdqmfMQqVJOcWQ">
        <body>Gives the position at which to insert a new value or move an existing value in ordered structural features. The type of the pin is UnlimitedNatural, but the value cannot be zero. This pin is omitted for unordered structural features.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtonPGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtonPWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NtxwoGEIEdqmfMQqVJOcWQ" name="LinkAction" isAbstract="true">
    <ownedComment xmi:id="_NtxwoWEIEdqmfMQqVJOcWQ" annotatedElement="_NtxwoGEIEdqmfMQqVJOcWQ">
      <body>A link action creates, destroys, or reads links, identifying a link by its end objects and qualifier values, if any.</body>
    </ownedComment>
    <ownedRule xmi:id="_NtxwomEIEdqmfMQqVJOcWQ" name="same_association" constrainedElement="_NtxwoGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntxwo2EIEdqmfMQqVJOcWQ" annotatedElement="_NtxwomEIEdqmfMQqVJOcWQ">
        <body>The association ends of the link end data must all be from the same association and include all and only the association ends of that association.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtxwpGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.endData->collect(end) = self.association()->collect(connection))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NtxwpWEIEdqmfMQqVJOcWQ" name="not_static" constrainedElement="_NtxwoGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtxwpmEIEdqmfMQqVJOcWQ" annotatedElement="_NtxwpWEIEdqmfMQqVJOcWQ">
        <body>The association ends of the link end data must not be static.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ntxwp2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.endData->forall(end.oclisKindOf(NavigableEnd) implies end.isStatic = #false</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NtxwqGEIEdqmfMQqVJOcWQ" name="same_pins" constrainedElement="_NtxwoGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtxwqWEIEdqmfMQqVJOcWQ" annotatedElement="_NtxwqGEIEdqmfMQqVJOcWQ">
        <body>The input pins of the action are the same as the pins of the link end data and insertion pins.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtxwqmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.input->asSet() =
let ledpins : Set = self.endData->collect(value) in
if self.oclIsKindOf(LinkEndCreationData)
then ledpins->union(self.endData.oclAsType(LinkEndCreationData).insertAt)
else ledpins
</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Ntxwq2EIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NtxwrGEIEdqmfMQqVJOcWQ" name="endData" type="_NtxwvWEIEdqmfMQqVJOcWQ" association="_NuOckGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NtxwrWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NtxwrmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ntxwr2EIEdqmfMQqVJOcWQ" annotatedElement="_NtxwrGEIEdqmfMQqVJOcWQ">
        <body>Data identifying one end of a link by the objects on its ends and qualifiers.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtxwsGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtxwsWEIEdqmfMQqVJOcWQ" value="2"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NtxwsmEIEdqmfMQqVJOcWQ" name="inputValue" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NuYNp2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Ntxws2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NtxwtGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NtxwtWEIEdqmfMQqVJOcWQ" annotatedElement="_NtxwsmEIEdqmfMQqVJOcWQ">
        <body>Pins taking end objects and qualifier values as input.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtxwtmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ntxwt2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NtxwuGEIEdqmfMQqVJOcWQ" name="association" type="_Ni59cmEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_NtxwumEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtxwuWEIEdqmfMQqVJOcWQ" annotatedElement="_NtxwuGEIEdqmfMQqVJOcWQ">
        <body>The association operates on LinkAction. It returns the association of the action.</body>
      </ownedComment>
      <ownedRule xmi:id="_NtxwumEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NtxwuGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ntxwu2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = self.endData->asSequence().first().end.association</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NtxwvGEIEdqmfMQqVJOcWQ" type="_Ni59cmEIEdqmfMQqVJOcWQ" direction="return"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Ntxw0WEIEdqmfMQqVJOcWQ" name="ReadLinkAction">
    <ownedComment xmi:id="_Ntxw0mEIEdqmfMQqVJOcWQ" annotatedElement="_Ntxw0WEIEdqmfMQqVJOcWQ">
      <body>This action navigates an association towards one end, which is the end that does not have an input pin to take its object (the open end). The objects put on the result output pin are the ones participating in the association at the open end, conforming to the specified qualifiers, in order if the end is ordered. The semantics is undefined for reading a link that violates the navigability or visibility of the open end.</body>
    </ownedComment>
    <ownedRule xmi:id="_Ntxw02EIEdqmfMQqVJOcWQ" name="one_open_end" constrainedElement="_Ntxw0WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntxw1GEIEdqmfMQqVJOcWQ" annotatedElement="_Ntxw02EIEdqmfMQqVJOcWQ">
        <body>Exactly one link-end data specification (the 'open' end) must not have an end object input pin.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ntxw1WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.endData->select(ed | ed.value->size() = 0)->size() = 1</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Ntxw1mEIEdqmfMQqVJOcWQ" name="type_and_ordering" constrainedElement="_Ntxw0WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntxw12EIEdqmfMQqVJOcWQ" annotatedElement="_Ntxw1mEIEdqmfMQqVJOcWQ">
        <body>The type and ordering of the result output pin are same as the type and ordering of the open association end.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ntxw2GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>let openend : AssociationEnd = self.endData->select(ed | ed.value->size() = 0)->asSequence()->first().end in
self.result.type = openend.type
and self.result.ordering = openend.ordering
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Ntxw2WEIEdqmfMQqVJOcWQ" name="compatible_multiplicity" constrainedElement="_Ntxw0WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntxw2mEIEdqmfMQqVJOcWQ" annotatedElement="_Ntxw2WEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the open association end must be compatible with the multiplicity of the result output pin.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ntxw22EIEdqmfMQqVJOcWQ" language="OCL">
        <body>let openend : AssociationEnd = self.endData->select(ed | ed.value->size() = 0)->asSequence()->first().end in
openend.multiplicity.compatibleWith(self.result.multiplicity)
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Ntxw3GEIEdqmfMQqVJOcWQ" name="navigable_open_end" constrainedElement="_Ntxw0WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntxw3WEIEdqmfMQqVJOcWQ" annotatedElement="_Ntxw3GEIEdqmfMQqVJOcWQ">
        <body>The open end must be navigable.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ntxw3mEIEdqmfMQqVJOcWQ" language="OCL">
        <body>let openend : AssociationEnd = self.endData->select(ed | ed.value->size() = 0)->asSequence()->first().end in
openend.isNavigable()
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Ntxw32EIEdqmfMQqVJOcWQ" name="visibility" constrainedElement="_Ntxw0WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntxw4GEIEdqmfMQqVJOcWQ" annotatedElement="_Ntxw32EIEdqmfMQqVJOcWQ">
        <body>Visibility of the open end must allow access to the object performing the action.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ntxw4WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>let host : Classifier = self.context in
let openend : AssociationEnd = self.endData->select(ed | ed.value->size() = 0)->asSequence()->first().end in
openend.visibility = #public
or self.endData->exists(oed | not oed.end = openend
and (host = oed.end.participant
or (openend.visibility = #protected
and host.allSupertypes->includes(oed.end.participant))))
</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Ntxw4mEIEdqmfMQqVJOcWQ" general="_NtxwoGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Ntxw42EIEdqmfMQqVJOcWQ" name="result" type="_Nu-DfGEIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0c2EIEdqmfMQqVJOcWQ" association="_NuOcnGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Ntxw5GEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Ntxw5WEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ntxw5mEIEdqmfMQqVJOcWQ" annotatedElement="_Ntxw42EIEdqmfMQqVJOcWQ">
        <body>The pin on which are put the objects participating in the association at the end not specified by the inputs.

</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ntxw52EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ntxw6GEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Ntxw6WEIEdqmfMQqVJOcWQ" name="LinkEndCreationData">
    <ownedComment xmi:id="_Ntxw6mEIEdqmfMQqVJOcWQ" annotatedElement="_Ntxw6WEIEdqmfMQqVJOcWQ">
      <body>This class is required when using CreateLinkAction, to specify insertion points for ordered ends and for replacing all links at end. A link cannot be passed as a runtime value to or from an action. Instead, a link is identified by its end objects and qualifier values, as required. This requires more than one piece of data, namely, the statically-specified end in the user model, the object on the end, and the qualifier values for that end. These pieces are brought together around LinkEndData. Each association end is identified separately with an instance of the LinkEndData class.



Qualifier values are used in CompleteActions to identify links to create.</body>
    </ownedComment>
    <ownedRule xmi:id="_Ntxw62EIEdqmfMQqVJOcWQ" name="create_link_action" constrainedElement="_Ntxw6WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntxw7GEIEdqmfMQqVJOcWQ" annotatedElement="_Ntxw62EIEdqmfMQqVJOcWQ">
        <body>LinkEndCreationData can only be end data for CreateLinkAction or one of its specializations.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ntxw7WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.LinkAction.oclIsKindOf(CreateLinkAction)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Ntxw7mEIEdqmfMQqVJOcWQ" name="single_input_pin" constrainedElement="_Ntxw6WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntxw72EIEdqmfMQqVJOcWQ" annotatedElement="_Ntxw7mEIEdqmfMQqVJOcWQ">
        <body>Link end creation data for ordered association ends must have a single input pin for the insertion point with type UnlimitedNatural and multiplicity of 1..1, otherwise the action has no input pin for the insertion point.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ntxw8GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>let insertAtPins : Collection = self.insertAt in
if self.end.ordering = #unordered
then insertAtPins->size() = 0
else let insertAtPin : InputPin = insertAts->asSequence()->first() in
insertAtPins->size() = 1
and insertAtPin.type = UnlimitedNatural
and insertAtPin.multiplicity.is(1,1))
endif
</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Ntxw8WEIEdqmfMQqVJOcWQ" general="_NtxwvWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Ntxw8mEIEdqmfMQqVJOcWQ" name="isReplaceAll">
      <ownedComment xmi:id="_Ntxw82EIEdqmfMQqVJOcWQ" annotatedElement="_Ntxw8mEIEdqmfMQqVJOcWQ">
        <body>Specifies whether the existing links emanating from the object on this end should be destroyed before creating a new link.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_Ntxw9GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ntxw9WEIEdqmfMQqVJOcWQ" name="insertAt" type="_Nu-Df2EIEdqmfMQqVJOcWQ" association="_NuOcoWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntxw9mEIEdqmfMQqVJOcWQ" annotatedElement="_Ntxw9WEIEdqmfMQqVJOcWQ">
        <body>Specifies where the new link should be inserted for ordered association ends, or where an existing link should be moved to. The type of the input is UnlimitedNatural, but the input cannot be zero. This pin is omitted for association ends that are not ordered.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ntxw92EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ntxw-GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Ntxw-WEIEdqmfMQqVJOcWQ" name="CreateLinkAction">
    <ownedComment xmi:id="_Ntxw-mEIEdqmfMQqVJOcWQ" annotatedElement="_Ntxw-WEIEdqmfMQqVJOcWQ">
      <body>This action can be used to create links and link objects. There is no return value in either case. This is so that no change of the action is required if the association is changed to an association class or vice versa. CreateLinkAction uses a specialization of LinkEndData called LinkEndCreationData, to support ordered associations. The insertion point is specified at runtime by an additional input pin, which is required for ordered association ends and omitted for unordered ends. The insertion point is a positive integer giving the position to insert the link, or unlimited, to insert at the end. Reinserting an existing end at a new position in an ordered unique structural feature moves the end to that position. CreateLinkAction also uses LinkEndCreationData to support the destruction of existing links of the association that connect any of the objects of the new link. When the link is created, this option is available on an end-by-end basis, and causes all links of the association emanating from the 

specified ends to be destroyed before the new link is created.</body>
    </ownedComment>
    <ownedRule xmi:id="_Ntxw-2EIEdqmfMQqVJOcWQ" name="association_not_abstract" constrainedElement="_Ntxw-WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntxw_GEIEdqmfMQqVJOcWQ" annotatedElement="_Ntxw-2EIEdqmfMQqVJOcWQ">
        <body>The association cannot be an abstract classifier.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ntxw_WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.association().isAbstract = #false</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Ntxw_mEIEdqmfMQqVJOcWQ" general="_NtxxDmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Ntxw_2EIEdqmfMQqVJOcWQ" name="endData" type="_Ntxw6WEIEdqmfMQqVJOcWQ" redefinedProperty="_NtxwrGEIEdqmfMQqVJOcWQ" association="_NuOcpWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NtxxAGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NtxxAWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NtxxAmEIEdqmfMQqVJOcWQ" annotatedElement="_Ntxw_2EIEdqmfMQqVJOcWQ">
        <body>Specifies ends of association and inputs.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtxxA2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtxxBGEIEdqmfMQqVJOcWQ" value="2"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NtxxBWEIEdqmfMQqVJOcWQ" name="DestroyLinkAction">
    <ownedComment xmi:id="_NtxxBmEIEdqmfMQqVJOcWQ" annotatedElement="_NtxxBWEIEdqmfMQqVJOcWQ">
      <body>This action destroys a link or a link object. Link objects can also be destroyed with DestroyObjectAction. The link is specified in the same way as link creation, even for link objects. This allows actions to remain unchanged when their associations are transformed from ordinary ones to association classes and vice versa.



DestroyLinkAction uses a specialization of LinkEndData, called LinkEndDestructionData, to support ordered nonunique associations. The position of the link to be destroyed is specified at runtime by an additional input pin, which is required for ordered nonunique association ends and omitted for other kinds of ends. This is a positive integer giving the position of the link to destroy.



DestroyLinkAction also uses LinkEndDestructionData to support the destruction of duplicate links of the association on ends that are nonunique. This option is available on an end-by-end basis, and causes all duplicate links of the association emanating from the specified ends to be destroyed.

</body>
    </ownedComment>
    <generalization xmi:id="_NtxxB2EIEdqmfMQqVJOcWQ" general="_NtxxDmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NtxxCGEIEdqmfMQqVJOcWQ" name="endData" type="_Nt7h0WEIEdqmfMQqVJOcWQ" redefinedProperty="_NtxwrGEIEdqmfMQqVJOcWQ" association="_NuYNmWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NtxxCWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NtxxCmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NtxxC2EIEdqmfMQqVJOcWQ" annotatedElement="_NtxxCGEIEdqmfMQqVJOcWQ">
        <body>Specifies ends of association and inputs.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtxxDGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtxxDWEIEdqmfMQqVJOcWQ" value="2"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NtxxDmEIEdqmfMQqVJOcWQ" name="WriteLinkAction" isAbstract="true">
    <ownedComment xmi:id="_NtxxD2EIEdqmfMQqVJOcWQ" annotatedElement="_NtxxDmEIEdqmfMQqVJOcWQ">
      <body>A write link action takes a complete identification of a link and creates or destroys it.</body>
    </ownedComment>
    <ownedRule xmi:id="_NtxxEGEIEdqmfMQqVJOcWQ" name="allow_access" constrainedElement="_NtxxDmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtxxEWEIEdqmfMQqVJOcWQ" annotatedElement="_NtxxEGEIEdqmfMQqVJOcWQ">
        <body>The visibility of at least one end must allow access to the class using the action.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nt7hoGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nt7hoWEIEdqmfMQqVJOcWQ" general="_NtxwoGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nt7homEIEdqmfMQqVJOcWQ" name="ClearAssociationAction">
    <ownedComment xmi:id="_Nt7ho2EIEdqmfMQqVJOcWQ" annotatedElement="_Nt7homEIEdqmfMQqVJOcWQ">
      <body>This action destroys all links of an association that have a particular object at one end.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nt7hpGEIEdqmfMQqVJOcWQ" name="same_type" constrainedElement="_Nt7homEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nt7hpWEIEdqmfMQqVJOcWQ" annotatedElement="_Nt7hpGEIEdqmfMQqVJOcWQ">
        <body>The type of the input pin must be the same as the type of at least one of the association ends of the association.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nt7hpmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.association->exists(end.type = self.object.type)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nt7hp2EIEdqmfMQqVJOcWQ" name="multiplicity" constrainedElement="_Nt7homEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nt7hqGEIEdqmfMQqVJOcWQ" annotatedElement="_Nt7hp2EIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the input pin is 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nt7hqWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.object.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nt7hqmEIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nt7hq2EIEdqmfMQqVJOcWQ" name="object" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NuOcqmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nt7hrGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nt7hrWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nt7hrmEIEdqmfMQqVJOcWQ" annotatedElement="_Nt7hq2EIEdqmfMQqVJOcWQ">
        <body>Gives the input pin from which is obtained the object whose participation in the association is to be cleared.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nt7hr2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nt7hsGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nt7hsWEIEdqmfMQqVJOcWQ" name="association" type="_Ni59cmEIEdqmfMQqVJOcWQ" association="_NuOcr2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nt7hsmEIEdqmfMQqVJOcWQ" annotatedElement="_Nt7hsWEIEdqmfMQqVJOcWQ">
        <body>Association to be cleared.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nt7hs2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nt7htGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nt7htWEIEdqmfMQqVJOcWQ" name="BroadcastSignalAction">
    <ownedComment xmi:id="_Nt7htmEIEdqmfMQqVJOcWQ" annotatedElement="_Nt7htWEIEdqmfMQqVJOcWQ">
      <body>BroadcastSignalAction is an action that transmits a signal instance to all the potential target objects in the system, which may cause the firing of a state machine transitions or the execution of associated activities of a target object. The argument values are available to the execution of associated behaviors. The requestor continues execution immediately after the signals are sent out. It does not wait for receipt. Any reply messages are ignored and are not transmitted to the requestor.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nt7ht2EIEdqmfMQqVJOcWQ" name="number_and_order" constrainedElement="_Nt7htWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nt7huGEIEdqmfMQqVJOcWQ" annotatedElement="_Nt7ht2EIEdqmfMQqVJOcWQ">
        <body>The number and order of argument pins must be the same as the number and order of attributes in the signal.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nt7huWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nt7humEIEdqmfMQqVJOcWQ" name="type_ordering_multiplicity" constrainedElement="_Nt7htWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nt7hu2EIEdqmfMQqVJOcWQ" annotatedElement="_Nt7humEIEdqmfMQqVJOcWQ">
        <body>The type, ordering, and multiplicity of an argument pin must be the same as the corresponding attribute of the signal.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nt7hvGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nt7hvWEIEdqmfMQqVJOcWQ" general="_Nu-DgmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nt7hvmEIEdqmfMQqVJOcWQ" name="signal" type="_NsvO82EIEdqmfMQqVJOcWQ" association="_NuOcuWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nt7hv2EIEdqmfMQqVJOcWQ" annotatedElement="_Nt7hvmEIEdqmfMQqVJOcWQ">
        <body>The specification of signal object transmitted to the target objects.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nt7hwGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nt7hwWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nt7hwmEIEdqmfMQqVJOcWQ" name="SendObjectAction">
    <ownedComment xmi:id="_Nt7hw2EIEdqmfMQqVJOcWQ" annotatedElement="_Nt7hwmEIEdqmfMQqVJOcWQ">
      <body>SendObjectAction is an action that transmits an object to the target object, where it may invoke behavior such as the firing of state machine transitions or the execution of an activity. The value of the object is available to the execution of invoked behaviors. The requestor continues execution immediately. Any reply message is ignored and is not transmitted to the requestor.</body>
    </ownedComment>
    <generalization xmi:id="_Nt7hxGEIEdqmfMQqVJOcWQ" general="_Nu-DgmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nt7hxWEIEdqmfMQqVJOcWQ" name="target" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NuOcs2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nt7hxmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nt7hx2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nt7hyGEIEdqmfMQqVJOcWQ" annotatedElement="_Nt7hxWEIEdqmfMQqVJOcWQ">
        <body>The target object to which the object is sent.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nt7hyWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nt7hymEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nt7hy2EIEdqmfMQqVJOcWQ" name="request" type="_Nu-Df2EIEdqmfMQqVJOcWQ" redefinedProperty="_Nu-DhWEIEdqmfMQqVJOcWQ" association="_NuOctmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nt7hzGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nt7hzWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nt7hzmEIEdqmfMQqVJOcWQ" annotatedElement="_Nt7hy2EIEdqmfMQqVJOcWQ">
        <body>The request object, which is transmitted to the target object. The object may be copied in transmission, so identity might not be preserved. (Specialized from InvocationActon.argument)</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nt7hz2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nt7h0GEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nt7h0WEIEdqmfMQqVJOcWQ" name="LinkEndDestructionData">
    <ownedComment xmi:id="_Nt7h0mEIEdqmfMQqVJOcWQ" annotatedElement="_Nt7h0WEIEdqmfMQqVJOcWQ">
      <body>This class is required when using DestroyLinkAction, to specify links to destroy for nonunique ordered ends. A link cannot be passed as a runtime value to or from an action.



Qualifier values are used in CompleteActions to identify links to destroy.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nt7h02EIEdqmfMQqVJOcWQ" name="destroy_link_action" constrainedElement="_Nt7h0WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nt7h1GEIEdqmfMQqVJOcWQ" annotatedElement="_Nt7h02EIEdqmfMQqVJOcWQ">
        <body>LinkEndDestructionData can only be end data for DestroyLinkAction or one of its specializations.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nt7h1WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nt7h1mEIEdqmfMQqVJOcWQ" name="unlimited_natural_and_multiplicity" constrainedElement="_Nt7h0WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nt7h12EIEdqmfMQqVJOcWQ" annotatedElement="_Nt7h1mEIEdqmfMQqVJOcWQ">
        <body>LinkEndDestructionData for ordered nonunique association ends must have a single destroyAt input pin if isDestroyDuplicates is false. It must be of type UnlimitedNatural and have a multiplicity of 1..1. Otherwise, the action has no input pin for the removal position.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nt7h2GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nt7h2WEIEdqmfMQqVJOcWQ" general="_NtxwvWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nt7h2mEIEdqmfMQqVJOcWQ" name="isDestroyDuplicates">
      <ownedComment xmi:id="_Nt7h22EIEdqmfMQqVJOcWQ" annotatedElement="_Nt7h2mEIEdqmfMQqVJOcWQ">
        <body>Specifies whether to destroy duplicates of the value in nonunique association ends.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_Nt7h3GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nt7h3WEIEdqmfMQqVJOcWQ" name="destroyAt" type="_Nu-Df2EIEdqmfMQqVJOcWQ" association="_NuYNlWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nt7h3mEIEdqmfMQqVJOcWQ" annotatedElement="_Nt7h3WEIEdqmfMQqVJOcWQ">
        <body>Specifies the position of an existing link to be destroyed in ordered nonunique association ends. The type of the pin is UnlimitedNatural, but the value cannot be zero or unlimited.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nt7h32EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nt7h4GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nt7h4WEIEdqmfMQqVJOcWQ" name="ValueSpecificationAction">
    <ownedComment xmi:id="_Nt7h4mEIEdqmfMQqVJOcWQ" annotatedElement="_Nt7h4WEIEdqmfMQqVJOcWQ">
      <body>The action returns the result of evaluating a value specification.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nt7h42EIEdqmfMQqVJOcWQ" name="compatible_type" constrainedElement="_Nt7h4WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nt7h5GEIEdqmfMQqVJOcWQ" annotatedElement="_Nt7h42EIEdqmfMQqVJOcWQ">
        <body>The type of value specification must be compatible with the type of the result pin.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nt7h5WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nt7h5mEIEdqmfMQqVJOcWQ" name="multiplicity" constrainedElement="_Nt7h4WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nt7h52EIEdqmfMQqVJOcWQ" annotatedElement="_Nt7h5mEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the result pin is 1..1</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nt7h6GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nt7h6WEIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nt7h6mEIEdqmfMQqVJOcWQ" name="value" type="_NiwMlmEIEdqmfMQqVJOcWQ" association="_NuYNnmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nt7h62EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nt7h7GEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nt7h7WEIEdqmfMQqVJOcWQ" annotatedElement="_Nt7h6mEIEdqmfMQqVJOcWQ">
        <body>Value specification to be evaluated.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nt7h7mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nt7h72EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nt7h8GEIEdqmfMQqVJOcWQ" name="result" type="_Nu-DfGEIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0c2EIEdqmfMQqVJOcWQ" association="_NuYNomEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nt7h8WEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nt7h8mEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nt7h82EIEdqmfMQqVJOcWQ" annotatedElement="_Nt7h8GEIEdqmfMQqVJOcWQ">
        <body>Pins holding the received event objects or their attributes. Event objects may be copied in transmission, so identity might not be preserved.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nt7h9GEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nt7h9WEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nt7h9mEIEdqmfMQqVJOcWQ" name="A_classifier_createObjectAction" memberEnd="_Nte13GEIEdqmfMQqVJOcWQ _Nt7h92EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nt7h92EIEdqmfMQqVJOcWQ" type="_Nte1zWEIEdqmfMQqVJOcWQ" association="_Nt7h9mEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nt7h-GEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nt7h-WEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nt7h-mEIEdqmfMQqVJOcWQ" name="A_result_createObjectAction" memberEnd="_Nte14GEIEdqmfMQqVJOcWQ _Nt7h_GEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nt7h-2EIEdqmfMQqVJOcWQ" general="_NvH0oWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nt7h_GEIEdqmfMQqVJOcWQ" type="_Nte1zWEIEdqmfMQqVJOcWQ" association="_Nt7h-mEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nt7h_WEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nt7h_mEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuErkGEIEdqmfMQqVJOcWQ" name="A_target_destroyObjectAction" memberEnd="_NuErkmEIEdqmfMQqVJOcWQ _Nte19WEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NuErkWEIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NuErkmEIEdqmfMQqVJOcWQ" type="_Nte15mEIEdqmfMQqVJOcWQ" association="_NuErkGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuErk2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuErlGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuErlWEIEdqmfMQqVJOcWQ" name="A_first_testIdentityAction" memberEnd="_NtomvGEIEdqmfMQqVJOcWQ _NuErl2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NuErlmEIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NuErl2EIEdqmfMQqVJOcWQ" type="_NtomsGEIEdqmfMQqVJOcWQ" association="_NuErlWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuErmGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuErmWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuErmmEIEdqmfMQqVJOcWQ" name="A_second_testIdentityAction" memberEnd="_NtomwmEIEdqmfMQqVJOcWQ _NuErnGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NuErm2EIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NuErnGEIEdqmfMQqVJOcWQ" type="_NtomsGEIEdqmfMQqVJOcWQ" association="_NuErmmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuErnWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuErnmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuErn2EIEdqmfMQqVJOcWQ" name="A_result_testIdentityAction" memberEnd="_NtomyGEIEdqmfMQqVJOcWQ _NuEroWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NuEroGEIEdqmfMQqVJOcWQ" general="_NvH0oWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NuEroWEIEdqmfMQqVJOcWQ" type="_NtomsGEIEdqmfMQqVJOcWQ" association="_NuErn2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuEromEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuEro2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuErpGEIEdqmfMQqVJOcWQ" name="A_result_readSelfAction" memberEnd="_Ntom3WEIEdqmfMQqVJOcWQ _NuErpmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NuErpWEIEdqmfMQqVJOcWQ" general="_NvH0oWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NuErpmEIEdqmfMQqVJOcWQ" type="_NtomzmEIEdqmfMQqVJOcWQ" association="_NuErpGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuErp2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuErqGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuErqWEIEdqmfMQqVJOcWQ" name="A_structuralFeatureAction_structuralFeature" memberEnd="_Ntom9WEIEdqmfMQqVJOcWQ _NuErqmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NuErqmEIEdqmfMQqVJOcWQ" type="_Ntom42EIEdqmfMQqVJOcWQ" association="_NuErqWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuErq2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuErrGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuErrWEIEdqmfMQqVJOcWQ" name="A_object_structuralFeatureAction" memberEnd="_NuErr2EIEdqmfMQqVJOcWQ _Ntom-WEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NuErrmEIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NuErr2EIEdqmfMQqVJOcWQ" type="_Ntom42EIEdqmfMQqVJOcWQ" association="_NuErrWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuErsGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuErsWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuErsmEIEdqmfMQqVJOcWQ" name="A_result_readStructuralFeatureAction" memberEnd="_NtonCGEIEdqmfMQqVJOcWQ _NuErtGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NuErs2EIEdqmfMQqVJOcWQ" general="_NvH0oWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NuErtGEIEdqmfMQqVJOcWQ" type="_Ntom_2EIEdqmfMQqVJOcWQ" association="_NuErsmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuErtWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuErtmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuErt2EIEdqmfMQqVJOcWQ" name="A_value_writeStructuralFeatureAction" memberEnd="_NtonF2EIEdqmfMQqVJOcWQ _NuEruWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NuEruGEIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NuEruWEIEdqmfMQqVJOcWQ" type="_NtonDmEIEdqmfMQqVJOcWQ" association="_NuErt2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuErumEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuEru2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuErvGEIEdqmfMQqVJOcWQ" name="A_insertAt_addStructuralFeatureValueAction" memberEnd="_NuErvmEIEdqmfMQqVJOcWQ _NtonOGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NuErvWEIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NuErvmEIEdqmfMQqVJOcWQ" type="_NtonL2EIEdqmfMQqVJOcWQ" association="_NuErvGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuErv2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuErwGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuOckGEIEdqmfMQqVJOcWQ" name="A_endData_linkAction" memberEnd="_NtxwrGEIEdqmfMQqVJOcWQ _NuOckWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NuOckWEIEdqmfMQqVJOcWQ" type="_NtxwoGEIEdqmfMQqVJOcWQ" association="_NuOckGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuOckmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuOck2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuOclGEIEdqmfMQqVJOcWQ" name="A_value_linkEndData" memberEnd="_NuOclWEIEdqmfMQqVJOcWQ _NtxwyWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NuOclWEIEdqmfMQqVJOcWQ" type="_NtxwvWEIEdqmfMQqVJOcWQ" association="_NuOclGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuOclmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuOcl2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuOcmGEIEdqmfMQqVJOcWQ" name="A_end_linkEndData" memberEnd="_NtxwzWEIEdqmfMQqVJOcWQ _NuOcmWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NuOcmWEIEdqmfMQqVJOcWQ" type="_NtxwvWEIEdqmfMQqVJOcWQ" association="_NuOcmGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuOcmmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuOcm2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuOcnGEIEdqmfMQqVJOcWQ" name="A_result_readLinkAction" memberEnd="_NuOcnmEIEdqmfMQqVJOcWQ _Ntxw42EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NuOcnWEIEdqmfMQqVJOcWQ" general="_NvH0oWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NuOcnmEIEdqmfMQqVJOcWQ" type="_Ntxw0WEIEdqmfMQqVJOcWQ" association="_NuOcnGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuOcn2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuOcoGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuOcoWEIEdqmfMQqVJOcWQ" name="A_insertAt_linkEndCreationData" memberEnd="_NuOcomEIEdqmfMQqVJOcWQ _Ntxw9WEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NuOcomEIEdqmfMQqVJOcWQ" type="_Ntxw6WEIEdqmfMQqVJOcWQ" association="_NuOcoWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuOco2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuOcpGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuOcpWEIEdqmfMQqVJOcWQ" name="A_endData_createLinkAction" memberEnd="_NuOcp2EIEdqmfMQqVJOcWQ _Ntxw_2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NuOcpmEIEdqmfMQqVJOcWQ" general="_NuOckGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NuOcp2EIEdqmfMQqVJOcWQ" type="_Ntxw-WEIEdqmfMQqVJOcWQ" redefinedProperty="_NuOckWEIEdqmfMQqVJOcWQ" association="_NuOcpWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuOcqGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuOcqWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuOcqmEIEdqmfMQqVJOcWQ" name="A_object_clearAssociationAction" memberEnd="_Nt7hq2EIEdqmfMQqVJOcWQ _NuOcrGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NuOcq2EIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NuOcrGEIEdqmfMQqVJOcWQ" type="_Nt7homEIEdqmfMQqVJOcWQ" association="_NuOcqmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuOcrWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuOcrmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuOcr2EIEdqmfMQqVJOcWQ" name="A_association_clearAssociationAction" memberEnd="_NuOcsGEIEdqmfMQqVJOcWQ _Nt7hsWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NuOcsGEIEdqmfMQqVJOcWQ" type="_Nt7homEIEdqmfMQqVJOcWQ" association="_NuOcr2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuOcsWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuOcsmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuOcs2EIEdqmfMQqVJOcWQ" name="A_target_sendObjectAction" memberEnd="_Nt7hxWEIEdqmfMQqVJOcWQ _NuOctWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NuOctGEIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NuOctWEIEdqmfMQqVJOcWQ" type="_Nt7hwmEIEdqmfMQqVJOcWQ" redefinedProperty="_NvH0qGEIEdqmfMQqVJOcWQ" association="_NuOcs2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuOctmEIEdqmfMQqVJOcWQ" name="A_request_sendObjectAction" memberEnd="_NuOcuGEIEdqmfMQqVJOcWQ _Nt7hy2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NuOct2EIEdqmfMQqVJOcWQ" general="_NvH0nmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NuOcuGEIEdqmfMQqVJOcWQ" type="_Nt7hwmEIEdqmfMQqVJOcWQ" redefinedProperty="_NvH0oGEIEdqmfMQqVJOcWQ" association="_NuOctmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuOcuWEIEdqmfMQqVJOcWQ" name="A_signal_broadcastSignalAction" memberEnd="_Nt7hvmEIEdqmfMQqVJOcWQ _NuOcumEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NuOcumEIEdqmfMQqVJOcWQ" type="_Nt7htWEIEdqmfMQqVJOcWQ" association="_NuOcuWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuOcu2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuOcvGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuYNkGEIEdqmfMQqVJOcWQ" name="A_removeAt_removeStructuralFeatureValueAction" memberEnd="_NuYNkmEIEdqmfMQqVJOcWQ _NtonKWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NuYNkWEIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NuYNkmEIEdqmfMQqVJOcWQ" type="_NtonIGEIEdqmfMQqVJOcWQ" association="_NuYNkGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuYNk2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuYNlGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuYNlWEIEdqmfMQqVJOcWQ" name="A_destroyAt_linkEndDestructionData" memberEnd="_Nt7h3WEIEdqmfMQqVJOcWQ _NuYNlmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NuYNlmEIEdqmfMQqVJOcWQ" type="_Nt7h0WEIEdqmfMQqVJOcWQ" association="_NuYNlWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuYNl2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuYNmGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuYNmWEIEdqmfMQqVJOcWQ" name="A_endData_destroyLinkAction" memberEnd="_NtxxCGEIEdqmfMQqVJOcWQ _NuYNm2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NuYNmmEIEdqmfMQqVJOcWQ" general="_NuOckGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NuYNm2EIEdqmfMQqVJOcWQ" type="_NtxxBWEIEdqmfMQqVJOcWQ" redefinedProperty="_NuOckWEIEdqmfMQqVJOcWQ" association="_NuYNmWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuYNnGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuYNnWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuYNnmEIEdqmfMQqVJOcWQ" name="A_value_valueSpecificationAction" memberEnd="_Nt7h6mEIEdqmfMQqVJOcWQ _NuYNn2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NuYNn2EIEdqmfMQqVJOcWQ" type="_Nt7h4WEIEdqmfMQqVJOcWQ" association="_NuYNnmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuYNoGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuYNoWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuYNomEIEdqmfMQqVJOcWQ" name="A_result_valueSpecificationAction" memberEnd="_Nt7h8GEIEdqmfMQqVJOcWQ _NuYNpGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NuYNo2EIEdqmfMQqVJOcWQ" general="_NvH0oWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NuYNpGEIEdqmfMQqVJOcWQ" type="_Nt7h4WEIEdqmfMQqVJOcWQ" association="_NuYNomEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuYNpWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuYNpmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuYNp2EIEdqmfMQqVJOcWQ" name="A_inputValue_linkAction" memberEnd="_NuYNqWEIEdqmfMQqVJOcWQ _NtxwsmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NuYNqGEIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NuYNqWEIEdqmfMQqVJOcWQ" type="_NtxwoGEIEdqmfMQqVJOcWQ" redefinedProperty="_NvH0qGEIEdqmfMQqVJOcWQ" association="_NuYNp2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuYNqmEIEdqmfMQqVJOcWQ" name="A_value_durationObservationAction" memberEnd="_NuYNrGEIEdqmfMQqVJOcWQ _NuhXuWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NuYNq2EIEdqmfMQqVJOcWQ" general="_NuErt2EIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NuYNrGEIEdqmfMQqVJOcWQ" type="_NuhXr2EIEdqmfMQqVJOcWQ" redefinedProperty="_NuEruWEIEdqmfMQqVJOcWQ" association="_NuYNqmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuYNrWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuYNrmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NuYNr2EIEdqmfMQqVJOcWQ" name="A_value_timeObservationAction" memberEnd="_NuYNsWEIEdqmfMQqVJOcWQ _NuhXimEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NuYNsGEIEdqmfMQqVJOcWQ" general="_NuErt2EIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NuYNsWEIEdqmfMQqVJOcWQ" type="_NuhXgGEIEdqmfMQqVJOcWQ" redefinedProperty="_NuEruWEIEdqmfMQqVJOcWQ" association="_NuYNr2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuYNsmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuYNs2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NuYNtGEIEdqmfMQqVJOcWQ" name="TimeExpression">
    <ownedComment xmi:id="_NuYNtWEIEdqmfMQqVJOcWQ" annotatedElement="_NuYNtGEIEdqmfMQqVJOcWQ">
      <body>A TimeExpression defines a value specification that represents a time value.</body>
    </ownedComment>
    <generalization xmi:id="_NuYNtmEIEdqmfMQqVJOcWQ" general="_NiwMlmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NuYNt2EIEdqmfMQqVJOcWQ" name="firstTime">
      <ownedComment xmi:id="_NuYNuGEIEdqmfMQqVJOcWQ" annotatedElement="_NuYNt2EIEdqmfMQqVJOcWQ">
        <body>True if the TimeExpression describes the first point in time of the NamedElement referenced by event, in cases where the NamedElement describes something which extends in time. False if the TimeExpression describes the last point in time for the referenced NamedElement.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NuYNuWEIEdqmfMQqVJOcWQ" value="true"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NuYNumEIEdqmfMQqVJOcWQ" name="event" type="_NjfzQGEIEdqmfMQqVJOcWQ" association="_NurIlmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NuYNu2EIEdqmfMQqVJOcWQ" annotatedElement="_NuYNumEIEdqmfMQqVJOcWQ">
        <body>Refers to the specification of the event occurrence that the TimeExpression describes</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuYNvGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuYNvWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NuYNvmEIEdqmfMQqVJOcWQ" name="Duration">
    <ownedComment xmi:id="_NuYNv2EIEdqmfMQqVJOcWQ" annotatedElement="_NuYNvmEIEdqmfMQqVJOcWQ">
      <body>A duration defines a value specification that specifies the temporal distance between two time expressions that specify time instants.</body>
    </ownedComment>
    <generalization xmi:id="_NuYNwGEIEdqmfMQqVJOcWQ" general="_NiwMlmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NuYNwWEIEdqmfMQqVJOcWQ" name="firstTime">
      <ownedComment xmi:id="_NuYNwmEIEdqmfMQqVJOcWQ" annotatedElement="_NuYNwWEIEdqmfMQqVJOcWQ">
        <body>If the duration is between times of two NamedElements, there are two Boolean attributes, one for the start of the duration and one for the end of the duration. For each of these it holds that firstTime is true if the time information is associated with the first point in time of the NamedElement referenced by event, and false if it represents the last point in time of the NamedElement. If there is only one NamedElement referenced by event, then this attribute is irrelevant.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NuYNw2EIEdqmfMQqVJOcWQ" value="true"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NuYNxGEIEdqmfMQqVJOcWQ" name="event" type="_NjfzQGEIEdqmfMQqVJOcWQ" association="_NurImGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NuYNxWEIEdqmfMQqVJOcWQ" annotatedElement="_NuYNxGEIEdqmfMQqVJOcWQ">
        <body>Refers to the specification(s) that describes the starting TimeExpression and the ending TimeExpression of the Duration. If only one NamedElement is referenced, the duration is from the first point in time of that NamedElement until the last point in time of that NamedElement.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuYNxmEIEdqmfMQqVJOcWQ" value="2"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuYNx2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NuhXgGEIEdqmfMQqVJOcWQ" name="TimeObservationAction">
    <ownedComment xmi:id="_NuhXgWEIEdqmfMQqVJOcWQ" annotatedElement="_NuhXgGEIEdqmfMQqVJOcWQ">
      <body>A TimeObservationAction defines an action that observes the current point in time and writes this value to a structural feature.</body>
    </ownedComment>
    <ownedRule xmi:id="_NuhXgmEIEdqmfMQqVJOcWQ" name="input_value_time_expression" constrainedElement="_NuhXgGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NuhXg2EIEdqmfMQqVJOcWQ" annotatedElement="_NuhXgmEIEdqmfMQqVJOcWQ">
        <body>The value of a TimeObservationAction’s input must be a TimeExpression.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NuhXhGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.value.value.oclIsKindOf(TimeExpression)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NuhXhWEIEdqmfMQqVJOcWQ" general="_NtonDmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NuhXhmEIEdqmfMQqVJOcWQ" name="now" type="_NuYNtGEIEdqmfMQqVJOcWQ" isDerived="true" association="_Nu05jWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NuhXh2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NuhXiGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NuhXiWEIEdqmfMQqVJOcWQ" annotatedElement="_NuhXhmEIEdqmfMQqVJOcWQ">
        <body>Represents the current point in time and the value which is observed given by the keyword now.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NuhXimEIEdqmfMQqVJOcWQ" name="value" type="_Nu-DcGEIEdqmfMQqVJOcWQ" redefinedProperty="_NtonF2EIEdqmfMQqVJOcWQ" association="_NuYNr2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NuhXi2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NuhXjGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NuhXjWEIEdqmfMQqVJOcWQ" annotatedElement="_NuhXimEIEdqmfMQqVJOcWQ">
        <body>Input whose time expression is to be written to the structural feature.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuhXjmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuhXj2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NuhXkGEIEdqmfMQqVJOcWQ" name="now" type="_NuYNtGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_NuhXk2EIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NuhXkWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EOperation" xmi:id="_NuhXkmEIEdqmfMQqVJOcWQ" operationName="getNow"/>
      </eAnnotations>
      <ownedRule xmi:id="_NuhXk2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NuhXkGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NuhXlGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>self.value.value.oclAsType(TimeExpression)</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NuhXlWEIEdqmfMQqVJOcWQ" type="_NuYNtGEIEdqmfMQqVJOcWQ" direction="return"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NuhXlmEIEdqmfMQqVJOcWQ" name="setNow" visibility="protected">
      <ownedParameter xmi:id="_NuhXl2EIEdqmfMQqVJOcWQ" name="newNow" type="_NuYNtGEIEdqmfMQqVJOcWQ" effect="read"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NuhXmGEIEdqmfMQqVJOcWQ" name="DurationInterval">
    <ownedComment xmi:id="_NuhXmWEIEdqmfMQqVJOcWQ" annotatedElement="_NuhXmGEIEdqmfMQqVJOcWQ">
      <body>A DurationInterval defines the range between two Durations.</body>
    </ownedComment>
    <generalization xmi:id="_NuhXmmEIEdqmfMQqVJOcWQ" general="_NurIiWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NuhXm2EIEdqmfMQqVJOcWQ" name="min" type="_NuYNvmEIEdqmfMQqVJOcWQ" redefinedProperty="_NurIjGEIEdqmfMQqVJOcWQ" association="_NurImmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NuhXnGEIEdqmfMQqVJOcWQ" annotatedElement="_NuhXm2EIEdqmfMQqVJOcWQ">
        <body>Refers to the Duration denoting the minimum value of the range.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NuhXnWEIEdqmfMQqVJOcWQ" name="max" type="_NuYNvmEIEdqmfMQqVJOcWQ" redefinedProperty="_NurIkGEIEdqmfMQqVJOcWQ" association="_NurInWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NuhXnmEIEdqmfMQqVJOcWQ" annotatedElement="_NuhXnWEIEdqmfMQqVJOcWQ">
        <body>Refers to the Duration denoting the maximum value of the range.</body>
      </ownedComment>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NuhXn2EIEdqmfMQqVJOcWQ" name="TimeConstraint">
    <ownedComment xmi:id="_NuhXoGEIEdqmfMQqVJOcWQ" annotatedElement="_NuhXn2EIEdqmfMQqVJOcWQ">
      <body>A TimeConstraint defines a Constraint that refers to a TimeInterval.</body>
    </ownedComment>
    <generalization xmi:id="_NuhXoWEIEdqmfMQqVJOcWQ" general="_NurIgGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NuhXomEIEdqmfMQqVJOcWQ" name="specification" type="_NuhXqGEIEdqmfMQqVJOcWQ" redefinedProperty="_NurIg2EIEdqmfMQqVJOcWQ" association="_Nu05gGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NuhXo2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NuhXpGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NuhXpWEIEdqmfMQqVJOcWQ" annotatedElement="_NuhXomEIEdqmfMQqVJOcWQ">
        <body>A condition that must be true when evaluated in order for the constraint to be satisfied.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuhXpmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuhXp2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NuhXqGEIEdqmfMQqVJOcWQ" name="TimeInterval">
    <ownedComment xmi:id="_NuhXqWEIEdqmfMQqVJOcWQ" annotatedElement="_NuhXqGEIEdqmfMQqVJOcWQ">
      <body>A TimeInterval defines the range between two TimeExpressions.</body>
    </ownedComment>
    <generalization xmi:id="_NuhXqmEIEdqmfMQqVJOcWQ" general="_NurIiWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NuhXq2EIEdqmfMQqVJOcWQ" name="max" type="_NuYNtGEIEdqmfMQqVJOcWQ" redefinedProperty="_NurIkGEIEdqmfMQqVJOcWQ" association="_NurIoGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NuhXrGEIEdqmfMQqVJOcWQ" annotatedElement="_NuhXq2EIEdqmfMQqVJOcWQ">
        <body>Refers to the TimeExpression denoting the maximum value of the range.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NuhXrWEIEdqmfMQqVJOcWQ" name="min" type="_NuYNtGEIEdqmfMQqVJOcWQ" redefinedProperty="_NurIjGEIEdqmfMQqVJOcWQ" association="_NurIo2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NuhXrmEIEdqmfMQqVJOcWQ" annotatedElement="_NuhXrWEIEdqmfMQqVJOcWQ">
        <body>Refers to the TimeExpression denoting the minimum value of the range.</body>
      </ownedComment>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NuhXr2EIEdqmfMQqVJOcWQ" name="DurationObservationAction">
    <ownedComment xmi:id="_NuhXsGEIEdqmfMQqVJOcWQ" annotatedElement="_NuhXr2EIEdqmfMQqVJOcWQ">
      <body>A DurationObservationAction defines an action that observes duration in time and writes this value to a structural feature.</body>
    </ownedComment>
    <ownedRule xmi:id="_NuhXsWEIEdqmfMQqVJOcWQ" name="input_value_duration" constrainedElement="_NuhXr2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NuhXsmEIEdqmfMQqVJOcWQ" annotatedElement="_NuhXsWEIEdqmfMQqVJOcWQ">
        <body>The value of a DurationObservationAction’s input must be a Duration.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NuhXs2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.value.value.oclIsKindOf(Duration)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NuhXtGEIEdqmfMQqVJOcWQ" general="_NtonDmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NuhXtWEIEdqmfMQqVJOcWQ" name="duration" type="_NuYNvmEIEdqmfMQqVJOcWQ" isDerived="true" association="_Nu05kGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NuhXtmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NuhXt2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NuhXuGEIEdqmfMQqVJOcWQ" annotatedElement="_NuhXtWEIEdqmfMQqVJOcWQ">
        <body>Represents the measured Duration</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NuhXuWEIEdqmfMQqVJOcWQ" name="value" type="_Nu-DcGEIEdqmfMQqVJOcWQ" redefinedProperty="_NtonF2EIEdqmfMQqVJOcWQ" association="_NuYNqmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NuhXumEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NuhXu2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NuhXvGEIEdqmfMQqVJOcWQ" annotatedElement="_NuhXuWEIEdqmfMQqVJOcWQ">
        <body>Input whose duration is to be written to the structural feature.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuhXvWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuhXvmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NuhXv2EIEdqmfMQqVJOcWQ" name="duration" type="_NuYNvmEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_NuhXwmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NuhXwGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EOperation" xmi:id="_NuhXwWEIEdqmfMQqVJOcWQ" operationName="getDuration"/>
      </eAnnotations>
      <ownedRule xmi:id="_NuhXwmEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NuhXv2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NuhXw2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = self.value.value.oclAsType(Duration)</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NuhXxGEIEdqmfMQqVJOcWQ" type="_NuYNvmEIEdqmfMQqVJOcWQ" direction="return"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NuhXxWEIEdqmfMQqVJOcWQ" name="setDuration" visibility="protected">
      <ownedParameter xmi:id="_NuhXxmEIEdqmfMQqVJOcWQ" name="newDuration" type="_NuYNvmEIEdqmfMQqVJOcWQ" effect="read"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NuhXx2EIEdqmfMQqVJOcWQ" name="DurationConstraint">
    <ownedComment xmi:id="_NuhXyGEIEdqmfMQqVJOcWQ" annotatedElement="_NuhXx2EIEdqmfMQqVJOcWQ">
      <body>A DurationConstraint defines a Constraint that refers to a DurationInterval.</body>
    </ownedComment>
    <generalization xmi:id="_NuhXyWEIEdqmfMQqVJOcWQ" general="_NurIgGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NuhXymEIEdqmfMQqVJOcWQ" name="specification" type="_NuhXmGEIEdqmfMQqVJOcWQ" redefinedProperty="_NurIg2EIEdqmfMQqVJOcWQ" association="_Nu05g2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NuhXy2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NuhXzGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NuhXzWEIEdqmfMQqVJOcWQ" annotatedElement="_NuhXymEIEdqmfMQqVJOcWQ">
        <body>The interval constraining the duration.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NuhXzmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NuhXz2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NurIgGEIEdqmfMQqVJOcWQ" name="IntervalConstraint">
    <ownedComment xmi:id="_NurIgWEIEdqmfMQqVJOcWQ" annotatedElement="_NurIgGEIEdqmfMQqVJOcWQ">
      <body>A IntervalConstraint defines a Constraint that refers to an Interval.</body>
    </ownedComment>
    <generalization xmi:id="_NurIgmEIEdqmfMQqVJOcWQ" general="_NjDHfmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NurIg2EIEdqmfMQqVJOcWQ" name="specification" type="_NurIiWEIEdqmfMQqVJOcWQ" redefinedProperty="_NjDHi2EIEdqmfMQqVJOcWQ" association="_Nu05imEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NurIhGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NurIhWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NurIhmEIEdqmfMQqVJOcWQ" annotatedElement="_NurIg2EIEdqmfMQqVJOcWQ">
        <body>A condition that must be true when evaluated in order for the constraint to be satisfied.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NurIh2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NurIiGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NurIiWEIEdqmfMQqVJOcWQ" name="Interval">
    <ownedComment xmi:id="_NurIimEIEdqmfMQqVJOcWQ" annotatedElement="_NurIiWEIEdqmfMQqVJOcWQ">
      <body>An Interval defines the range between two value specifications.</body>
    </ownedComment>
    <generalization xmi:id="_NurIi2EIEdqmfMQqVJOcWQ" general="_NiwMlmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NurIjGEIEdqmfMQqVJOcWQ" name="min" type="_NiwMlmEIEdqmfMQqVJOcWQ" association="_Nu05hmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NurIjWEIEdqmfMQqVJOcWQ" annotatedElement="_NurIjGEIEdqmfMQqVJOcWQ">
        <body>Refers to the ValueSpecification denoting the minimum value of the range.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NurIjmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NurIj2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NurIkGEIEdqmfMQqVJOcWQ" name="max" type="_NiwMlmEIEdqmfMQqVJOcWQ" association="_Nu05iGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NurIkWEIEdqmfMQqVJOcWQ" annotatedElement="_NurIkGEIEdqmfMQqVJOcWQ">
        <body>Refers to the ValueSpecification denoting the maximum value of the range.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NurIkmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NurIk2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NurIlmEIEdqmfMQqVJOcWQ" name="A_event_timeExpression" memberEnd="_NurIl2EIEdqmfMQqVJOcWQ _NuYNumEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NurIl2EIEdqmfMQqVJOcWQ" type="_NuYNtGEIEdqmfMQqVJOcWQ" association="_NurIlmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NurImGEIEdqmfMQqVJOcWQ" name="A_event_duration" memberEnd="_NuYNxGEIEdqmfMQqVJOcWQ _NurImWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NurImWEIEdqmfMQqVJOcWQ" type="_NuYNvmEIEdqmfMQqVJOcWQ" association="_NurImGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NurImmEIEdqmfMQqVJOcWQ" name="A_min_durationInterval" memberEnd="_NuhXm2EIEdqmfMQqVJOcWQ _NurInGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NurIm2EIEdqmfMQqVJOcWQ" general="_Nu05hmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NurInGEIEdqmfMQqVJOcWQ" type="_NuhXmGEIEdqmfMQqVJOcWQ" redefinedProperty="_Nu05h2EIEdqmfMQqVJOcWQ" association="_NurImmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NurInWEIEdqmfMQqVJOcWQ" name="A_max_durationInterval" memberEnd="_NurIn2EIEdqmfMQqVJOcWQ _NuhXnWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NurInmEIEdqmfMQqVJOcWQ" general="_Nu05iGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NurIn2EIEdqmfMQqVJOcWQ" type="_NuhXmGEIEdqmfMQqVJOcWQ" redefinedProperty="_Nu05iWEIEdqmfMQqVJOcWQ" association="_NurInWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NurIoGEIEdqmfMQqVJOcWQ" name="A_max_timeInterval" memberEnd="_NuhXq2EIEdqmfMQqVJOcWQ _NurIomEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NurIoWEIEdqmfMQqVJOcWQ" general="_Nu05iGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NurIomEIEdqmfMQqVJOcWQ" type="_NuhXqGEIEdqmfMQqVJOcWQ" redefinedProperty="_Nu05iWEIEdqmfMQqVJOcWQ" association="_NurIoGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NurIo2EIEdqmfMQqVJOcWQ" name="A_min_timeInterval" memberEnd="_NuhXrWEIEdqmfMQqVJOcWQ _NurIpWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NurIpGEIEdqmfMQqVJOcWQ" general="_Nu05hmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NurIpWEIEdqmfMQqVJOcWQ" type="_NuhXqGEIEdqmfMQqVJOcWQ" redefinedProperty="_Nu05h2EIEdqmfMQqVJOcWQ" association="_NurIo2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nu05gGEIEdqmfMQqVJOcWQ" name="A_specification_timeConstraint" memberEnd="_Nu05gmEIEdqmfMQqVJOcWQ _NuhXomEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nu05gWEIEdqmfMQqVJOcWQ" general="_Nu05imEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nu05gmEIEdqmfMQqVJOcWQ" type="_NuhXn2EIEdqmfMQqVJOcWQ" redefinedProperty="_Nu05jGEIEdqmfMQqVJOcWQ" association="_Nu05gGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nu05g2EIEdqmfMQqVJOcWQ" name="A_specification_durationConstraint" memberEnd="_NuhXymEIEdqmfMQqVJOcWQ _Nu05hWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nu05hGEIEdqmfMQqVJOcWQ" general="_Nu05imEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nu05hWEIEdqmfMQqVJOcWQ" type="_NuhXx2EIEdqmfMQqVJOcWQ" redefinedProperty="_Nu05jGEIEdqmfMQqVJOcWQ" association="_Nu05g2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nu05hmEIEdqmfMQqVJOcWQ" name="A_min_interval" memberEnd="_Nu05h2EIEdqmfMQqVJOcWQ _NurIjGEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nu05h2EIEdqmfMQqVJOcWQ" type="_NurIiWEIEdqmfMQqVJOcWQ" association="_Nu05hmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nu05iGEIEdqmfMQqVJOcWQ" name="A_max_interval" memberEnd="_Nu05iWEIEdqmfMQqVJOcWQ _NurIkGEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nu05iWEIEdqmfMQqVJOcWQ" type="_NurIiWEIEdqmfMQqVJOcWQ" association="_Nu05iGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nu05imEIEdqmfMQqVJOcWQ" name="A_specification_intervalConstraint" memberEnd="_Nu05jGEIEdqmfMQqVJOcWQ _NurIg2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nu05i2EIEdqmfMQqVJOcWQ" general="_NkPaMmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nu05jGEIEdqmfMQqVJOcWQ" type="_NurIgGEIEdqmfMQqVJOcWQ" association="_Nu05imEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nu05jWEIEdqmfMQqVJOcWQ" name="A_now_timeObservationAction" memberEnd="_NuhXhmEIEdqmfMQqVJOcWQ _Nu05j2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nu05jmEIEdqmfMQqVJOcWQ" general="_NuErt2EIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nu05j2EIEdqmfMQqVJOcWQ" type="_NuhXgGEIEdqmfMQqVJOcWQ" redefinedProperty="_NuEruWEIEdqmfMQqVJOcWQ" association="_Nu05jWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nu05kGEIEdqmfMQqVJOcWQ" name="A_duration_durationObservationAction" memberEnd="_NuhXtWEIEdqmfMQqVJOcWQ _Nu05kmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nu05kWEIEdqmfMQqVJOcWQ" general="_NuErt2EIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nu05kmEIEdqmfMQqVJOcWQ" type="_NuhXr2EIEdqmfMQqVJOcWQ" redefinedProperty="_NuEruWEIEdqmfMQqVJOcWQ" association="_Nu05kGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NtCJ2GEIEdqmfMQqVJOcWQ" name="A_when_timeEvent" memberEnd="_NtCJ2mEIEdqmfMQqVJOcWQ _NsvPCGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NtCJ2WEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NtCJ2mEIEdqmfMQqVJOcWQ" type="_NsvPAWEIEdqmfMQqVJOcWQ" association="_NtCJ2GEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nu05k2EIEdqmfMQqVJOcWQ" name="OpaqueAction">
    <ownedComment xmi:id="_Nu05lGEIEdqmfMQqVJOcWQ" annotatedElement="_Nu05k2EIEdqmfMQqVJOcWQ">
      <body>An action with implementation-specific semantics.</body>
    </ownedComment>
    <generalization xmi:id="_Nu05lWEIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nu05lmEIEdqmfMQqVJOcWQ" name="body" isOrdered="true" association="_NvQ-YmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nu05l2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nu05mGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_Nu05mWEIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nu05mmEIEdqmfMQqVJOcWQ" annotatedElement="_Nu05lmEIEdqmfMQqVJOcWQ">
        <body>Specifies the action in one or more languages.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nu05m2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nu05nGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nu05nWEIEdqmfMQqVJOcWQ" name="language" isOrdered="true" association="_NvQ-ZGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nu05nmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nu05n2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nu05oGEIEdqmfMQqVJOcWQ" annotatedElement="_Nu05nWEIEdqmfMQqVJOcWQ">
        <body>Languages the body strings use, in the same order as the body strings</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nu05oWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nu05omEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nu05o2EIEdqmfMQqVJOcWQ" name="inputValue" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NvQ-ZmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nu05pGEIEdqmfMQqVJOcWQ" annotatedElement="_Nu05o2EIEdqmfMQqVJOcWQ">
        <body>Provides input to the action.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nu05pWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nu05pmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nu05p2EIEdqmfMQqVJOcWQ" name="outputValue" type="_Nu-DfGEIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0c2EIEdqmfMQqVJOcWQ" association="_NvQ-aWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nu05qGEIEdqmfMQqVJOcWQ" annotatedElement="_Nu05p2EIEdqmfMQqVJOcWQ">
        <body>Takes output from the action.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nu05qWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nu05qmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nu-DcGEIEdqmfMQqVJOcWQ" name="ValuePin">
    <ownedComment xmi:id="_Nu-DcWEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-DcGEIEdqmfMQqVJOcWQ">
      <body>A value pin is an input pin that provides a value by evaluating a value specification.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nu-DcmEIEdqmfMQqVJOcWQ" name="compatible_type" constrainedElement="_Nu-DcGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nu-Dc2EIEdqmfMQqVJOcWQ" annotatedElement="_Nu-DcmEIEdqmfMQqVJOcWQ">
        <body>The type of value specification must be compatible with the type of the value pin.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nu-DdGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nu-DdWEIEdqmfMQqVJOcWQ" general="_Nu-Df2EIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nu-DdmEIEdqmfMQqVJOcWQ" name="value" type="_NiwMlmEIEdqmfMQqVJOcWQ" association="_NvH0q2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nu-Dd2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nu-DeGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nu-DeWEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-DdmEIEdqmfMQqVJOcWQ">
        <body>Value that the pin will provide.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nu-DemEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nu-De2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nu-DfGEIEdqmfMQqVJOcWQ" name="OutputPin">
    <ownedComment xmi:id="_Nu-DfWEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-DfGEIEdqmfMQqVJOcWQ">
      <body>An output pin is a pin that holds output values produced by an action.</body>
    </ownedComment>
    <generalization xmi:id="_Nu-DfmEIEdqmfMQqVJOcWQ" general="_Nu05q2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nu-Df2EIEdqmfMQqVJOcWQ" name="InputPin">
    <ownedComment xmi:id="_Nu-DgGEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-Df2EIEdqmfMQqVJOcWQ">
      <body>An input pin is a pin that holds input values to be consumed by an action.</body>
    </ownedComment>
    <generalization xmi:id="_Nu-DgWEIEdqmfMQqVJOcWQ" general="_Nu05q2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nu-Di2EIEdqmfMQqVJOcWQ" name="CallAction" isAbstract="true">
    <ownedComment xmi:id="_Nu-DjGEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-Di2EIEdqmfMQqVJOcWQ">
      <body>CallAction is an abstract class for actions that invoke behavior and receive return values.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nu-DjWEIEdqmfMQqVJOcWQ" name="synchronous_call" constrainedElement="_Nu-Di2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nu-DjmEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-DjWEIEdqmfMQqVJOcWQ">
        <body>Only synchronous call actions can have result pins.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nu-Dj2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nu-DkGEIEdqmfMQqVJOcWQ" name="number_and_order" constrainedElement="_Nu-Di2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nu-DkWEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-DkGEIEdqmfMQqVJOcWQ">
        <body>The number and order of argument pins must be the same as the number and order of parameters of the invoked behavior or behavioral feature. Pins are matched to parameters by order.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nu-DkmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nu-Dk2EIEdqmfMQqVJOcWQ" name="type_ordering_multiplicity" constrainedElement="_Nu-Di2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nu-DlGEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-Dk2EIEdqmfMQqVJOcWQ">
        <body>The type, ordering, and multiplicity of an argument pin must be the same as the corresponding parameter of the behavior or behavioral feature.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nu-DlWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nu-DlmEIEdqmfMQqVJOcWQ" general="_Nu-DgmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nu-Dl2EIEdqmfMQqVJOcWQ" name="isSynchronous">
      <ownedComment xmi:id="_Nu-DmGEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-Dl2EIEdqmfMQqVJOcWQ">
        <body>If true, the call is synchronous and the caller waits for completion of the invoked behavior.

If false, the call is asynchronous and the caller proceeds immediately and does not expect a return values.

</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_Nu-DmWEIEdqmfMQqVJOcWQ" value="true"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nu-DmmEIEdqmfMQqVJOcWQ" name="result" type="_Nu-DfGEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NvH0c2EIEdqmfMQqVJOcWQ" association="_NvH0m2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nu-Dm2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nu-DnGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nu-DnWEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-DmmEIEdqmfMQqVJOcWQ">
        <body>A list of output pins where the results of performing the invocation are placed.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nu-DnmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nu-Dn2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nu-DoGEIEdqmfMQqVJOcWQ" name="SendSignalAction">
    <ownedComment xmi:id="_Nu-DoWEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-DoGEIEdqmfMQqVJOcWQ">
      <body>SendSignalAction is an action that creates a signal instance from its inputs, and transmits it to the target object, where it may cause the firing of a state machine transition or the execution of an activity. The argument values are available to the execution of associated behaviors. The requestor continues execution immediately. Any reply message is ignored and is not transmitted to the requestor. If the input is already a signal instance, use SendObjectAction.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nu-DomEIEdqmfMQqVJOcWQ" name="number_order" constrainedElement="_Nu-DoGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nu-Do2EIEdqmfMQqVJOcWQ" annotatedElement="_Nu-DomEIEdqmfMQqVJOcWQ">
        <body>The number and order of argument pins must be the same as the number and order of attributes in the signal.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nu-DpGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nu-DpWEIEdqmfMQqVJOcWQ" name="type_ordering_multiplicity" constrainedElement="_Nu-DoGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nu-DpmEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-DpWEIEdqmfMQqVJOcWQ">
        <body>The type, ordering, and multiplicity of an argument pin must be the same as the corresponding attribute of the signal.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nu-Dp2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nu-DqGEIEdqmfMQqVJOcWQ" general="_Nu-DgmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nu-DqWEIEdqmfMQqVJOcWQ" name="target" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NvH0kmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nu-DqmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nu-Dq2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nu-DrGEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-DqWEIEdqmfMQqVJOcWQ">
        <body>The target object to which the signal is sent.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nu-DrWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nu-DrmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nu-Dr2EIEdqmfMQqVJOcWQ" name="signal" type="_NsvO82EIEdqmfMQqVJOcWQ" association="_NvH0l2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nu-DsGEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-Dr2EIEdqmfMQqVJOcWQ">
        <body>The type of signal transmitted to the target object.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nu-DsWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nu-DsmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nu-Ds2EIEdqmfMQqVJOcWQ" name="CallOperationAction">
    <ownedComment xmi:id="_Nu-DtGEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-Ds2EIEdqmfMQqVJOcWQ">
      <body>CallOperationAction is an action that transmits an operation call request to the target object, where it may cause the invocation of associated behavior. The argument values of the action are available to the execution of the invoked behavior. If the action is marked synchronous, the execution of the call operation action waits until the execution of the invoked behavior completes and a reply transmission is returned to the caller; otherwise execution of the action is complete when the invocation of the operation is established and the execution of the invoked operation proceeds concurrently with the execution of the calling behavior. Any values returned as part of the reply transmission are put on the result output pins of the call operation action. Upon receipt of the reply transmission, execution of the call operation action is complete.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nu-DtWEIEdqmfMQqVJOcWQ" name="argument_pin_equal_parameter" constrainedElement="_Nu-Ds2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nu-DtmEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-DtWEIEdqmfMQqVJOcWQ">
        <body>The number of argument pins and the number of owned parameters of the operation of type in and in-out must be equal.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nu-Dt2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nu-DuGEIEdqmfMQqVJOcWQ" name="result_pin_equal_parameter" constrainedElement="_Nu-Ds2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nu-DuWEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-DuGEIEdqmfMQqVJOcWQ">
        <body>The number of result pins and the number of owned parameters of the operation of type return, out, and in-out must be equal.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nu-DumEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nu-Du2EIEdqmfMQqVJOcWQ" name="type_ordering_multiplicity" constrainedElement="_Nu-Ds2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nu-DvGEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-Du2EIEdqmfMQqVJOcWQ">
        <body>The type, ordering, and multiplicity of an argument or result pin is derived from the corresponding owned parameter of the operation.

</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nu-DvWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nu-DvmEIEdqmfMQqVJOcWQ" name="type_target_pin" constrainedElement="_Nu-Ds2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nu-Dv2EIEdqmfMQqVJOcWQ" annotatedElement="_Nu-DvmEIEdqmfMQqVJOcWQ">
        <body>The type of the target pin must be the same as the type that owns the operation.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nu-DwGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nu-DwWEIEdqmfMQqVJOcWQ" general="_Nu-Di2EIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nu-DwmEIEdqmfMQqVJOcWQ" name="operation" type="_NjM4UGEIEdqmfMQqVJOcWQ" association="_NvH0iWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nu-Dw2EIEdqmfMQqVJOcWQ" annotatedElement="_Nu-DwmEIEdqmfMQqVJOcWQ">
        <body>The operation to be invoked by the action execution.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nu-DxGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nu-DxWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nu-DxmEIEdqmfMQqVJOcWQ" name="target" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NvH0jWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nu-Dx2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nu-DyGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nu-DyWEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-DxmEIEdqmfMQqVJOcWQ">
        <body>The target object to which the request is sent. The classifier of the target object is used to dynamically determine a behavior to invoke. This object constitutes the context of the execution of the operation.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nu-DymEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nu-Dy2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nu-DzGEIEdqmfMQqVJOcWQ" name="CallBehaviorAction">
    <ownedComment xmi:id="_Nu-DzWEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-DzGEIEdqmfMQqVJOcWQ">
      <body>CallBehaviorAction is a call action that invokes a behavior directly rather than invoking a behavioral feature that, in turn, results in the invocation of that behavior. The argument values of the action are available to the execution of the invoked behavior. For synchronous calls the execution of the call behavior action waits until the execution of the invoked behavior completes and a result is returned on its output pin. The action completes immediately without a result, if the call is asynchronous. In particular, the invoked behavior may be an activity.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nu-DzmEIEdqmfMQqVJOcWQ" name="argument_pin_equal_parameter" constrainedElement="_Nu-DzGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nu-Dz2EIEdqmfMQqVJOcWQ" annotatedElement="_Nu-DzmEIEdqmfMQqVJOcWQ">
        <body>The number of argument pins and the number of parameters of the behavior of type in and in-out must be equal.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nu-D0GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nu-D0WEIEdqmfMQqVJOcWQ" name="result_pin_equal_parameter" constrainedElement="_Nu-DzGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nu-D0mEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-D0WEIEdqmfMQqVJOcWQ">
        <body>The number of result pins and the number of parameters of the behavior of type return, out, and in-out must be equal.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nu-D02EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nu-D1GEIEdqmfMQqVJOcWQ" name="type_ordering_multiplicity" constrainedElement="_Nu-DzGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nu-D1WEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-D1GEIEdqmfMQqVJOcWQ">
        <body>The type, ordering, and multiplicity of an argument or result pin is derived from the corresponding parameter of the behavior.

</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nu-D1mEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nu-D12EIEdqmfMQqVJOcWQ" general="_Nu-Di2EIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nu-D2GEIEdqmfMQqVJOcWQ" name="behavior" type="_NqDuQGEIEdqmfMQqVJOcWQ" association="_NvH0hWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nu-D2WEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-D2GEIEdqmfMQqVJOcWQ">
        <body>The invoked behavior. It must be capable of accepting and returning control.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nu-D2mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nu-D22EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvH0hWEIEdqmfMQqVJOcWQ" name="A_behavior_callBehaviorAction" memberEnd="_Nu-D2GEIEdqmfMQqVJOcWQ _NvH0hmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NvH0hmEIEdqmfMQqVJOcWQ" type="_Nu-DzGEIEdqmfMQqVJOcWQ" association="_NvH0hWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvH0h2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvH0iGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvH0iWEIEdqmfMQqVJOcWQ" name="A_operation_callOperationAction" memberEnd="_Nu-DwmEIEdqmfMQqVJOcWQ _NvH0imEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NvH0imEIEdqmfMQqVJOcWQ" type="_Nu-Ds2EIEdqmfMQqVJOcWQ" association="_NvH0iWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvH0i2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvH0jGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvH0jWEIEdqmfMQqVJOcWQ" name="A_target_callOperationAction" memberEnd="_Nu-DxmEIEdqmfMQqVJOcWQ _NvH0j2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NvH0jmEIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NvH0j2EIEdqmfMQqVJOcWQ" type="_Nu-Ds2EIEdqmfMQqVJOcWQ" association="_NvH0jWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvH0kGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvH0kWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvH0kmEIEdqmfMQqVJOcWQ" name="A_target_sendSignalAction" memberEnd="_NvH0lGEIEdqmfMQqVJOcWQ _Nu-DqWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NvH0k2EIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NvH0lGEIEdqmfMQqVJOcWQ" type="_Nu-DoGEIEdqmfMQqVJOcWQ" association="_NvH0kmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvH0lWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvH0lmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvH0l2EIEdqmfMQqVJOcWQ" name="A_signal_sendSignalAction" memberEnd="_NvH0mGEIEdqmfMQqVJOcWQ _Nu-Dr2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NvH0mGEIEdqmfMQqVJOcWQ" type="_Nu-DoGEIEdqmfMQqVJOcWQ" association="_NvH0l2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvH0mWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvH0mmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvH0m2EIEdqmfMQqVJOcWQ" name="A_result_callAction" memberEnd="_NvH0nWEIEdqmfMQqVJOcWQ _Nu-DmmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NvH0nGEIEdqmfMQqVJOcWQ" general="_NvH0oWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NvH0nWEIEdqmfMQqVJOcWQ" type="_Nu-Di2EIEdqmfMQqVJOcWQ" redefinedProperty="_NvH0o2EIEdqmfMQqVJOcWQ" association="_NvH0m2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvH0nmEIEdqmfMQqVJOcWQ" name="A_argument_invocationAction" memberEnd="_Nu-DhWEIEdqmfMQqVJOcWQ _NvH0oGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NvH0n2EIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NvH0oGEIEdqmfMQqVJOcWQ" type="_Nu-DgmEIEdqmfMQqVJOcWQ" redefinedProperty="_NvH0qGEIEdqmfMQqVJOcWQ" association="_NvH0nmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvH0oWEIEdqmfMQqVJOcWQ" name="A_action_output" memberEnd="_NvH0o2EIEdqmfMQqVJOcWQ _NvH0c2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NvH0omEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NvH0o2EIEdqmfMQqVJOcWQ" type="_NvH0cGEIEdqmfMQqVJOcWQ" association="_NvH0oWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvH0pGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvH0pWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvH0pmEIEdqmfMQqVJOcWQ" name="A_action_input" memberEnd="_NvH0qGEIEdqmfMQqVJOcWQ _NvH0eWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NvH0p2EIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NvH0qGEIEdqmfMQqVJOcWQ" type="_NvH0cGEIEdqmfMQqVJOcWQ" association="_NvH0pmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvH0qWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvH0qmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvH0q2EIEdqmfMQqVJOcWQ" name="A_value_valuePin" memberEnd="_Nu-DdmEIEdqmfMQqVJOcWQ _NvH0rGEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NvH0rGEIEdqmfMQqVJOcWQ" type="_Nu-DcGEIEdqmfMQqVJOcWQ" association="_NvH0q2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvH0rWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvH0rmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvQ-YGEIEdqmfMQqVJOcWQ" name="A_context_action" isDerived="true" memberEnd="_NvH0f2EIEdqmfMQqVJOcWQ _NvQ-YWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NvQ-YWEIEdqmfMQqVJOcWQ" type="_NvH0cGEIEdqmfMQqVJOcWQ" association="_NvQ-YGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvQ-YmEIEdqmfMQqVJOcWQ" name="A_body_opaqueAction" memberEnd="_Nu05lmEIEdqmfMQqVJOcWQ _NvQ-Y2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NvQ-Y2EIEdqmfMQqVJOcWQ" type="_Nu05k2EIEdqmfMQqVJOcWQ" association="_NvQ-YmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvQ-ZGEIEdqmfMQqVJOcWQ" name="A_language_opaqueAction" memberEnd="_Nu05nWEIEdqmfMQqVJOcWQ _NvQ-ZWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NvQ-ZWEIEdqmfMQqVJOcWQ" type="_Nu05k2EIEdqmfMQqVJOcWQ" association="_NvQ-ZGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvQ-ZmEIEdqmfMQqVJOcWQ" name="A_inputValue_opaqueAction" memberEnd="_Nu05o2EIEdqmfMQqVJOcWQ _NvQ-aGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NvQ-Z2EIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NvQ-aGEIEdqmfMQqVJOcWQ" type="_Nu05k2EIEdqmfMQqVJOcWQ" redefinedProperty="_NvH0qGEIEdqmfMQqVJOcWQ" association="_NvQ-ZmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvQ-aWEIEdqmfMQqVJOcWQ" name="A_outputValue_opaqueAction" memberEnd="_Nu05p2EIEdqmfMQqVJOcWQ _NvQ-a2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NvQ-amEIEdqmfMQqVJOcWQ" general="_NvH0oWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NvQ-a2EIEdqmfMQqVJOcWQ" type="_Nu05k2EIEdqmfMQqVJOcWQ" redefinedProperty="_NvH0o2EIEdqmfMQqVJOcWQ" association="_NvQ-aWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nu-DgmEIEdqmfMQqVJOcWQ" name="InvocationAction" isAbstract="true">
    <ownedComment xmi:id="_Nu-Dg2EIEdqmfMQqVJOcWQ" annotatedElement="_Nu-DgmEIEdqmfMQqVJOcWQ">
      <body>Invocation is an abstract class for the various actions that invoke behavior.</body>
    </ownedComment>
    <ownedComment xmi:id="_NvQ-bGEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-DgmEIEdqmfMQqVJOcWQ">
      <body>In addition to targeting an object, invocation actions can also invoke behavioral features on ports from where the invocation requests are routed onwards on links deriving from attached connectors. Invocation actions may also be sent to a target via a given port, either on the sending object or on another object.</body>
    </ownedComment>
    <ownedRule xmi:id="_NvavYGEIEdqmfMQqVJOcWQ" name="on_port_receiver" constrainedElement="_Nu-DgmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NvavYWEIEdqmfMQqVJOcWQ" annotatedElement="_NvavYGEIEdqmfMQqVJOcWQ">
        <body>The onPort must be a port on the receiver object.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NvavYmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nu-DhGEIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nu-DhWEIEdqmfMQqVJOcWQ" name="argument" type="_Nu-Df2EIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NvH0nmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nu-DhmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nu-Dh2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nu-DiGEIEdqmfMQqVJOcWQ" annotatedElement="_Nu-DhWEIEdqmfMQqVJOcWQ">
        <body>Specification of the ordered set of argument values that appears during execution.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nu-DiWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nu-DimEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NvavY2EIEdqmfMQqVJOcWQ" name="onPort" type="_NtL6x2EIEdqmfMQqVJOcWQ" association="_NvavcGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NvavZGEIEdqmfMQqVJOcWQ" annotatedElement="_NvavY2EIEdqmfMQqVJOcWQ">
        <body>A optional port of the receiver object on which the behavioral feature is invoked.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvavZWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvavZmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NsvO22EIEdqmfMQqVJOcWQ" name="Trigger">
    <ownedComment xmi:id="_NsvO3GEIEdqmfMQqVJOcWQ" annotatedElement="_NsvO22EIEdqmfMQqVJOcWQ">
      <body>A trigger specifies an event that may cause the execution of an associated behavior. An event is often ultimately caused by the execution of an action, but need not be.</body>
    </ownedComment>
    <ownedComment xmi:id="_NvavZ2EIEdqmfMQqVJOcWQ" annotatedElement="_NsvO22EIEdqmfMQqVJOcWQ">
      <body>A trigger specification may be qualified by the port on which the event occurred.</body>
    </ownedComment>
    <generalization xmi:id="_NsvO3WEIEdqmfMQqVJOcWQ" general="_NjfzQGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NsvO3mEIEdqmfMQqVJOcWQ" name="event" type="_Ns4YyWEIEdqmfMQqVJOcWQ" association="_NtL6xWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsvO32EIEdqmfMQqVJOcWQ" annotatedElement="_NsvO3mEIEdqmfMQqVJOcWQ">
        <body>The event that causes the trigger.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NsvO4GEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsvO4WEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NvavaGEIEdqmfMQqVJOcWQ" name="port" type="_NtL6x2EIEdqmfMQqVJOcWQ" association="_NvavbGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NvavaWEIEdqmfMQqVJOcWQ" annotatedElement="_NvavaGEIEdqmfMQqVJOcWQ">
        <body>A optional port of the receiver object on which the behavioral feature is invoked.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvavamEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nvava2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvavbGEIEdqmfMQqVJOcWQ" name="A_port_trigger" memberEnd="_NvavbWEIEdqmfMQqVJOcWQ _NvavaGEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NvavbWEIEdqmfMQqVJOcWQ" type="_NsvO22EIEdqmfMQqVJOcWQ" association="_NvavbGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvavbmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nvavb2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvavcGEIEdqmfMQqVJOcWQ" name="A_onPort_invocationAction" memberEnd="_NvavY2EIEdqmfMQqVJOcWQ _NvavcWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NvavcWEIEdqmfMQqVJOcWQ" type="_Nu-DgmEIEdqmfMQqVJOcWQ" association="_NvavcGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvavcmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nvavc2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NvavdGEIEdqmfMQqVJOcWQ" name="GeneralizationSet">
    <ownedComment xmi:id="_NvavdWEIEdqmfMQqVJOcWQ" annotatedElement="_NvavdGEIEdqmfMQqVJOcWQ">
      <body>Each Generalization is a binary relationship that relates a specific Classifier to a more general Classifier (i.e., from a class to its superclasses). Each GeneralizationSet defines a particular set of Generalization relationships that describe the way in which a general Classifier (or superclass) may be divided using specific subtypes. For example, a GeneralizationSet could define a partitioning of the class Person into two subclasses: Male Person and Female Person. Here, the GeneralizationSet would associate two instances of Generalization. Both instances would have Person as the general classifier, however one Generalization would involve Male Person as the specific Classifier and the other would involve Female Person as the specific classifier. In other words, the class Person can here be said to be partitioned into two subclasses: Male Person and Female Person. Person could also be divided into North American Person, Asian Person, European Person, or something else. This collection of subsets would  define a different GeneralizationSet that would associate with three other Generalization relationships. All three would have Person as the general Classifier; only the specific classifiers would differ: i.e., North American Person, Asian Person, and European Person.</body>
    </ownedComment>
    <ownedRule xmi:id="_NvavdmEIEdqmfMQqVJOcWQ" name="generalization_same_classifier" constrainedElement="_NvavdGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nvavd2EIEdqmfMQqVJOcWQ" annotatedElement="_NvavdmEIEdqmfMQqVJOcWQ">
        <body>Every Generalization associated with a particular GeneralizationSet must have the same general Classifier.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NvaveGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>generalization->collect(g | g.general)->asSet()->size() &lt;= 1</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NvaveWEIEdqmfMQqVJOcWQ" name="maps_to_generalization_set" constrainedElement="_NvavdGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NvavemEIEdqmfMQqVJOcWQ" annotatedElement="_NvaveWEIEdqmfMQqVJOcWQ">
        <body>The Classifier that maps to a GeneralizationSet may neither be a specific nor a general Classifier in any of the Generalization relationships defined for that GeneralizationSet. In other words, a power type may not be an instance of itself nor may its instances be its subclasses.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nvave2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NvavfGEIEdqmfMQqVJOcWQ" general="_Nimb8GEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NvavfWEIEdqmfMQqVJOcWQ" name="isCovering">
      <eAnnotations xmi:id="_NvavfmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_Nvavf2EIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NvavgGEIEdqmfMQqVJOcWQ" annotatedElement="_NvavfWEIEdqmfMQqVJOcWQ">
        <body>Indicates (via the associated Generalizations) whether or not the set of specific Classifiers are covering for a particular general classifier. When isCovering is true, every instance of a particular general Classifier is also an instance of at least one of its specific Classifiers for the GeneralizationSet. When isCovering is false, there are one or more instances of the particular general Classifier that are not instances of at least one of its specific Classifiers defined for the GeneralizationSet. For example, Person could have two Generalization relationships each with a different specific Classifier: Male Person and Female Person. This GeneralizationSet would be covering because every instance of Person would be an instance of Male Person or Female Person. In contrast, Person could have a three Generalization relationships involving three specific Classifiers: North American Person, Asian Person, and European Person. This GeneralizationSet would not be covering because there are instances of Person for which these three specific Classifiers do not apply. The first example, then, could be read: any Person would be specialized as either being a Male Person or a Female Personand nothing else; the second could be read: any Person would be specialized as being North American Person, Asian Person, European Person, or something else.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NvavgWEIEdqmfMQqVJOcWQ" name="isDisjoint">
      <eAnnotations xmi:id="_NvavgmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_Nvavg2EIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NvavhGEIEdqmfMQqVJOcWQ" annotatedElement="_NvavgWEIEdqmfMQqVJOcWQ">
        <body>Indicates whether or not the set of specific Classifiers in a Generalization relationship have instance in common. If isDisjoint is true, the specific Classifiers for a particular GeneralizationSet have no members in common; that is, their intersection is empty. If isDisjoint is false, the specific Classifiers in a particular GeneralizationSet have one or more members in common; that is, their intersection is not empty. For example, Person could have two Generalization relationships, each with the different specific Classifier: Manager or Staff. This would be disjoint because every instance of Person must either be a Manager or Staff. In contrast, Person could have two Generalization relationships involving two specific (and non-covering) Classifiers: Sales Person and Manager. This GeneralizationSet would not be disjoint because there are instances of Person which can be a Sales Person and a Manager.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NvavhWEIEdqmfMQqVJOcWQ" name="powertype" type="_NiTgcGEIEdqmfMQqVJOcWQ" association="_NvkgZ2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NvavhmEIEdqmfMQqVJOcWQ" annotatedElement="_NvavhWEIEdqmfMQqVJOcWQ">
        <body>Designates the Classifier that is defined as the power type for the associated GeneralizationSet.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nvavh2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvaviGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NvaviWEIEdqmfMQqVJOcWQ" name="generalization" type="_NmLT3WEIEdqmfMQqVJOcWQ" association="_NvkgaGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NvavimEIEdqmfMQqVJOcWQ" annotatedElement="_NvaviWEIEdqmfMQqVJOcWQ">
        <body>Designates the instances of Generalization which are members of a given GeneralizationSet.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nvavi2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvavjGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NmLT3WEIEdqmfMQqVJOcWQ" name="Generalization">
    <ownedComment xmi:id="_NmLT3mEIEdqmfMQqVJOcWQ" annotatedElement="_NmLT3WEIEdqmfMQqVJOcWQ">
      <body>A generalization relates a specific classifier to a more general classifier, and is owned by the specific classifier.

A generalization can be designated as being a member of a particular generalization set.

</body>
    </ownedComment>
    <ownedComment xmi:id="_NvavlGEIEdqmfMQqVJOcWQ" annotatedElement="_NmLT3WEIEdqmfMQqVJOcWQ">
      <body>A generalization relates a specific classifier to a more general classifier, and is owned by the specific classifier.



</body>
    </ownedComment>
    <ownedRule xmi:id="_NvkgYGEIEdqmfMQqVJOcWQ" name="generalization_same_classifier" constrainedElement="_NmLT3WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NvkgYWEIEdqmfMQqVJOcWQ" annotatedElement="_NvkgYGEIEdqmfMQqVJOcWQ">
        <body>Every Generalization associated with a given GeneralizationSet must have the same general Classifier. That is, all Generalizations for a particular GeneralizationSet must have the same superclass.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NvkgYmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NmLT32EIEdqmfMQqVJOcWQ" general="_NidRw2EIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NmLT4GEIEdqmfMQqVJOcWQ" name="isSubstitutable">
      <ownedComment xmi:id="_NmLT4WEIEdqmfMQqVJOcWQ" annotatedElement="_NmLT4GEIEdqmfMQqVJOcWQ">
        <body>Indicates whether the specific classifier can be used wherever the general classifier can be used. If true, the execution traces of the specific classifier will be a superset of the execution traces of the general classifier.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NmLT4mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NmLT42EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NmLT5GEIEdqmfMQqVJOcWQ" name="specific" type="_NiTgcGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRxmEIEdqmfMQqVJOcWQ _NidR4GEIEdqmfMQqVJOcWQ" association="_Nn-DkGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NmLT5WEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NmLT5mEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NmLT52EIEdqmfMQqVJOcWQ" annotatedElement="_NmLT5GEIEdqmfMQqVJOcWQ">
        <body>References the specializing classifier in the Generalization relationship.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NmLT6GEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NmLT6WEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NmLT6mEIEdqmfMQqVJOcWQ" name="general" type="_NiTgcGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRzGEIEdqmfMQqVJOcWQ" association="_Nn-Dk2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NmLT62EIEdqmfMQqVJOcWQ" annotatedElement="_NmLT6mEIEdqmfMQqVJOcWQ">
        <body>References the general classifier in the Generalization relationship.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NmLT7GEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NmLT7WEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NvkgY2EIEdqmfMQqVJOcWQ" name="generalizationSet" type="_NvavdGEIEdqmfMQqVJOcWQ" association="_NvkgaGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NvkgZGEIEdqmfMQqVJOcWQ" annotatedElement="_NvkgY2EIEdqmfMQqVJOcWQ">
        <body>Designates a set in which instances of Generalization is considered members.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvkgZWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvkgZmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvkgZ2EIEdqmfMQqVJOcWQ" name="A_powertypeExtent_powertype" memberEnd="_NvavkGEIEdqmfMQqVJOcWQ _NvavhWEIEdqmfMQqVJOcWQ"/>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvkgaGEIEdqmfMQqVJOcWQ" name="A_generalizationSet_generalization" memberEnd="_NvkgY2EIEdqmfMQqVJOcWQ _NvaviWEIEdqmfMQqVJOcWQ"/>
  <ownedMember xmi:type="uml:Class" xmi:id="_NvkgaWEIEdqmfMQqVJOcWQ" name="InformationItem">
    <ownedComment xmi:id="_NvkgamEIEdqmfMQqVJOcWQ" annotatedElement="_NvkgaWEIEdqmfMQqVJOcWQ">
      <body>An information item is an abstraction of all kinds of information that can be exchanged between objects. It is a kind of classifier intended for representing information in a very abstract way, one which cannot be instantiated. One purpose of InformationItems is to be able to define preliminary models, before having made detailed modeling decisions on types or structures. One other purpose of information items and information flows is to abstract complex models by a less precise but more general representation of the information exchanged betwen entities of a system.

</body>
    </ownedComment>
    <ownedRule xmi:id="_Nvkga2EIEdqmfMQqVJOcWQ" name="sources_and_targets" constrainedElement="_NvkgaWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NvkgbGEIEdqmfMQqVJOcWQ" annotatedElement="_Nvkga2EIEdqmfMQqVJOcWQ">
        <body>The sources and targets of an information item (its related information flows) must designate subsets of the sources and targets of the representation information item, if any.The Classifiers that can realize an information item can only be of the following kind: Class, Interface, InformationItem, Signal, Component.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NvkgbWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>(self.represented->select(p | p->oclIsKindOf(InformationItem))->forAll(p |

  p.informationFlow.source->forAll(q | self.informationFlow.source->include(q)) and

    p.informationFlow.target->forAll(q | self.informationFlow.target->include(q)))) and

      (self.represented->forAll(p | p->oclIsKindOf(Class) or oclIsKindOf(Interface) or

        oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component)))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NvkgbmEIEdqmfMQqVJOcWQ" name="has_no" constrainedElement="_NvkgaWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nvkgb2EIEdqmfMQqVJOcWQ" annotatedElement="_NvkgbmEIEdqmfMQqVJOcWQ">
        <body>An informationItem has no feature, no generalization, and no associations.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NvkgcGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.generalization->isEmpty() and self.feature->isEmpty()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NvkgcWEIEdqmfMQqVJOcWQ" name="not_instantiable" constrainedElement="_NvkgaWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NvkgcmEIEdqmfMQqVJOcWQ" annotatedElement="_NvkgcWEIEdqmfMQqVJOcWQ">
        <body>It is not instantiable.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nvkgc2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>isAbstract</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NvkgdGEIEdqmfMQqVJOcWQ" general="_NiTgcGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NvkgdWEIEdqmfMQqVJOcWQ" name="represented" type="_NiTgcGEIEdqmfMQqVJOcWQ" association="_NvkgpmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NvkgdmEIEdqmfMQqVJOcWQ" annotatedElement="_NvkgdWEIEdqmfMQqVJOcWQ">
        <body>Determines the classifiers that will specify the structure and nature of the information. An information item represents all its represented classifiers.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nvkgd2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvkgeGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NvkgeWEIEdqmfMQqVJOcWQ" name="InformationFlow">
    <ownedComment xmi:id="_NvkgemEIEdqmfMQqVJOcWQ" annotatedElement="_NvkgeWEIEdqmfMQqVJOcWQ">
      <body>An information flow specifies that one or more information items circulates from its sources to its targets. Information flows require some kind of information channel for transmitting information items from the source to the destination. An information channel is represented in various ways depending on the nature of its sources and targets. It may be represented by connectors, links, associations, or even dependencies. For example, if the source and destination are parts in some composite structure such as a collaboration, then the information channel is likely to be represented by a connector between them. Or, if the source and target are objects (which are a kind of InstanceSpecification), they may be represented by a link that joins the two, and so on.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nvkge2EIEdqmfMQqVJOcWQ" name="sources_and_targets_kind" constrainedElement="_NvkgeWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NvkgfGEIEdqmfMQqVJOcWQ" annotatedElement="_Nvkge2EIEdqmfMQqVJOcWQ">
        <body>The sources and targets of the information flow can only be one of the following kind: Actor, Node, UseCase, Artifact, Class, Component, Port, Property, Interface, Package, ActivityNode, ActivityPartition and InstanceSpecification except when its classifier is a relationship (i.e. it represents a link).</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NvkgfWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>(self.source->forAll(p | p->oclIsKindOf(Actor) or oclIsKindOf(Node) or

  oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or oclIsKindOf(Class) or

  oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or

  oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or

  oclIsKindOf(ActivityPartition) or oclIsKindOf(InstanceSpecification))) and

    (self.target->forAll(p | p->oclIsKindOf(Actor) or oclIsKindOf(Node) or

      oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or oclIsKindOf(Class) or

      oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or

      oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or

      oclIsKindOf(ActivityPartition) or oclIsKindOf(InstanceSpecification)))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NvkgfmEIEdqmfMQqVJOcWQ" name="must_conform" constrainedElement="_NvkgeWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nvkgf2EIEdqmfMQqVJOcWQ" annotatedElement="_NvkgfmEIEdqmfMQqVJOcWQ">
        <body>The sources and targets of the information flow must conform with the sources and targets or conversely the targets and sources of the realization relationships.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NvkggGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NvkggWEIEdqmfMQqVJOcWQ" name="convey_classifiers" constrainedElement="_NvkgeWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NvkggmEIEdqmfMQqVJOcWQ" annotatedElement="_NvkggWEIEdqmfMQqVJOcWQ">
        <body>An information flow can only convey classifiers that are allowed to represent an information item.

</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nvkgg2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.conveyed.represented->forAll(p | p->oclIsKindOf(Class) or oclIsKindOf(Interface)

  or oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component))</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NvkghGEIEdqmfMQqVJOcWQ" general="_NidRw2EIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NvkghWEIEdqmfMQqVJOcWQ" general="_Nimb8GEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NvkghmEIEdqmfMQqVJOcWQ" name="realization" type="_NiwMgWEIEdqmfMQqVJOcWQ" association="_NvkgomEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nvkgh2EIEdqmfMQqVJOcWQ" annotatedElement="_NvkghmEIEdqmfMQqVJOcWQ">
        <body>Determines which Relationship will realize the specified flow</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvkgiGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvkgiWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NvkgimEIEdqmfMQqVJOcWQ" name="conveyed" type="_NiTgcGEIEdqmfMQqVJOcWQ" association="_NvkgqmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nvkgi2EIEdqmfMQqVJOcWQ" annotatedElement="_NvkgimEIEdqmfMQqVJOcWQ">
        <body>Specifies the information items that may circulate on this information flow.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvkgjGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvkgjWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NvkgjmEIEdqmfMQqVJOcWQ" name="informationSource" type="_NjfzQGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRxmEIEdqmfMQqVJOcWQ" association="_NvkgrmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nvkgj2EIEdqmfMQqVJOcWQ" annotatedElement="_NvkgjmEIEdqmfMQqVJOcWQ">
        <body>Defines from which source the conveyed InformationItems are initiated.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvkgkGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvkgkWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NvkgkmEIEdqmfMQqVJOcWQ" name="informationTarget" type="_NjfzQGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRzGEIEdqmfMQqVJOcWQ" association="_NvtqUGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nvkgk2EIEdqmfMQqVJOcWQ" annotatedElement="_NvkgkmEIEdqmfMQqVJOcWQ">
        <body>Defines to which target the conveyed InformationItems are directed.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvkglGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvkglWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NvkglmEIEdqmfMQqVJOcWQ" name="realizingActivityEdge" type="_NxDuLWEIEdqmfMQqVJOcWQ" association="_NvtqVWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nvkgl2EIEdqmfMQqVJOcWQ" annotatedElement="_NvkglmEIEdqmfMQqVJOcWQ">
        <body>Determines which ActivityEdges will realize the specified flow.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvkgmGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvkgmWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NvkgmmEIEdqmfMQqVJOcWQ" name="realizingConnector" type="_NrGQEGEIEdqmfMQqVJOcWQ" association="_NvtqWWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nvkgm2EIEdqmfMQqVJOcWQ" annotatedElement="_NvkgmmEIEdqmfMQqVJOcWQ">
        <body>Determines which Connectors will realize the specified flow.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvkgnGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvkgnWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NvkgnmEIEdqmfMQqVJOcWQ" name="realizingMessage" type="_NrZLOGEIEdqmfMQqVJOcWQ" association="_NvtqXWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nvkgn2EIEdqmfMQqVJOcWQ" annotatedElement="_NvkgnmEIEdqmfMQqVJOcWQ">
        <body>Determines which Messages will realize the specified flow.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvkgoGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvkgoWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvkgomEIEdqmfMQqVJOcWQ" name="A_realization_abstraction" memberEnd="_NvkghmEIEdqmfMQqVJOcWQ _Nvkgo2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nvkgo2EIEdqmfMQqVJOcWQ" name="abstraction" type="_NvkgeWEIEdqmfMQqVJOcWQ" association="_NvkgomEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvkgpGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvkgpWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvkgpmEIEdqmfMQqVJOcWQ" name="A_represented_representation" memberEnd="_NvkgdWEIEdqmfMQqVJOcWQ _Nvkgp2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nvkgp2EIEdqmfMQqVJOcWQ" name="representation" type="_NvkgaWEIEdqmfMQqVJOcWQ" association="_NvkgpmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvkgqGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvkgqWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvkgqmEIEdqmfMQqVJOcWQ" name="A_conveyed_informationFlow" memberEnd="_Nvkgq2EIEdqmfMQqVJOcWQ _NvkgimEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nvkgq2EIEdqmfMQqVJOcWQ" type="_NvkgeWEIEdqmfMQqVJOcWQ" association="_NvkgqmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvkgrGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvkgrWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvkgrmEIEdqmfMQqVJOcWQ" name="A_informationSource_informationFlow" memberEnd="_NvkgjmEIEdqmfMQqVJOcWQ _NvkgsGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nvkgr2EIEdqmfMQqVJOcWQ" general="_NkPaJGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NvkgsGEIEdqmfMQqVJOcWQ" type="_NvkgeWEIEdqmfMQqVJOcWQ" association="_NvkgrmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvkgsWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvkgsmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvtqUGEIEdqmfMQqVJOcWQ" name="A_informationTarget_informationFlow" memberEnd="_NvkgkmEIEdqmfMQqVJOcWQ _NvtqUmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NvtqUWEIEdqmfMQqVJOcWQ" general="_NkPaJ2EIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NvtqUmEIEdqmfMQqVJOcWQ" type="_NvkgeWEIEdqmfMQqVJOcWQ" association="_NvtqUGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvtqU2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvtqVGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvtqVWEIEdqmfMQqVJOcWQ" name="A_realizingActivityEdge_informationFlow" memberEnd="_NvkglmEIEdqmfMQqVJOcWQ _NvtqVmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NvtqVmEIEdqmfMQqVJOcWQ" type="_NvkgeWEIEdqmfMQqVJOcWQ" association="_NvtqVWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvtqV2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvtqWGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvtqWWEIEdqmfMQqVJOcWQ" name="A_realizingConnector_informationFlow" memberEnd="_NvkgmmEIEdqmfMQqVJOcWQ _NvtqWmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NvtqWmEIEdqmfMQqVJOcWQ" type="_NvkgeWEIEdqmfMQqVJOcWQ" association="_NvtqWWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvtqW2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvtqXGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NvtqXWEIEdqmfMQqVJOcWQ" name="A_realizingMessage_informationFlow" memberEnd="_NvkgnmEIEdqmfMQqVJOcWQ _NvtqXmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NvtqXmEIEdqmfMQqVJOcWQ" type="_NvkgeWEIEdqmfMQqVJOcWQ" association="_NvtqXWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvtqX2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvtqYGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NvtqYWEIEdqmfMQqVJOcWQ" name="Model">
    <ownedComment xmi:id="_NvtqYmEIEdqmfMQqVJOcWQ" annotatedElement="_NvtqYWEIEdqmfMQqVJOcWQ">
      <body>The Model construct is defined as a Package. It contains a (hierarchical) set of elements that together describe the physical system being modeled. A Model may also contain a set of elements that represents the environment of the system, typically Actors, together with their interrelationships, such as Associations and Dependencies</body>
    </ownedComment>
    <generalization xmi:id="_NvtqY2EIEdqmfMQqVJOcWQ" general="_NjWCYGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NvtqZGEIEdqmfMQqVJOcWQ" name="viewpoint">
      <eAnnotations xmi:id="_NvtqZWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NvtqZmEIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NvtqZ2EIEdqmfMQqVJOcWQ" annotatedElement="_NvtqZGEIEdqmfMQqVJOcWQ">
        <body>The name of the viewpoint that is expressed by a model (This name may refer to a profile definition).</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NvtqaGEIEdqmfMQqVJOcWQ" name="VariableAction" isAbstract="true">
    <ownedComment xmi:id="_NvtqaWEIEdqmfMQqVJOcWQ" annotatedElement="_NvtqaGEIEdqmfMQqVJOcWQ">
      <body>VariableAction is an abstract class for actions that operate on a statically specified variable.</body>
    </ownedComment>
    <ownedRule xmi:id="_NvtqamEIEdqmfMQqVJOcWQ" name="scope_of_variable" constrainedElement="_NvtqaGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nvtqa2EIEdqmfMQqVJOcWQ" annotatedElement="_NvtqamEIEdqmfMQqVJOcWQ">
        <body>The action must be in the scope of the variable.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NvtqbGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.variable.isAccessibleBy(self)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NvtqbWEIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NvtqbmEIEdqmfMQqVJOcWQ" name="variable" type="_Ny124GEIEdqmfMQqVJOcWQ" association="_Nv3biWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nvtqb2EIEdqmfMQqVJOcWQ" annotatedElement="_NvtqbmEIEdqmfMQqVJOcWQ">
        <body>Variable to be read.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvtqcGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvtqcWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NvtqcmEIEdqmfMQqVJOcWQ" name="ReadVariableAction">
    <ownedComment xmi:id="_Nvtqc2EIEdqmfMQqVJOcWQ" annotatedElement="_NvtqcmEIEdqmfMQqVJOcWQ">
      <body>This action reads the values of a variables, in order if the variable is ordered.</body>
    </ownedComment>
    <ownedRule xmi:id="_NvtqdGEIEdqmfMQqVJOcWQ" name="type_and_ordering" constrainedElement="_NvtqcmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NvtqdWEIEdqmfMQqVJOcWQ" annotatedElement="_NvtqdGEIEdqmfMQqVJOcWQ">
        <body>The type and ordering of the result output pin of a read-variable action are the same as the type and ordering of the variable.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NvtqdmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.result.type =self.variable.type
and self.result.ordering = self.variable.ordering
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nvtqd2EIEdqmfMQqVJOcWQ" name="compatible_multiplicity" constrainedElement="_NvtqcmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NvtqeGEIEdqmfMQqVJOcWQ" annotatedElement="_Nvtqd2EIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the variable must be compatible with the multiplicity of the output pin.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NvtqeWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.variable.multiplicity.compatibleWith(self.result.multiplicity)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NvtqemEIEdqmfMQqVJOcWQ" general="_NvtqaGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nvtqe2EIEdqmfMQqVJOcWQ" name="result" type="_Nu-DfGEIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0c2EIEdqmfMQqVJOcWQ" association="_Nv3bjWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NvtqfGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NvtqfWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NvtqfmEIEdqmfMQqVJOcWQ" annotatedElement="_Nvtqe2EIEdqmfMQqVJOcWQ">
        <body>Gives the output pin on which the result is put.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nvtqf2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvtqgGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NvtqgWEIEdqmfMQqVJOcWQ" name="WriteVariableAction" isAbstract="true">
    <ownedComment xmi:id="_NvtqgmEIEdqmfMQqVJOcWQ" annotatedElement="_NvtqgWEIEdqmfMQqVJOcWQ">
      <body>A write variable action operates on a variable to modify its values. It has an input pin on which the value that will be added or removed is put. Other aspects of write variable actions are inherited from VariableAction.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nvtqg2EIEdqmfMQqVJOcWQ" name="same_type" constrainedElement="_NvtqgWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NvtqhGEIEdqmfMQqVJOcWQ" annotatedElement="_Nvtqg2EIEdqmfMQqVJOcWQ">
        <body>The type input pin is the same as the type of the variable.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NvtqhWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.value.type = self.variable.type</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NvtqhmEIEdqmfMQqVJOcWQ" name="multiplicity" constrainedElement="_NvtqgWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nvtqh2EIEdqmfMQqVJOcWQ" annotatedElement="_NvtqhmEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the input pin is 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NvtqiGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.value.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NvtqiWEIEdqmfMQqVJOcWQ" general="_NvtqaGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NvtqimEIEdqmfMQqVJOcWQ" name="value" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_Nv3bkmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nvtqi2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NvtqjGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NvtqjWEIEdqmfMQqVJOcWQ" annotatedElement="_NvtqimEIEdqmfMQqVJOcWQ">
        <body>Value to be added or removed from the variable.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvtqjmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nvtqj2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NvtqkGEIEdqmfMQqVJOcWQ" name="ClearVariableAction">
    <ownedComment xmi:id="_NvtqkWEIEdqmfMQqVJOcWQ" annotatedElement="_NvtqkGEIEdqmfMQqVJOcWQ">
      <body>This action removes all values of an variable.</body>
    </ownedComment>
    <generalization xmi:id="_NvtqkmEIEdqmfMQqVJOcWQ" general="_NvtqaGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nv3bUGEIEdqmfMQqVJOcWQ" name="AddVariableValueAction">
    <ownedComment xmi:id="_Nv3bUWEIEdqmfMQqVJOcWQ" annotatedElement="_Nv3bUGEIEdqmfMQqVJOcWQ">
      <body>Variables are potentially multi-valued and ordered, so the action supports specification of insertion points for new values. It also supports the removal of existing values of the variable before the new value is added.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nv3bUmEIEdqmfMQqVJOcWQ" name="single_input_pin" constrainedElement="_Nv3bUGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nv3bU2EIEdqmfMQqVJOcWQ" annotatedElement="_Nv3bUmEIEdqmfMQqVJOcWQ">
        <body>Actions adding values to ordered variables must have a single input pin for the insertion point with type UnlimtedNatural and multiplicity of 1..1, otherwise the action has no input pin for the insertion point.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nv3bVGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>let insertAtPins : Collection = self.insertAt in
if self.variable.ordering = #unordered
then insertAtPins->size() = 0
else let insertAtPin : InputPin = insertAt->asSequence()->first() in
insertAtPins->size() = 1
and insertAtPin.type = UnlimitedNatural
and insertAtPin.multiplicity.is(1,1))
endif
</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nv3bVWEIEdqmfMQqVJOcWQ" general="_NvtqgWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nv3bVmEIEdqmfMQqVJOcWQ" name="isReplaceAll">
      <ownedComment xmi:id="_Nv3bV2EIEdqmfMQqVJOcWQ" annotatedElement="_Nv3bVmEIEdqmfMQqVJOcWQ">
        <body>Specifies whether existing values of the variable should be removed before adding the new value.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_Nv3bWGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nv3bWWEIEdqmfMQqVJOcWQ" name="insertAt" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_Nv3bl2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nv3bWmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nv3bW2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nv3bXGEIEdqmfMQqVJOcWQ" annotatedElement="_Nv3bWWEIEdqmfMQqVJOcWQ">
        <body>Gives the position at which to insert a new value or move an existing value in ordered variables. The types is UnlimitedINatural, but the value cannot be zero. This pin is omitted for unordered variables.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nv3bXWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nv3bXmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nv3bX2EIEdqmfMQqVJOcWQ" name="RemoveVariableValueAction">
    <ownedComment xmi:id="_Nv3bYGEIEdqmfMQqVJOcWQ" annotatedElement="_Nv3bX2EIEdqmfMQqVJOcWQ">
      <body>One value is removed from the set of possible variable values. Variables are potentially multi-valued and ordered, and may support duplicates, so the action supports specification of removal points for new values.  It also supports the removal of all duplicate values.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nv3bYWEIEdqmfMQqVJOcWQ" name="unlimited_natural" constrainedElement="_Nv3bX2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nv3bYmEIEdqmfMQqVJOcWQ" annotatedElement="_Nv3bYWEIEdqmfMQqVJOcWQ">
        <body>Actions removing a value from ordered nonunique variables must have a single removeAt input pin if isRemoveDuplicates is false. It must be of type UnlimitedNatural with multiplicity of 1..1, otherwise the action has no removeAt input pin.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nv3bY2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nv3bZGEIEdqmfMQqVJOcWQ" general="_NvtqgWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nv3bZWEIEdqmfMQqVJOcWQ" name="isRemoveDuplicates">
      <ownedComment xmi:id="_Nv3bZmEIEdqmfMQqVJOcWQ" annotatedElement="_Nv3bZWEIEdqmfMQqVJOcWQ">
        <body>Specifies whether to remove duplicates of the value in nonunique variables.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_Nv3bZ2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nv3baGEIEdqmfMQqVJOcWQ" name="removeAt" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_Nv3bnGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nv3baWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nv3bamEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nv3ba2EIEdqmfMQqVJOcWQ" annotatedElement="_Nv3baGEIEdqmfMQqVJOcWQ">
        <body>Specifies the position of an existing value to remove in ordered nonunique variables. The type of the pin is UnlimitedNatural, but the value cannot be zero or unlimited.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nv3bbGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nv3bbWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nv3bbmEIEdqmfMQqVJOcWQ" name="RaiseExceptionAction">
    <ownedComment xmi:id="_Nv3bb2EIEdqmfMQqVJOcWQ" annotatedElement="_Nv3bbmEIEdqmfMQqVJOcWQ">
      <body>RaiseExceptionAction is an action that causes an exception to occur. The input value becomes the exception object.</body>
    </ownedComment>
    <generalization xmi:id="_Nv3bcGEIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nv3bcWEIEdqmfMQqVJOcWQ" name="exception" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NwBMVWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nv3bcmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nv3bc2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nv3bdGEIEdqmfMQqVJOcWQ" annotatedElement="_Nv3bcWEIEdqmfMQqVJOcWQ">
        <body>An input pin whose value becomes an exception object.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nv3bdWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nv3bdmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nv3bd2EIEdqmfMQqVJOcWQ" name="ActionInputPin">
    <ownedComment xmi:id="_Nv3beGEIEdqmfMQqVJOcWQ" annotatedElement="_Nv3bd2EIEdqmfMQqVJOcWQ">
      <body>An action input pin is a kind of pin that executes an action to determine the values to input to another.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nv3beWEIEdqmfMQqVJOcWQ" name="one_output_pin" constrainedElement="_Nv3bd2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nv3bemEIEdqmfMQqVJOcWQ" annotatedElement="_Nv3beWEIEdqmfMQqVJOcWQ">
        <body>The fromAction of an action input pin must have exactly one output pin.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nv3be2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nv3bfGEIEdqmfMQqVJOcWQ" name="input_pin" constrainedElement="_Nv3bd2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nv3bfWEIEdqmfMQqVJOcWQ" annotatedElement="_Nv3bfGEIEdqmfMQqVJOcWQ">
        <body>The fromAction of an action input pin must only have action input pins as input pins.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nv3bfmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nv3bf2EIEdqmfMQqVJOcWQ" name="no_control_or_data_flow" constrainedElement="_Nv3bd2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nv3bgGEIEdqmfMQqVJOcWQ" annotatedElement="_Nv3bf2EIEdqmfMQqVJOcWQ">
        <body>The fromAction of an action input pin cannot have control or data flows coming into or out of it or its pins.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nv3bgWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nv3bgmEIEdqmfMQqVJOcWQ" general="_Nu-Df2EIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nv3bg2EIEdqmfMQqVJOcWQ" name="fromAction" type="_NvH0cGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NwBMUGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nv3bhGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nv3bhWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nv3bhmEIEdqmfMQqVJOcWQ" annotatedElement="_Nv3bg2EIEdqmfMQqVJOcWQ">
        <body>The action used to provide values.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nv3bh2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nv3biGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nv3biWEIEdqmfMQqVJOcWQ" name="A_variable_variableAction" memberEnd="_Nv3bimEIEdqmfMQqVJOcWQ _NvtqbmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nv3bimEIEdqmfMQqVJOcWQ" type="_NvtqaGEIEdqmfMQqVJOcWQ" association="_Nv3biWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nv3bi2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nv3bjGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nv3bjWEIEdqmfMQqVJOcWQ" name="A_result_readVariableAction" memberEnd="_Nvtqe2EIEdqmfMQqVJOcWQ _Nv3bj2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nv3bjmEIEdqmfMQqVJOcWQ" general="_NvH0oWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nv3bj2EIEdqmfMQqVJOcWQ" type="_NvtqcmEIEdqmfMQqVJOcWQ" association="_Nv3bjWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nv3bkGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nv3bkWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nv3bkmEIEdqmfMQqVJOcWQ" name="A_value_writeVariableAction" memberEnd="_NvtqimEIEdqmfMQqVJOcWQ _Nv3blGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nv3bk2EIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nv3blGEIEdqmfMQqVJOcWQ" type="_NvtqgWEIEdqmfMQqVJOcWQ" association="_Nv3bkmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nv3blWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nv3blmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nv3bl2EIEdqmfMQqVJOcWQ" name="A_insertAt_addVariableValueAction" memberEnd="_Nv3bWWEIEdqmfMQqVJOcWQ _Nv3bmWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nv3bmGEIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nv3bmWEIEdqmfMQqVJOcWQ" type="_Nv3bUGEIEdqmfMQqVJOcWQ" association="_Nv3bl2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nv3bmmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nv3bm2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nv3bnGEIEdqmfMQqVJOcWQ" name="A_removeAt_removeVariableValueAction" memberEnd="_Nv3baGEIEdqmfMQqVJOcWQ _Nv3bnmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nv3bnWEIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nv3bnmEIEdqmfMQqVJOcWQ" type="_Nv3bX2EIEdqmfMQqVJOcWQ" association="_Nv3bnGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nv3bn2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nv3boGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwBMUGEIEdqmfMQqVJOcWQ" name="A_fromAction_actionInputPin" memberEnd="_Nv3bg2EIEdqmfMQqVJOcWQ _NwBMUmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NwBMUWEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NwBMUmEIEdqmfMQqVJOcWQ" type="_Nv3bd2EIEdqmfMQqVJOcWQ" association="_NwBMUGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwBMU2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwBMVGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwBMVWEIEdqmfMQqVJOcWQ" name="A_exception_raiseExceptionAction" memberEnd="_Nv3bcWEIEdqmfMQqVJOcWQ _NwBMV2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NwBMVmEIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NwBMV2EIEdqmfMQqVJOcWQ" type="_Nv3bbmEIEdqmfMQqVJOcWQ" association="_NwBMVWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwBMWGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwBMWWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NwBMWmEIEdqmfMQqVJOcWQ" name="ReadExtentAction">
    <ownedComment xmi:id="_NwBMW2EIEdqmfMQqVJOcWQ" annotatedElement="_NwBMWmEIEdqmfMQqVJOcWQ">
      <body>ReadExtentAction is an action that retrieves the current instances of a classifier.</body>
    </ownedComment>
    <ownedRule xmi:id="_NwBMXGEIEdqmfMQqVJOcWQ" name="type_is_classifier" constrainedElement="_NwBMWmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwBMXWEIEdqmfMQqVJOcWQ" annotatedElement="_NwBMXGEIEdqmfMQqVJOcWQ">
        <body>The type of the result output pin is the classifier.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwBMXmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwBMX2EIEdqmfMQqVJOcWQ" name="multiplicity_of_result" constrainedElement="_NwBMWmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwBMYGEIEdqmfMQqVJOcWQ" annotatedElement="_NwBMX2EIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the result output pin is 0..*.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwBMYWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.result.multiplicity.is(0,#null)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NwBMYmEIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NwBMY2EIEdqmfMQqVJOcWQ" name="result" type="_Nu-DfGEIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0c2EIEdqmfMQqVJOcWQ" association="_NwUHvWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NwBMZGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NwBMZWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NwBMZmEIEdqmfMQqVJOcWQ" annotatedElement="_NwBMY2EIEdqmfMQqVJOcWQ">
        <body>The runtime instances of the classifier.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwBMZ2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwBMaGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NwBMaWEIEdqmfMQqVJOcWQ" name="classifier" type="_NiTgcGEIEdqmfMQqVJOcWQ" association="_NwUHwmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwBMamEIEdqmfMQqVJOcWQ" annotatedElement="_NwBMaWEIEdqmfMQqVJOcWQ">
        <body>The classifier whose instances are to be retrieved.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwBMa2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwBMbGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NwBMbWEIEdqmfMQqVJOcWQ" name="ReclassifyObjectAction">
    <ownedComment xmi:id="_NwBMbmEIEdqmfMQqVJOcWQ" annotatedElement="_NwBMbWEIEdqmfMQqVJOcWQ">
      <body>ReclassifyObjectAction adds given classifier to an object and removes given classifiers from that object. Multiple classifiers may be added and removed at a time.</body>
    </ownedComment>
    <ownedRule xmi:id="_NwBMb2EIEdqmfMQqVJOcWQ" name="classifier_not_abstract" constrainedElement="_NwBMbWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwBMcGEIEdqmfMQqVJOcWQ" annotatedElement="_NwBMb2EIEdqmfMQqVJOcWQ">
        <body>None of the new classifiers may be abstract.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwBMcWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>not self.newClassifier->exists(isAbstract = true)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwBMcmEIEdqmfMQqVJOcWQ" name="multiplicity" constrainedElement="_NwBMbWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwBMc2EIEdqmfMQqVJOcWQ" annotatedElement="_NwBMcmEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the input pin is 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwBMdGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.argument.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwBMdWEIEdqmfMQqVJOcWQ" name="input_pin" constrainedElement="_NwBMbWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwBMdmEIEdqmfMQqVJOcWQ" annotatedElement="_NwBMdWEIEdqmfMQqVJOcWQ">
        <body>The input pin has no type.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwBMd2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.argument.type->size() = 0</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NwBMeGEIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NwBMeWEIEdqmfMQqVJOcWQ" name="isReplaceAll">
      <ownedComment xmi:id="_NwBMemEIEdqmfMQqVJOcWQ" annotatedElement="_NwBMeWEIEdqmfMQqVJOcWQ">
        <body>Specifies whether existing classifiers should be removed before adding the new classifiers.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NwBMe2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NwBMfGEIEdqmfMQqVJOcWQ" name="oldClassifier" type="_NiTgcGEIEdqmfMQqVJOcWQ" association="_NwdRMGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwBMfWEIEdqmfMQqVJOcWQ" annotatedElement="_NwBMfGEIEdqmfMQqVJOcWQ">
        <body>A set of classifiers to be removed from the classifiers of the object.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwBMfmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwBMf2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NwBMgGEIEdqmfMQqVJOcWQ" name="newClassifier" type="_NiTgcGEIEdqmfMQqVJOcWQ" association="_NwdRNGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwBMgWEIEdqmfMQqVJOcWQ" annotatedElement="_NwBMgGEIEdqmfMQqVJOcWQ">
        <body>A set of classifiers to be added to the classifiers of the object.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwBMgmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwBMg2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NwBMhGEIEdqmfMQqVJOcWQ" name="object" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NwwzMGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NwBMhWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NwBMhmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NwBMh2EIEdqmfMQqVJOcWQ" annotatedElement="_NwBMhGEIEdqmfMQqVJOcWQ">
        <body>Holds the object to be reclassified.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwBMiGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwBMiWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NwBMimEIEdqmfMQqVJOcWQ" name="ReadIsClassifiedObjectAction">
    <ownedComment xmi:id="_NwBMi2EIEdqmfMQqVJOcWQ" annotatedElement="_NwBMimEIEdqmfMQqVJOcWQ">
      <body>This action tests the classification of an object against a given class. It can be restricted to testing direct instances.</body>
    </ownedComment>
    <ownedRule xmi:id="_NwBMjGEIEdqmfMQqVJOcWQ" name="multiplicity_of_input" constrainedElement="_NwBMimEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwBMjWEIEdqmfMQqVJOcWQ" annotatedElement="_NwBMjGEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the input pin is 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwBMjmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.object.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwBMj2EIEdqmfMQqVJOcWQ" name="no_type" constrainedElement="_NwBMimEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwBMkGEIEdqmfMQqVJOcWQ" annotatedElement="_NwBMj2EIEdqmfMQqVJOcWQ">
        <body>The input pin has no type.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwBMkWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.object.type->isEmpty()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwBMkmEIEdqmfMQqVJOcWQ" name="multiplicity_of_output" constrainedElement="_NwBMimEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwBMk2EIEdqmfMQqVJOcWQ" annotatedElement="_NwBMkmEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the output pin is 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwBMlGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.result.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwBMlWEIEdqmfMQqVJOcWQ" name="boolean_result" constrainedElement="_NwBMimEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwBMlmEIEdqmfMQqVJOcWQ" annotatedElement="_NwBMlWEIEdqmfMQqVJOcWQ">
        <body>The type of the output pin is Boolean</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwBMl2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.result.type = Boolean</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NwBMmGEIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NwBMmWEIEdqmfMQqVJOcWQ" name="isDirect">
      <ownedComment xmi:id="_NwBMmmEIEdqmfMQqVJOcWQ" annotatedElement="_NwBMmWEIEdqmfMQqVJOcWQ">
        <body>Indicates whether the classifier must directly classify the input object.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NwBMm2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NwBMnGEIEdqmfMQqVJOcWQ" name="classifier" type="_NiTgcGEIEdqmfMQqVJOcWQ" association="_NwdROGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwBMnWEIEdqmfMQqVJOcWQ" annotatedElement="_NwBMnGEIEdqmfMQqVJOcWQ">
        <body>The classifier against which the classification of the input object is tested.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwBMnmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwBMn2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NwBMoGEIEdqmfMQqVJOcWQ" name="result" type="_Nu-DfGEIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0c2EIEdqmfMQqVJOcWQ" association="_NwdROmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NwBMoWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NwBMomEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NwBMo2EIEdqmfMQqVJOcWQ" annotatedElement="_NwBMoGEIEdqmfMQqVJOcWQ">
        <body>After termination of the action, will hold the result of the test.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwBMpGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwBMpWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NwBMpmEIEdqmfMQqVJOcWQ" name="object" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NwdRP2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NwBMp2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NwBMqGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NwBMqWEIEdqmfMQqVJOcWQ" annotatedElement="_NwBMpmEIEdqmfMQqVJOcWQ">
        <body>Holds the object whose classification is to be tested.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwBMqmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwBMq2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NwBMrGEIEdqmfMQqVJOcWQ" name="StartClassifierBehaviorAction">
    <ownedComment xmi:id="_NwBMrWEIEdqmfMQqVJOcWQ" annotatedElement="_NwBMrGEIEdqmfMQqVJOcWQ">
      <body>StartClassifierBehaviorAction is an action that starts the classifier behavior of the input.</body>
    </ownedComment>
    <ownedRule xmi:id="_NwBMrmEIEdqmfMQqVJOcWQ" name="multiplicity" constrainedElement="_NwBMrGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwBMr2EIEdqmfMQqVJOcWQ" annotatedElement="_NwBMrmEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the input pin is 1..1</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwBMsGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwBMsWEIEdqmfMQqVJOcWQ" name="type_has_classifier" constrainedElement="_NwBMrGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwBMsmEIEdqmfMQqVJOcWQ" annotatedElement="_NwBMsWEIEdqmfMQqVJOcWQ">
        <body>If the input pin has a type, then the type must have a classifier behavior.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwBMs2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NwBMtGEIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NwBMtWEIEdqmfMQqVJOcWQ" name="object" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NwdRRGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NwBMtmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NwBMt2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NwBMuGEIEdqmfMQqVJOcWQ" annotatedElement="_NwBMtWEIEdqmfMQqVJOcWQ">
        <body>Holds the object on which to start the owned behavior.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwBMuWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwBMumEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NwKWQGEIEdqmfMQqVJOcWQ" name="QualifierValue">
    <ownedComment xmi:id="_NwKWQWEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWQGEIEdqmfMQqVJOcWQ">
      <body>A link cannot be passed as a runtime value to or from an action. Instead, a link is identified by its end objects and qualifier values, as required. This requires more than one piece of data, namely, the end in the user model, the object on the end, and the qualifier values for that end. These pieces are brought together around LinkEndData. Each association end is identified separately with an instance of the LinkEndData class.</body>
    </ownedComment>
    <ownedRule xmi:id="_NwKWQmEIEdqmfMQqVJOcWQ" name="qualifier_attribute" constrainedElement="_NwKWQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWQ2EIEdqmfMQqVJOcWQ" annotatedElement="_NwKWQmEIEdqmfMQqVJOcWQ">
        <body>The qualifier attribute must be a qualifier of the association end of the link-end data.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwKWRGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.LinkEndData.end->collect(qualifier)->includes(self.qualifier)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwKWRWEIEdqmfMQqVJOcWQ" name="type_of_qualifier" constrainedElement="_NwKWQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWRmEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWRWEIEdqmfMQqVJOcWQ">
        <body>The type of the qualifier value input pin is the same as the type of the qualifier attribute.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwKWR2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.value.type = self.qualifier.type</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwKWSGEIEdqmfMQqVJOcWQ" name="multiplicity_of_qualifier" constrainedElement="_NwKWQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWSWEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWSGEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the qualifier value input pin is &quot;1..1&quot;.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwKWSmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.value.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NwKWS2EIEdqmfMQqVJOcWQ" general="_NidR0mEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NwKWTGEIEdqmfMQqVJOcWQ" name="qualifier" type="_Ni59sGEIEdqmfMQqVJOcWQ" association="_NwdRTWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWTWEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWTGEIEdqmfMQqVJOcWQ">
        <body>Attribute representing the qualifier for which the value is to be specified.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwKWTmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwKWT2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NwKWUGEIEdqmfMQqVJOcWQ" name="value" type="_Nu-Df2EIEdqmfMQqVJOcWQ" association="_NwdRUWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWUWEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWUGEIEdqmfMQqVJOcWQ">
        <body>Input pin from which the specified value for the qualifier is taken.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwKWUmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwKWU2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NtxwvWEIEdqmfMQqVJOcWQ" name="LinkEndData">
    <ownedComment xmi:id="_NtxwvmEIEdqmfMQqVJOcWQ" annotatedElement="_NtxwvWEIEdqmfMQqVJOcWQ">
      <body>LinkEndData is not an action. It is an element that identifies links. It identifies one end of a link to be read or written by the children of LinkAction. A link cannot be passed as a runtime value to or from an action. Instead, a link is identified by its end objects and qualifier values, if any. This requires more than one piece of data, namely, the staticallyspecified end in the user model, the object on the end, and the qualifier values for that end, if any. These pieces are brought together around LinkEndData. Each association end is identified separately with an instance of the LinkEndData class.</body>
    </ownedComment>
    <ownedComment xmi:id="_NwKWVGEIEdqmfMQqVJOcWQ" annotatedElement="_NtxwvWEIEdqmfMQqVJOcWQ">
      <body>LinkEndData is not an action. It is an element that identifies links. It identifies one end of a link to be read or written by the children of LinkAction. A link cannot be passed as a runtime value to or from an action. Instead, a link is identified by its end objects and qualifier values, if any. This requires more than one piece of data, namely, the staticallyspecified end in the user model, the object on the end, and the qualifier values for that end, if any. These pieces are brought together around LinkEndData. Each association end is identified separately with an instance of the LinkEndData class.

</body>
    </ownedComment>
    <ownedRule xmi:id="_Ntxwv2EIEdqmfMQqVJOcWQ" name="property_is_association_end" constrainedElement="_NtxwvWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtxwwGEIEdqmfMQqVJOcWQ" annotatedElement="_Ntxwv2EIEdqmfMQqVJOcWQ">
        <body>The property must be an association end.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtxwwWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.end.association->size() = 1</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NtxwwmEIEdqmfMQqVJOcWQ" name="same_type" constrainedElement="_NtxwvWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ntxww2EIEdqmfMQqVJOcWQ" annotatedElement="_NtxwwmEIEdqmfMQqVJOcWQ">
        <body>The type of the end object input pin is the same as the type of the association end.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtxwxGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.value.type = self.end.type</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NtxwxWEIEdqmfMQqVJOcWQ" name="multiplicity" constrainedElement="_NtxwvWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtxwxmEIEdqmfMQqVJOcWQ" annotatedElement="_NtxwxWEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the end object input pin must be 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ntxwx2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.value.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwKWVWEIEdqmfMQqVJOcWQ" name="qualifiers" constrainedElement="_NtxwvWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWVmEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWVWEIEdqmfMQqVJOcWQ">
        <body>The qualifiers include all and only the qualifiers of the association end.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwKWV2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.qualifier->collect(qualifier) = self.end.qualifier</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwKWWGEIEdqmfMQqVJOcWQ" name="end_object_input_pin" constrainedElement="_NtxwvWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWWWEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWWGEIEdqmfMQqVJOcWQ">
        <body>The end object input pin is not also a qualifier value input pin.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwKWWmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.value->excludesAll(self.qualifier.value)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NtxwyGEIEdqmfMQqVJOcWQ" general="_NidR0mEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NtxwyWEIEdqmfMQqVJOcWQ" name="value" type="_Nu-Df2EIEdqmfMQqVJOcWQ" association="_NuOclGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtxwymEIEdqmfMQqVJOcWQ" annotatedElement="_NtxwyWEIEdqmfMQqVJOcWQ">
        <body>Input pin that provides the specified object for the given end. This pin is omitted if the link-end data specifies an 'open' end for reading.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ntxwy2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtxwzGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NtxwzWEIEdqmfMQqVJOcWQ" name="end" type="_Ni59sGEIEdqmfMQqVJOcWQ" association="_NuOcmGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtxwzmEIEdqmfMQqVJOcWQ" annotatedElement="_NtxwzWEIEdqmfMQqVJOcWQ">
        <body>Association end for which this link-end data specifies values.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ntxwz2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ntxw0GEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NwKWW2EIEdqmfMQqVJOcWQ" name="qualifier" type="_NwKWQGEIEdqmfMQqVJOcWQ" association="_NwdRSWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NwKWXGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NwKWXWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NwKWXmEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWW2EIEdqmfMQqVJOcWQ">
        <body>List of qualifier values</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwKWX2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwKWYGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NwKWYWEIEdqmfMQqVJOcWQ" name="ReadLinkObjectEndAction">
    <ownedComment xmi:id="_NwKWYmEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWYWEIEdqmfMQqVJOcWQ">
      <body>This action reads the object on an end of a link object. The association end to retrieve the object from is specified statically, and the link object to read is provided on the input pin at run time.</body>
    </ownedComment>
    <ownedRule xmi:id="_NwKWY2EIEdqmfMQqVJOcWQ" name="property" constrainedElement="_NwKWYWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWZGEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWY2EIEdqmfMQqVJOcWQ">
        <body>The property must be an association end.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwKWZWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.end.association.notEmpty()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwKWZmEIEdqmfMQqVJOcWQ" name="association_of_association" constrainedElement="_NwKWYWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWZ2EIEdqmfMQqVJOcWQ" annotatedElement="_NwKWZmEIEdqmfMQqVJOcWQ">
        <body>The association of the association end must be an association class.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwKWaGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.end.Association.oclIsKindOf(AssociationClass)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwKWaWEIEdqmfMQqVJOcWQ" name="ends_of_association" constrainedElement="_NwKWYWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWamEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWaWEIEdqmfMQqVJOcWQ">
        <body>The ends of the association must not be static.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwKWa2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.end.association.memberEnd->forall(e | not e.isStatic)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwKWbGEIEdqmfMQqVJOcWQ" name="type_of_object" constrainedElement="_NwKWYWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWbWEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWbGEIEdqmfMQqVJOcWQ">
        <body>The type of the object input pin is the association class that owns the association end.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwKWbmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.object.type = self.end.association</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwKWb2EIEdqmfMQqVJOcWQ" name="multiplicity_of_object" constrainedElement="_NwKWYWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWcGEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWb2EIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the object input pin is 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwKWcWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.object.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwKWcmEIEdqmfMQqVJOcWQ" name="type_of_result" constrainedElement="_NwKWYWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWc2EIEdqmfMQqVJOcWQ" annotatedElement="_NwKWcmEIEdqmfMQqVJOcWQ">
        <body>The type of the result output pin is the same as the type of the association end.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwKWdGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.result.type = self.end.type</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwKWdWEIEdqmfMQqVJOcWQ" name="multiplicity_of_result" constrainedElement="_NwKWYWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWdmEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWdWEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the result output pin is 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwKWd2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.result.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NwKWeGEIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NwKWeWEIEdqmfMQqVJOcWQ" name="object" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NwdRVWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NwKWemEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NwKWe2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NwKWfGEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWeWEIEdqmfMQqVJOcWQ">
        <body>Gives the input pin from which the link object is obtained.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwKWfWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwKWfmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NwKWf2EIEdqmfMQqVJOcWQ" name="end" type="_Ni59sGEIEdqmfMQqVJOcWQ" association="_NwnCMGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWgGEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWf2EIEdqmfMQqVJOcWQ">
        <body>Link end to be read.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwKWgWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwKWgmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NwKWg2EIEdqmfMQqVJOcWQ" name="result" type="_Nu-DfGEIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0c2EIEdqmfMQqVJOcWQ" association="_NwnCNGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NwKWhGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NwKWhWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NwKWhmEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWg2EIEdqmfMQqVJOcWQ">
        <body>Pin where the result value is placed</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwKWh2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwKWiGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NwKWiWEIEdqmfMQqVJOcWQ" name="ReadLinkObjectEndQualifierAction">
    <ownedComment xmi:id="_NwKWimEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWiWEIEdqmfMQqVJOcWQ">
      <body>This action reads a qualifier value or values on an end of a link object. The association end to retrieve the qualifier from is specified statically, and the link object to read is provided on the input pin at run time.</body>
    </ownedComment>
    <ownedRule xmi:id="_NwKWi2EIEdqmfMQqVJOcWQ" name="qualifier_attribute" constrainedElement="_NwKWiWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWjGEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWi2EIEdqmfMQqVJOcWQ">
        <body>The qualifier attribute must be a qualifier attribute of an association end.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwKWjWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.qualifier.associationEnd->size() = 1</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwKWjmEIEdqmfMQqVJOcWQ" name="association_of_association" constrainedElement="_NwKWiWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWj2EIEdqmfMQqVJOcWQ" annotatedElement="_NwKWjmEIEdqmfMQqVJOcWQ">
        <body>The association of the association end of the qualifier attribute must be an association class.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwKWkGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.qualifier.associationEnd.association.oclIsKindOf(AssociationClass)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwKWkWEIEdqmfMQqVJOcWQ" name="ends_of_association" constrainedElement="_NwKWiWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWkmEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWkWEIEdqmfMQqVJOcWQ">
        <body>The ends of the association must not be static.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwKWk2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.qualifier.associationEnd.association.memberEnd->forall(e | not e.isStatic)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwKWlGEIEdqmfMQqVJOcWQ" name="type_of_object" constrainedElement="_NwKWiWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWlWEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWlGEIEdqmfMQqVJOcWQ">
        <body>The type of the object input pin is the association class that owns the association end that has the given qualifier attribute.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwKWlmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.object.type = self.qualifier.associationEnd.association</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwKWl2EIEdqmfMQqVJOcWQ" name="multiplicity_of_qualifier" constrainedElement="_NwKWiWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWmGEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWl2EIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the qualifier attribute is 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwKWmWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.qualifier.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwKWmmEIEdqmfMQqVJOcWQ" name="multiplicity_of_object" constrainedElement="_NwKWiWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWm2EIEdqmfMQqVJOcWQ" annotatedElement="_NwKWmmEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the object input pin is 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwKWnGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.object.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwKWnWEIEdqmfMQqVJOcWQ" name="same_type" constrainedElement="_NwKWiWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWnmEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWnWEIEdqmfMQqVJOcWQ">
        <body>The type of the result output pin is the same as the type of the qualifier attribute.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwKWn2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.result.type = self.qualifier.type</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwKWoGEIEdqmfMQqVJOcWQ" name="multiplicity_of_result" constrainedElement="_NwKWiWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWoWEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWoGEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the result output pin is 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwKWomEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.result.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NwKWo2EIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NwKWpGEIEdqmfMQqVJOcWQ" name="object" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NwnCOWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NwKWpWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NwKWpmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NwKWp2EIEdqmfMQqVJOcWQ" annotatedElement="_NwKWpGEIEdqmfMQqVJOcWQ">
        <body>(Specialized from Action:input) Gives the input pin from which the link object is obtained.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwKWqGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwKWqWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NwKWqmEIEdqmfMQqVJOcWQ" name="result" type="_Nu-DfGEIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0c2EIEdqmfMQqVJOcWQ" association="_NwnCPmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NwKWq2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NwKWrGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NwKWrWEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWqmEIEdqmfMQqVJOcWQ">
        <body>Pin where the result value is placed</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwKWrmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwKWr2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NwKWsGEIEdqmfMQqVJOcWQ" name="qualifier" type="_Ni59sGEIEdqmfMQqVJOcWQ" association="_NwnCQ2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwKWsWEIEdqmfMQqVJOcWQ" annotatedElement="_NwKWsGEIEdqmfMQqVJOcWQ">
        <body>The attribute representing the qualifier to be read.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwKWsmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwKWs2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NwUHQGEIEdqmfMQqVJOcWQ" name="CreateLinkObjectAction">
    <ownedComment xmi:id="_NwUHQWEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHQGEIEdqmfMQqVJOcWQ">
      <body>This action is exclusively for creating links of association classes. It returns the created link object.</body>
    </ownedComment>
    <ownedRule xmi:id="_NwUHQmEIEdqmfMQqVJOcWQ" name="association_class" constrainedElement="_NwUHQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHQ2EIEdqmfMQqVJOcWQ" annotatedElement="_NwUHQmEIEdqmfMQqVJOcWQ">
        <body>The association must be an association class.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwUHRGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.association().oclIsKindOf(Class)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwUHRWEIEdqmfMQqVJOcWQ" name="type_of_result" constrainedElement="_NwUHQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHRmEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHRWEIEdqmfMQqVJOcWQ">
        <body>The type of the result pin must be the same as the association of the action.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwUHR2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.result.type = self.association()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwUHSGEIEdqmfMQqVJOcWQ" name="multiplicity" constrainedElement="_NwUHQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHSWEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHSGEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the output pin is 1..1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwUHSmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.result.multiplicity.is(1,1)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NwUHS2EIEdqmfMQqVJOcWQ" general="_Ntxw-WEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NwUHTGEIEdqmfMQqVJOcWQ" name="result" type="_Nu-DfGEIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0c2EIEdqmfMQqVJOcWQ" association="_NwnCR2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NwUHTWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NwUHTmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NwUHT2EIEdqmfMQqVJOcWQ" annotatedElement="_NwUHTGEIEdqmfMQqVJOcWQ">
        <body>Gives the output pin on which the result is put.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwUHUGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwUHUWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NwUHUmEIEdqmfMQqVJOcWQ" name="AcceptEventAction">
    <ownedComment xmi:id="_NwUHU2EIEdqmfMQqVJOcWQ" annotatedElement="_NwUHUmEIEdqmfMQqVJOcWQ">
      <body>AcceptEventAction is an action that waits for the occurrence of an event meeting specified conditions.</body>
    </ownedComment>
    <ownedRule xmi:id="_NwUHVGEIEdqmfMQqVJOcWQ" name="no_input_pins" constrainedElement="_NwUHUmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHVWEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHVGEIEdqmfMQqVJOcWQ">
        <body>AcceptEventActions may have no input pins.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwUHVmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwUHV2EIEdqmfMQqVJOcWQ" name="no_output_pins" constrainedElement="_NwUHUmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHWGEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHV2EIEdqmfMQqVJOcWQ">
        <body>There are no output pins if the trigger events are only ChangeEvents, or if they are only CallEvents when this action is an instance of AcceptEventAction and not an instance of a descendant of AcceptEventAction (such as AcceptCallAction).</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwUHWWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwUHWmEIEdqmfMQqVJOcWQ" name="trigger_events" constrainedElement="_NwUHUmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHW2EIEdqmfMQqVJOcWQ" annotatedElement="_NwUHWmEIEdqmfMQqVJOcWQ">
        <body>If the trigger events are all TimeEvents, there is exactly one output pin.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwUHXGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwUHXWEIEdqmfMQqVJOcWQ" name="unmarshall_signal_events" constrainedElement="_NwUHUmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHXmEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHXWEIEdqmfMQqVJOcWQ">
        <body>If isUnmarshall is true, there must be exactly one trigger for events of type SignalEvent. The number of result output pins must be the same as the number of attributes of the signal. The type and ordering of each result output pin must be the same as the corresponding attribute of the signal. The multiplicity of each result output pin must be compatible with the multiplicity of the corresponding attribute.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwUHX2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NwUHYGEIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NwUHYWEIEdqmfMQqVJOcWQ" name="isUnmarshall">
      <ownedComment xmi:id="_NwUHYmEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHYWEIEdqmfMQqVJOcWQ">
        <body>Indicates whether there is a single output pin for the event, or multiple output pins for attributes of the event.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NwUHY2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NwUHZGEIEdqmfMQqVJOcWQ" name="result" type="_Nu-DfGEIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0c2EIEdqmfMQqVJOcWQ" association="_NwwzM2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHZWEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHZGEIEdqmfMQqVJOcWQ">
        <body>Pins holding the received event objects or their attributes. Event objects may be copied in transmission, so identity might not be preserved.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwUHZmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwUHZ2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NwUHaGEIEdqmfMQqVJOcWQ" name="trigger" type="_NsvO22EIEdqmfMQqVJOcWQ" association="_NwwzU2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NwUHaWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NwUHamEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NwUHa2EIEdqmfMQqVJOcWQ" annotatedElement="_NwUHaGEIEdqmfMQqVJOcWQ">
        <body>The type of events accepted by the action, as specified by triggers. For triggers with signal events, a signal of the specified type or any subtype of the specified signal type is accepted.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwUHbGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwUHbWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NwUHbmEIEdqmfMQqVJOcWQ" name="AcceptCallAction">
    <ownedComment xmi:id="_NwUHb2EIEdqmfMQqVJOcWQ" annotatedElement="_NwUHbmEIEdqmfMQqVJOcWQ">
      <body>AcceptCallAction is an accept event action representing the receipt of a synchronous call request. In addition to the normal operation parameters, the action produces an output that is needed later to supply the information to the ReplyAction necessary to return control to the caller. This action is for synchronous calls. If it is used to handle an asynchronous call, execution of the subsequent reply action will complete immediately with no effects.</body>
    </ownedComment>
    <ownedRule xmi:id="_NwUHcGEIEdqmfMQqVJOcWQ" name="result_pins" constrainedElement="_NwUHbmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHcWEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHcGEIEdqmfMQqVJOcWQ">
        <body>The result pins must match the in and inout parameters of the operation specified by the trigger event in number, type, and order.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwUHcmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwUHc2EIEdqmfMQqVJOcWQ" name="trigger_call_event" constrainedElement="_NwUHbmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHdGEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHc2EIEdqmfMQqVJOcWQ">
        <body>The trigger event must be a CallEvent.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwUHdWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>trigger.event.oclIsKindOf(CallEvent)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwUHdmEIEdqmfMQqVJOcWQ" name="unmarshall" constrainedElement="_NwUHbmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHd2EIEdqmfMQqVJOcWQ" annotatedElement="_NwUHdmEIEdqmfMQqVJOcWQ">
        <body>isUnmrashall must be true for an AcceptCallAction.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwUHeGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>isUnmarshall = true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NwUHeWEIEdqmfMQqVJOcWQ" general="_NwUHUmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NwUHemEIEdqmfMQqVJOcWQ" name="returnInformation" type="_Nu-DfGEIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0c2EIEdqmfMQqVJOcWQ" association="_NwwzNmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHe2EIEdqmfMQqVJOcWQ" annotatedElement="_NwUHemEIEdqmfMQqVJOcWQ">
        <body>Pin where a value is placed containing sufficient information to perform a subsequent reply and return control to the caller. The contents of this value are opaque. It can be passed and copied but it cannot be manipulated by the model.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwUHfGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwUHfWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NwUHfmEIEdqmfMQqVJOcWQ" name="ReplyAction">
    <ownedComment xmi:id="_NwUHf2EIEdqmfMQqVJOcWQ" annotatedElement="_NwUHfmEIEdqmfMQqVJOcWQ">
      <body>ReplyAction is an action that accepts a set of return values and a value containing return information produced by a previous accept call action. The reply action returns the values to the caller of the previous call, completing execution of the call.</body>
    </ownedComment>
    <ownedRule xmi:id="_NwUHgGEIEdqmfMQqVJOcWQ" name="pins_match_parameter" constrainedElement="_NwUHfmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHgWEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHgGEIEdqmfMQqVJOcWQ">
        <body>The reply value pins must match the return, out, and inout parameters of the operation on the event on the trigger in number, type, and order.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwUHgmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwUHg2EIEdqmfMQqVJOcWQ" name="event_on_reply_to_call_trigger" constrainedElement="_NwUHfmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHhGEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHg2EIEdqmfMQqVJOcWQ">
        <body>The event on replyToCall trigger must be a CallEvent replyToCallEvent.oclIsKindOf(CallEvent)</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwUHhWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>replyToCallEvent.oclIsKindOf(CallEvent)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NwUHhmEIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NwUHh2EIEdqmfMQqVJOcWQ" name="replyToCall" type="_NsvO22EIEdqmfMQqVJOcWQ" association="_NwwzOWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHiGEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHh2EIEdqmfMQqVJOcWQ">
        <body>The trigger specifying the operation whose call is being replied to.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwUHiWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwUHimEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NwUHi2EIEdqmfMQqVJOcWQ" name="returnInformation" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NwwzSWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NwUHjGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NwUHjWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NwUHjmEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHi2EIEdqmfMQqVJOcWQ">
        <body>A pin containing the return information value produced by an earlier AcceptCallAction.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwUHj2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwUHkGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NwUHkWEIEdqmfMQqVJOcWQ" name="replyValue" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NwwzTmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NwUHkmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NwUHk2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NwUHlGEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHkWEIEdqmfMQqVJOcWQ">
        <body>A list of pins containing the reply values of the operation. These values are returned to the caller.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwUHlWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwUHlmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NwUHl2EIEdqmfMQqVJOcWQ" name="UnmarshallAction">
    <ownedComment xmi:id="_NwUHmGEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHl2EIEdqmfMQqVJOcWQ">
      <body>The outputs of this action correspond to the structural features of the specified type. The input must be of this type.</body>
    </ownedComment>
    <ownedRule xmi:id="_NwUHmWEIEdqmfMQqVJOcWQ" name="same_type" constrainedElement="_NwUHl2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHmmEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHmWEIEdqmfMQqVJOcWQ">
        <body>The type of the object input pin must be the same as the unmarshall classifier.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwUHm2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwUHnGEIEdqmfMQqVJOcWQ" name="multiplicity_of_object" constrainedElement="_NwUHl2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHnWEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHnGEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of the object input pin is 1..1</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwUHnmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwUHn2EIEdqmfMQqVJOcWQ" name="number_of_result" constrainedElement="_NwUHl2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHoGEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHn2EIEdqmfMQqVJOcWQ">
        <body>The number of result output pins must be the same as the number of structural features of the unmarshall classifier.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwUHoWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwUHomEIEdqmfMQqVJOcWQ" name="type_and_ordering" constrainedElement="_NwUHl2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHo2EIEdqmfMQqVJOcWQ" annotatedElement="_NwUHomEIEdqmfMQqVJOcWQ">
        <body>The type and ordering of each result output pin must be the same as the corresponding structural feature of the unmarshall classifier.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwUHpGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwUHpWEIEdqmfMQqVJOcWQ" name="multiplicity_of_result" constrainedElement="_NwUHl2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHpmEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHpWEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of each result output pin must be compatible with the multiplicity of the corresponding structural features of the unmarshall classifier.

</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwUHp2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwUHqGEIEdqmfMQqVJOcWQ" name="structural_feature" constrainedElement="_NwUHl2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHqWEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHqGEIEdqmfMQqVJOcWQ">
        <body>The unmarshall classifier must have at least one structural feature.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwUHqmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NwUHq2EIEdqmfMQqVJOcWQ" name="unmarshallType_is_classifier" constrainedElement="_NwUHl2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHrGEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHq2EIEdqmfMQqVJOcWQ">
        <body>unmarshallType must be a Classifier with ordered attributes</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NwUHrWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NwUHrmEIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NwUHr2EIEdqmfMQqVJOcWQ" name="result" type="_Nu-DfGEIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0c2EIEdqmfMQqVJOcWQ" association="_NwwzO2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHsGEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHr2EIEdqmfMQqVJOcWQ">
        <body>The values of the structural features of the input object.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwUHsWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwUHsmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NwUHs2EIEdqmfMQqVJOcWQ" name="unmarshallType" type="_NiTgcGEIEdqmfMQqVJOcWQ" association="_NwwzQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NwUHtGEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHs2EIEdqmfMQqVJOcWQ">
        <body>The type of the object to be unmarshalled.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwUHtWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwUHtmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NwUHt2EIEdqmfMQqVJOcWQ" name="object" type="_Nu-Df2EIEdqmfMQqVJOcWQ" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_NwwzRGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NwUHuGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NwUHuWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NwUHumEIEdqmfMQqVJOcWQ" annotatedElement="_NwUHt2EIEdqmfMQqVJOcWQ">
        <body>The object to be unmarshalled.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwUHu2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwUHvGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwUHvWEIEdqmfMQqVJOcWQ" name="A_result_readExtentAction" memberEnd="_NwUHv2EIEdqmfMQqVJOcWQ _NwBMY2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NwUHvmEIEdqmfMQqVJOcWQ" general="_NvH0oWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NwUHv2EIEdqmfMQqVJOcWQ" type="_NwBMWmEIEdqmfMQqVJOcWQ" association="_NwUHvWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwUHwGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwUHwWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwUHwmEIEdqmfMQqVJOcWQ" name="A_classifier_readExtentAction" memberEnd="_NwUHw2EIEdqmfMQqVJOcWQ _NwBMaWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NwUHw2EIEdqmfMQqVJOcWQ" type="_NwBMWmEIEdqmfMQqVJOcWQ" association="_NwUHwmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwUHxGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwUHxWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwdRMGEIEdqmfMQqVJOcWQ" name="A_oldClassifier_reclassifyObjectAction" memberEnd="_NwdRMWEIEdqmfMQqVJOcWQ _NwBMfGEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NwdRMWEIEdqmfMQqVJOcWQ" type="_NwBMbWEIEdqmfMQqVJOcWQ" association="_NwdRMGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwdRMmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwdRM2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwdRNGEIEdqmfMQqVJOcWQ" name="A_newClassifier_reclassifyObjectAction" memberEnd="_NwBMgGEIEdqmfMQqVJOcWQ _NwdRNWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NwdRNWEIEdqmfMQqVJOcWQ" type="_NwBMbWEIEdqmfMQqVJOcWQ" association="_NwdRNGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwdRNmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwdRN2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwdROGEIEdqmfMQqVJOcWQ" name="A_classifier_readIsClassifiedObjectAction" memberEnd="_NwdROWEIEdqmfMQqVJOcWQ _NwBMnGEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NwdROWEIEdqmfMQqVJOcWQ" type="_NwBMimEIEdqmfMQqVJOcWQ" association="_NwdROGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwdROmEIEdqmfMQqVJOcWQ" name="A_result_readIsClassifiedObjectAction" memberEnd="_NwdRPGEIEdqmfMQqVJOcWQ _NwBMoGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NwdRO2EIEdqmfMQqVJOcWQ" general="_NvH0oWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NwdRPGEIEdqmfMQqVJOcWQ" type="_NwBMimEIEdqmfMQqVJOcWQ" association="_NwdROmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwdRPWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwdRPmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwdRP2EIEdqmfMQqVJOcWQ" name="A_object_readIsClassifiedObjectAction" memberEnd="_NwdRQWEIEdqmfMQqVJOcWQ _NwBMpmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NwdRQGEIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NwdRQWEIEdqmfMQqVJOcWQ" type="_NwBMimEIEdqmfMQqVJOcWQ" association="_NwdRP2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwdRQmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwdRQ2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwdRRGEIEdqmfMQqVJOcWQ" name="A_object_startClassifierBehaviorAction" memberEnd="_NwBMtWEIEdqmfMQqVJOcWQ _NwdRRmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NwdRRWEIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NwdRRmEIEdqmfMQqVJOcWQ" type="_NwBMrGEIEdqmfMQqVJOcWQ" association="_NwdRRGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwdRR2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwdRSGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwdRSWEIEdqmfMQqVJOcWQ" name="A_qualifier_linkEndData" memberEnd="_NwKWW2EIEdqmfMQqVJOcWQ _NwdRSmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NwdRSmEIEdqmfMQqVJOcWQ" type="_NtxwvWEIEdqmfMQqVJOcWQ" association="_NwdRSWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwdRS2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwdRTGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwdRTWEIEdqmfMQqVJOcWQ" name="A_qualifier_qualifierValue" memberEnd="_NwKWTGEIEdqmfMQqVJOcWQ _NwdRTmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NwdRTmEIEdqmfMQqVJOcWQ" type="_NwKWQGEIEdqmfMQqVJOcWQ" association="_NwdRTWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwdRT2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwdRUGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwdRUWEIEdqmfMQqVJOcWQ" name="A_value_qualifierValue" memberEnd="_NwdRUmEIEdqmfMQqVJOcWQ _NwKWUGEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NwdRUmEIEdqmfMQqVJOcWQ" type="_NwKWQGEIEdqmfMQqVJOcWQ" association="_NwdRUWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwdRU2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwdRVGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwdRVWEIEdqmfMQqVJOcWQ" name="A_object_readLinkObjectEndAction" memberEnd="_NwKWeWEIEdqmfMQqVJOcWQ _NwdRV2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NwdRVmEIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NwdRV2EIEdqmfMQqVJOcWQ" type="_NwKWYWEIEdqmfMQqVJOcWQ" association="_NwdRVWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwdRWGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwdRWWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwnCMGEIEdqmfMQqVJOcWQ" name="A_end_readLinkObjectEndAction" memberEnd="_NwKWf2EIEdqmfMQqVJOcWQ _NwnCMWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NwnCMWEIEdqmfMQqVJOcWQ" type="_NwKWYWEIEdqmfMQqVJOcWQ" association="_NwnCMGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwnCMmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwnCM2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwnCNGEIEdqmfMQqVJOcWQ" name="A_result_readLinkObjectEndAction" memberEnd="_NwnCNmEIEdqmfMQqVJOcWQ _NwKWg2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NwnCNWEIEdqmfMQqVJOcWQ" general="_NvH0oWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NwnCNmEIEdqmfMQqVJOcWQ" type="_NwKWYWEIEdqmfMQqVJOcWQ" association="_NwnCNGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwnCN2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwnCOGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwnCOWEIEdqmfMQqVJOcWQ" name="A_object_readLinkObjectEndQualifierAction" memberEnd="_NwKWpGEIEdqmfMQqVJOcWQ _NwnCO2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NwnCOmEIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NwnCO2EIEdqmfMQqVJOcWQ" type="_NwKWiWEIEdqmfMQqVJOcWQ" association="_NwnCOWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwnCPGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwnCPWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwnCPmEIEdqmfMQqVJOcWQ" name="A_result_readLinkObjectEndQualifierAction" memberEnd="_NwnCQGEIEdqmfMQqVJOcWQ _NwKWqmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NwnCP2EIEdqmfMQqVJOcWQ" general="_NvH0oWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NwnCQGEIEdqmfMQqVJOcWQ" type="_NwKWiWEIEdqmfMQqVJOcWQ" association="_NwnCPmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwnCQWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwnCQmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwnCQ2EIEdqmfMQqVJOcWQ" name="A_qualifier_readLinkObjectEndQualifierAction" memberEnd="_NwKWsGEIEdqmfMQqVJOcWQ _NwnCRGEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NwnCRGEIEdqmfMQqVJOcWQ" type="_NwKWiWEIEdqmfMQqVJOcWQ" association="_NwnCQ2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwnCRWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwnCRmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwnCR2EIEdqmfMQqVJOcWQ" name="A_result_createLinkObjectAction" memberEnd="_NwUHTGEIEdqmfMQqVJOcWQ _NwnCSWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NwnCSGEIEdqmfMQqVJOcWQ" general="_NvH0oWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NwnCSWEIEdqmfMQqVJOcWQ" type="_NwUHQGEIEdqmfMQqVJOcWQ" association="_NwnCR2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwnCSmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwnCS2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwwzMGEIEdqmfMQqVJOcWQ" name="A_reclassifyObjectAction_object" memberEnd="_NwBMhGEIEdqmfMQqVJOcWQ _NwwzMmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NwwzMWEIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NwwzMmEIEdqmfMQqVJOcWQ" type="_NwBMbWEIEdqmfMQqVJOcWQ" redefinedProperty="_NvH0qGEIEdqmfMQqVJOcWQ" association="_NwwzMGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwwzM2EIEdqmfMQqVJOcWQ" name="A_result_acceptEventAction" memberEnd="_NwwzNWEIEdqmfMQqVJOcWQ _NwUHZGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NwwzNGEIEdqmfMQqVJOcWQ" general="_NvH0oWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NwwzNWEIEdqmfMQqVJOcWQ" type="_NwUHUmEIEdqmfMQqVJOcWQ" redefinedProperty="_NvH0o2EIEdqmfMQqVJOcWQ" association="_NwwzM2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwwzNmEIEdqmfMQqVJOcWQ" name="A_returnInformation_acceptCallAction" memberEnd="_NwUHemEIEdqmfMQqVJOcWQ _NwwzOGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NwwzN2EIEdqmfMQqVJOcWQ" general="_NvH0oWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NwwzOGEIEdqmfMQqVJOcWQ" type="_NwUHbmEIEdqmfMQqVJOcWQ" redefinedProperty="_NvH0o2EIEdqmfMQqVJOcWQ" association="_NwwzNmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwwzOWEIEdqmfMQqVJOcWQ" name="A_replyToCall_replyAction" memberEnd="_NwUHh2EIEdqmfMQqVJOcWQ _NwwzOmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NwwzOmEIEdqmfMQqVJOcWQ" type="_NwUHfmEIEdqmfMQqVJOcWQ" association="_NwwzOWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwwzO2EIEdqmfMQqVJOcWQ" name="A_result_unmarshallAction" memberEnd="_NwUHr2EIEdqmfMQqVJOcWQ _NwwzPWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NwwzPGEIEdqmfMQqVJOcWQ" general="_NvH0oWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NwwzPWEIEdqmfMQqVJOcWQ" type="_NwUHl2EIEdqmfMQqVJOcWQ" association="_NwwzO2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwwzPmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwwzP2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwwzQGEIEdqmfMQqVJOcWQ" name="A_unmarshallType_unmarshallAction" memberEnd="_NwUHs2EIEdqmfMQqVJOcWQ _NwwzQWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NwwzQWEIEdqmfMQqVJOcWQ" type="_NwUHl2EIEdqmfMQqVJOcWQ" association="_NwwzQGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwwzQmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwwzQ2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwwzRGEIEdqmfMQqVJOcWQ" name="A_object_unmarshallAction" memberEnd="_NwUHt2EIEdqmfMQqVJOcWQ _NwwzRmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NwwzRWEIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NwwzRmEIEdqmfMQqVJOcWQ" type="_NwUHl2EIEdqmfMQqVJOcWQ" association="_NwwzRGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwwzR2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwwzSGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwwzSWEIEdqmfMQqVJOcWQ" name="A_returnInformation_replyAction" memberEnd="_NwUHi2EIEdqmfMQqVJOcWQ _NwwzS2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NwwzSmEIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NwwzS2EIEdqmfMQqVJOcWQ" type="_NwUHfmEIEdqmfMQqVJOcWQ" association="_NwwzSWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwwzTGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwwzTWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwwzTmEIEdqmfMQqVJOcWQ" name="A_replyValue_replyAction" memberEnd="_NwUHkWEIEdqmfMQqVJOcWQ _NwwzUGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NwwzT2EIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NwwzUGEIEdqmfMQqVJOcWQ" type="_NwUHfmEIEdqmfMQqVJOcWQ" association="_NwwzTmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwwzUWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwwzUmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NwwzU2EIEdqmfMQqVJOcWQ" name="A_trigger_acceptEventAction" memberEnd="_NwwzVGEIEdqmfMQqVJOcWQ _NwUHaGEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NwwzVGEIEdqmfMQqVJOcWQ" type="_NwUHUmEIEdqmfMQqVJOcWQ" association="_NwwzU2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NwwzVWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NwwzVmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nw59YWEIEdqmfMQqVJOcWQ" name="A_subgroup_superGroup" memberEnd="_Nw59RWEIEdqmfMQqVJOcWQ _Nw59P2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nw59YmEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NxDuKmEIEdqmfMQqVJOcWQ" name="ControlNode" isAbstract="true">
    <ownedComment xmi:id="_NxDuK2EIEdqmfMQqVJOcWQ" annotatedElement="_NxDuKmEIEdqmfMQqVJOcWQ">
      <body>A control node is an activity node used to coordinate the flows between other nodes. It covers initial node, final node and its children, fork node, join node, decision node, and merge node.</body>
    </ownedComment>
    <generalization xmi:id="_NxDuLGEIEdqmfMQqVJOcWQ" general="_Nw59TWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NxDuTmEIEdqmfMQqVJOcWQ" name="ControlFlow">
    <ownedComment xmi:id="_NxDuT2EIEdqmfMQqVJOcWQ" annotatedElement="_NxDuTmEIEdqmfMQqVJOcWQ">
      <body>Objects and data cannot pass along a control flow edge.</body>
    </ownedComment>
    <ownedRule xmi:id="_NxDuUGEIEdqmfMQqVJOcWQ" name="object_nodes" constrainedElement="_NxDuTmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxDuUWEIEdqmfMQqVJOcWQ" annotatedElement="_NxDuUGEIEdqmfMQqVJOcWQ">
        <body>Control flows may not have object nodes at either end, except for object nodes with control type.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxDuUmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NxDuU2EIEdqmfMQqVJOcWQ" general="_NxDuLWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NxDuYGEIEdqmfMQqVJOcWQ" name="InitialNode">
    <ownedComment xmi:id="_NxDuYWEIEdqmfMQqVJOcWQ" annotatedElement="_NxDuYGEIEdqmfMQqVJOcWQ">
      <body>An activity may have more than one initial node.</body>
    </ownedComment>
    <ownedRule xmi:id="_NxDuYmEIEdqmfMQqVJOcWQ" name="no_incoming_edges" constrainedElement="_NxDuYGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxDuY2EIEdqmfMQqVJOcWQ" annotatedElement="_NxDuYmEIEdqmfMQqVJOcWQ">
        <body>An initial node has no incoming edges.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxDuZGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NxDuZWEIEdqmfMQqVJOcWQ" name="control_edges" constrainedElement="_NxDuYGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxDuZmEIEdqmfMQqVJOcWQ" annotatedElement="_NxDuZWEIEdqmfMQqVJOcWQ">
        <body>Only control edges can have initial nodes as source.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxDuZ2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NxDuaGEIEdqmfMQqVJOcWQ" general="_NxDuKmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NxNfIGEIEdqmfMQqVJOcWQ" name="ActivityParameterNode">
    <ownedComment xmi:id="_NxNfIWEIEdqmfMQqVJOcWQ" annotatedElement="_NxNfIGEIEdqmfMQqVJOcWQ">
      <body>Activity parameter nodes are object nodes at the beginning and end of flows that provide a means to accept inputs to an activity and provide outputs from the activity, through the activity parameters.</body>
    </ownedComment>
    <ownedRule xmi:id="_NxNfImEIEdqmfMQqVJOcWQ" name="has_parameters" constrainedElement="_NxNfIGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxNfI2EIEdqmfMQqVJOcWQ" annotatedElement="_NxNfImEIEdqmfMQqVJOcWQ">
        <body>Activity parameter nodes must have parameters from the containing activity.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxNfJGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NxNfJWEIEdqmfMQqVJOcWQ" name="same_type" constrainedElement="_NxNfIGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxNfJmEIEdqmfMQqVJOcWQ" annotatedElement="_NxNfJWEIEdqmfMQqVJOcWQ">
        <body>The type of an activity parameter node is the same as the type of its parameter.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxNfJ2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NxNfKGEIEdqmfMQqVJOcWQ" name="no_edges" constrainedElement="_NxNfIGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxNfKWEIEdqmfMQqVJOcWQ" annotatedElement="_NxNfKGEIEdqmfMQqVJOcWQ">
        <body>An activity parameter node may have all incoming edges or all outgoing edges, but it must not have both incoming and outgoing edges.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxNfKmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NxNfK2EIEdqmfMQqVJOcWQ" name="no_incoming_edges" constrainedElement="_NxNfIGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxNfLGEIEdqmfMQqVJOcWQ" annotatedElement="_NxNfK2EIEdqmfMQqVJOcWQ">
        <body>Activity parameter object nodes with no incoming edges and one or more outgoing edges must have a parameter with in or inout direction.

</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxNfLWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NxNfLmEIEdqmfMQqVJOcWQ" name="no_outgoing_edges" constrainedElement="_NxNfIGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxNfL2EIEdqmfMQqVJOcWQ" annotatedElement="_NxNfLmEIEdqmfMQqVJOcWQ">
        <body>Activity parameter object nodes with no outgoing edges and one or more incoming edges must have a parameter with out, inout, or return direction.

</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxNfMGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NxNfMWEIEdqmfMQqVJOcWQ" general="_NxDuIGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NxNfMmEIEdqmfMQqVJOcWQ" name="parameter" type="_NjM40GEIEdqmfMQqVJOcWQ" association="_NxWpGGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxNfM2EIEdqmfMQqVJOcWQ" annotatedElement="_NxNfMmEIEdqmfMQqVJOcWQ">
        <body>The parameter the object node will be accepting or providing values for.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NxNfNGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NxNfNWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NxWpE2EIEdqmfMQqVJOcWQ" name="A_activity_edge" memberEnd="_NxDuNmEIEdqmfMQqVJOcWQ _NxNfUmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NxWpFGEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NxWpFWEIEdqmfMQqVJOcWQ" name="A_outgoing_source" memberEnd="_NxNfO2EIEdqmfMQqVJOcWQ _NxDuPGEIEdqmfMQqVJOcWQ"/>
  <ownedMember xmi:type="uml:Association" xmi:id="_NxWpFmEIEdqmfMQqVJOcWQ" name="A_target_incoming" memberEnd="_NxDuQGEIEdqmfMQqVJOcWQ _NxNfP2EIEdqmfMQqVJOcWQ"/>
  <ownedMember xmi:type="uml:Association" xmi:id="_NxWpGGEIEdqmfMQqVJOcWQ" name="A_parameter_activityParameterNode" memberEnd="_NxNfMmEIEdqmfMQqVJOcWQ _NxWpGWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NxWpGWEIEdqmfMQqVJOcWQ" type="_NxNfIGEIEdqmfMQqVJOcWQ" association="_NxWpGGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NxWpGmEIEdqmfMQqVJOcWQ" name="A_redefinedNode_activityNode" memberEnd="_NxWpHGEIEdqmfMQqVJOcWQ _NxNfQ2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NxWpG2EIEdqmfMQqVJOcWQ" general="_NkPaLGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NxWpHGEIEdqmfMQqVJOcWQ" type="_Nw59TWEIEdqmfMQqVJOcWQ" redefinedProperty="_NkPaLWEIEdqmfMQqVJOcWQ" association="_NxWpGmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NxWpHWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NxWpHmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NxgaEGEIEdqmfMQqVJOcWQ" name="A_redefinedEdge_activityEdge" memberEnd="_NxDuSmEIEdqmfMQqVJOcWQ _NxgaEmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NxgaEWEIEdqmfMQqVJOcWQ" general="_NkPaLGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NxgaEmEIEdqmfMQqVJOcWQ" type="_NxDuLWEIEdqmfMQqVJOcWQ" redefinedProperty="_NkPaLWEIEdqmfMQqVJOcWQ" association="_NxgaEGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NxgaE2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NxgaFGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NxgaFWEIEdqmfMQqVJOcWQ" name="ForkNode">
    <ownedComment xmi:id="_NxgaFmEIEdqmfMQqVJOcWQ" annotatedElement="_NxgaFWEIEdqmfMQqVJOcWQ">
      <body>A fork node has one incoming edge and multiple outgoing edges.</body>
    </ownedComment>
    <ownedRule xmi:id="_NxgaF2EIEdqmfMQqVJOcWQ" name="one_incoming_edge" constrainedElement="_NxgaFWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxgaGGEIEdqmfMQqVJOcWQ" annotatedElement="_NxgaF2EIEdqmfMQqVJOcWQ">
        <body>A fork node has one incoming edge.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxgaGWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NxgaGmEIEdqmfMQqVJOcWQ" name="edges" constrainedElement="_NxgaFWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxgaG2EIEdqmfMQqVJOcWQ" annotatedElement="_NxgaGmEIEdqmfMQqVJOcWQ">
        <body>The edges coming into and out of a fork node must be either all object flows or all control flows.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxgaHGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NxgaHWEIEdqmfMQqVJOcWQ" general="_NxDuKmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NxgaHmEIEdqmfMQqVJOcWQ" name="FlowFinalNode">
    <ownedComment xmi:id="_NxgaH2EIEdqmfMQqVJOcWQ" annotatedElement="_NxgaHmEIEdqmfMQqVJOcWQ">
      <body>A flow final destroys all tokens that arrive at it. It has no effect on other flows in the activity.</body>
    </ownedComment>
    <generalization xmi:id="_NxgaIGEIEdqmfMQqVJOcWQ" general="_NxpkGWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NxgaIWEIEdqmfMQqVJOcWQ" name="CentralBufferNode">
    <ownedComment xmi:id="_NxgaImEIEdqmfMQqVJOcWQ" annotatedElement="_NxgaIWEIEdqmfMQqVJOcWQ">
      <body>A central buffer node accepts tokens from upstream objects nodes and passes them along to downstream object nodes. They act as a buffer for multiple in flows and out flows from other object nodes. They do not connect directly to actions.</body>
    </ownedComment>
    <generalization xmi:id="_NxgaI2EIEdqmfMQqVJOcWQ" general="_NxDuIGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NxgaJGEIEdqmfMQqVJOcWQ" name="ActivityPartition">
    <ownedComment xmi:id="_NxgaJWEIEdqmfMQqVJOcWQ" annotatedElement="_NxgaJGEIEdqmfMQqVJOcWQ">
      <body>Partitions divide the nodes and edges to constrain and show a view of the contained nodes. Partitions can share contents. They often correspond to organizational units in a business model. They may be used to allocate characteristics or resources among the nodes of an activity.</body>
    </ownedComment>
    <ownedRule xmi:id="_NxgaJmEIEdqmfMQqVJOcWQ" name="dimension_not_contained" constrainedElement="_NxgaJGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxgaJ2EIEdqmfMQqVJOcWQ" annotatedElement="_NxgaJmEIEdqmfMQqVJOcWQ">
        <body>A partition with isDimension = true may not be contained by another partition.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxgaKGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NxgaKWEIEdqmfMQqVJOcWQ" name="node_or_edge" constrainedElement="_NxgaJGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxgaKmEIEdqmfMQqVJOcWQ" annotatedElement="_NxgaKWEIEdqmfMQqVJOcWQ">
        <body>No node or edge of a partition may be in another partition in the same dimension.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxgaK2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NxgaLGEIEdqmfMQqVJOcWQ" name="represents_part" constrainedElement="_NxgaJGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxgaLWEIEdqmfMQqVJOcWQ" annotatedElement="_NxgaLGEIEdqmfMQqVJOcWQ">
        <body>If a partition represents a part, then all the non-external partitions in the same dimension and at the same level of nesting in that dimension must represent parts directly contained in the internal structure of the same classifier.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxgaLmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NxgaL2EIEdqmfMQqVJOcWQ" name="represents_classifier" constrainedElement="_NxgaJGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxgaMGEIEdqmfMQqVJOcWQ" annotatedElement="_NxgaL2EIEdqmfMQqVJOcWQ">
        <body>If a non-external partition represents a classifier and is contained in another partition, then the containing partition must represent a classifier, and the classifier of the subpartition must be nested in the classifier represented by the containing partition, or be at the contained end of a strong composition association with the classifier represented by the containing partition.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxgaMWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NxgaMmEIEdqmfMQqVJOcWQ" name="represents_part_and_is_contained" constrainedElement="_NxgaJGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxgaM2EIEdqmfMQqVJOcWQ" annotatedElement="_NxgaMmEIEdqmfMQqVJOcWQ">
        <body>If a partition represents a part and is contained by another partition, then the part must be of a classifier represented by the containing partition, or of a classifier that is the type of a part representing the containing partition.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxgaNGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NxgaNWEIEdqmfMQqVJOcWQ" general="_NjfzQGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NxgaNmEIEdqmfMQqVJOcWQ" general="_Nw59MmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NxgaN2EIEdqmfMQqVJOcWQ" name="isDimension">
      <ownedComment xmi:id="_NxgaOGEIEdqmfMQqVJOcWQ" annotatedElement="_NxgaN2EIEdqmfMQqVJOcWQ">
        <body>Tells whether the partition groups other partitions along a dimension.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NxgaOWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NxgaOmEIEdqmfMQqVJOcWQ" name="isExternal">
      <ownedComment xmi:id="_NxgaO2EIEdqmfMQqVJOcWQ" annotatedElement="_NxgaOmEIEdqmfMQqVJOcWQ">
        <body>Tells whether the partition represents an entity to which the partitioning structure does not apply.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NxgaPGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NxgaPWEIEdqmfMQqVJOcWQ" name="edge" type="_NxDuLWEIEdqmfMQqVJOcWQ" subsettedProperty="_NxDudWEIEdqmfMQqVJOcWQ" association="_NxzVBGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxgaPmEIEdqmfMQqVJOcWQ" annotatedElement="_NxgaPWEIEdqmfMQqVJOcWQ">
        <body>Edges immediately contained in the group.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NxgaP2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NxgaQGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NxgaQWEIEdqmfMQqVJOcWQ" name="node" type="_Nw59TWEIEdqmfMQqVJOcWQ" subsettedProperty="_Nw59NWEIEdqmfMQqVJOcWQ" association="_NxzVBmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxgaQmEIEdqmfMQqVJOcWQ" annotatedElement="_NxgaQWEIEdqmfMQqVJOcWQ">
        <body>Nodes immediately contained in the group.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NxgaQ2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NxgaRGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NxgaRWEIEdqmfMQqVJOcWQ" name="subpartition" type="_NxgaJGEIEdqmfMQqVJOcWQ" subsettedProperty="_Nw59P2EIEdqmfMQqVJOcWQ" association="_NxzVCGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NxgaRmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NxgaR2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NxgaSGEIEdqmfMQqVJOcWQ" annotatedElement="_NxgaRWEIEdqmfMQqVJOcWQ">
        <body>Partitions immediately contained in the partition. Specialized from Activity-Group::subgroup.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NxgaSWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NxgaSmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NxgaS2EIEdqmfMQqVJOcWQ" name="superPartition" type="_NxgaJGEIEdqmfMQqVJOcWQ" subsettedProperty="_Nw59RWEIEdqmfMQqVJOcWQ" association="_NxzVCGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NxgaTGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NxgaTWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NxgaTmEIEdqmfMQqVJOcWQ" annotatedElement="_NxgaS2EIEdqmfMQqVJOcWQ">
        <body>Partition immediately containing the partition.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NxgaT2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NxgaUGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NxgaUWEIEdqmfMQqVJOcWQ" name="represents" type="_NidR0mEIEdqmfMQqVJOcWQ" association="_NxzVCmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxgaUmEIEdqmfMQqVJOcWQ" annotatedElement="_NxgaUWEIEdqmfMQqVJOcWQ">
        <body>An element constraining behaviors invoked by nodes in the partition.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NxgaU2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NxgaVGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NxpkAGEIEdqmfMQqVJOcWQ" name="MergeNode">
    <ownedComment xmi:id="_NxpkAWEIEdqmfMQqVJOcWQ" annotatedElement="_NxpkAGEIEdqmfMQqVJOcWQ">
      <body>A merge node has multiple incoming edges and a single outgoing edge.</body>
    </ownedComment>
    <ownedRule xmi:id="_NxpkAmEIEdqmfMQqVJOcWQ" name="one_outgoing_edge" constrainedElement="_NxpkAGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxpkA2EIEdqmfMQqVJOcWQ" annotatedElement="_NxpkAmEIEdqmfMQqVJOcWQ">
        <body>A merge node has one outgoing edge.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxpkBGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NxpkBWEIEdqmfMQqVJOcWQ" name="edges" constrainedElement="_NxpkAGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxpkBmEIEdqmfMQqVJOcWQ" annotatedElement="_NxpkBWEIEdqmfMQqVJOcWQ">
        <body>The edges coming into and out of a merge node must be either all object flows or all control flows.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxpkB2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NxpkCGEIEdqmfMQqVJOcWQ" general="_NxDuKmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NxpkCWEIEdqmfMQqVJOcWQ" name="DecisionNode">
    <ownedComment xmi:id="_NxpkCmEIEdqmfMQqVJOcWQ" annotatedElement="_NxpkCWEIEdqmfMQqVJOcWQ">
      <body>A decision node has one incoming edge and multiple outgoing activity edges.</body>
    </ownedComment>
    <ownedRule xmi:id="_NxpkC2EIEdqmfMQqVJOcWQ" name="one_incoming_edge" constrainedElement="_NxpkCWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxpkDGEIEdqmfMQqVJOcWQ" annotatedElement="_NxpkC2EIEdqmfMQqVJOcWQ">
        <body>A decision node has one incoming edge.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxpkDWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NxpkDmEIEdqmfMQqVJOcWQ" name="input_parameter" constrainedElement="_NxpkCWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxpkD2EIEdqmfMQqVJOcWQ" annotatedElement="_NxpkDmEIEdqmfMQqVJOcWQ">
        <body>A decision input behavior has zero or one input parameter and one output parameter. Any input parameter must be the same as or a supertype of the type of object tokens coming along the incoming edge. The behavior cannot have side effects.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxpkEGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NxpkEWEIEdqmfMQqVJOcWQ" name="edges" constrainedElement="_NxpkCWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxpkEmEIEdqmfMQqVJOcWQ" annotatedElement="_NxpkEWEIEdqmfMQqVJOcWQ">
        <body>The edges coming into and out of a decision node must be either all object flows or all control flows.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxpkE2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NxpkFGEIEdqmfMQqVJOcWQ" general="_NxDuKmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NxpkFWEIEdqmfMQqVJOcWQ" name="decisionInput" type="_NqDuQGEIEdqmfMQqVJOcWQ" association="_Nx9GA2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxpkFmEIEdqmfMQqVJOcWQ" annotatedElement="_NxpkFWEIEdqmfMQqVJOcWQ">
        <body>Provides input to guard specifications on edges outgoing from the decision node.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NxpkF2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NxpkGGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NxpkGWEIEdqmfMQqVJOcWQ" name="FinalNode" isAbstract="true">
    <ownedComment xmi:id="_NxpkGmEIEdqmfMQqVJOcWQ" annotatedElement="_NxpkGWEIEdqmfMQqVJOcWQ">
      <body>A final node is an abstract control node at which a flow in an activity stops.</body>
    </ownedComment>
    <ownedRule xmi:id="_NxpkG2EIEdqmfMQqVJOcWQ" name="no_outgoing_edges" constrainedElement="_NxpkGWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxpkHGEIEdqmfMQqVJOcWQ" annotatedElement="_NxpkG2EIEdqmfMQqVJOcWQ">
        <body>A final node has no outgoing edges.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxpkHWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NxpkHmEIEdqmfMQqVJOcWQ" general="_NxDuKmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NxDuaWEIEdqmfMQqVJOcWQ" name="ActivityFinalNode">
    <ownedComment xmi:id="_NxDuamEIEdqmfMQqVJOcWQ" annotatedElement="_NxDuaWEIEdqmfMQqVJOcWQ">
      <body>An activity may have more than one activity final node. The first one reached stops all flows in the activity.</body>
    </ownedComment>
    <generalization xmi:id="_NxpkH2EIEdqmfMQqVJOcWQ" general="_NxpkGWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NxzVBGEIEdqmfMQqVJOcWQ" name="A_edge_inPartition" memberEnd="_NxgaPWEIEdqmfMQqVJOcWQ _NxgaVWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NxzVBWEIEdqmfMQqVJOcWQ" general="_NxWpF2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NxzVBmEIEdqmfMQqVJOcWQ" name="A_inPartition_node" memberEnd="_NxgaQWEIEdqmfMQqVJOcWQ _NxgaYmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NxzVB2EIEdqmfMQqVJOcWQ" general="_Nw59XmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NxzVCGEIEdqmfMQqVJOcWQ" name="A_subpartition_superPartition" memberEnd="_NxgaRWEIEdqmfMQqVJOcWQ _NxgaS2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NxzVCWEIEdqmfMQqVJOcWQ" general="_Nw59YWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NxzVCmEIEdqmfMQqVJOcWQ" name="A_represents_activityPartition" memberEnd="_NxgaUWEIEdqmfMQqVJOcWQ _NxzVC2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NxzVC2EIEdqmfMQqVJOcWQ" type="_NxgaJGEIEdqmfMQqVJOcWQ" association="_NxzVCmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NxzVDGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NxzVDWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nx9GAGEIEdqmfMQqVJOcWQ" name="A_activityEdge_guard" memberEnd="_Nx9GAmEIEdqmfMQqVJOcWQ _NxgaWWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nx9GAWEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nx9GAmEIEdqmfMQqVJOcWQ" type="_NxDuLWEIEdqmfMQqVJOcWQ" association="_Nx9GAGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nx9GA2EIEdqmfMQqVJOcWQ" name="A_decisionInput_decisionNode" memberEnd="_NxpkFWEIEdqmfMQqVJOcWQ _Nx9GBGEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nx9GBGEIEdqmfMQqVJOcWQ" type="_NxpkCWEIEdqmfMQqVJOcWQ" association="_Nx9GA2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nx9GBWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nx9GBmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NyGP9mEIEdqmfMQqVJOcWQ" name="A_partition_activity" memberEnd="_NyGP8GEIEdqmfMQqVJOcWQ _NyGP-GEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NyGP92EIEdqmfMQqVJOcWQ" general="_Nw59X2EIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NyGP-GEIEdqmfMQqVJOcWQ" type="_Nw59IGEIEdqmfMQqVJOcWQ" association="_NyGP9mEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NxpkIGEIEdqmfMQqVJOcWQ" name="JoinNode">
    <ownedComment xmi:id="_NxpkIWEIEdqmfMQqVJOcWQ" annotatedElement="_NxpkIGEIEdqmfMQqVJOcWQ">
      <body>A join node has multiple incoming edges and one outgoing edge.</body>
    </ownedComment>
    <ownedComment xmi:id="_NyGP-WEIEdqmfMQqVJOcWQ" annotatedElement="_NxpkIGEIEdqmfMQqVJOcWQ">
      <body>A join node has multiple incoming edges and one outgoing edge. In CompleteActivities, Join nodes have a Boolean value specification using the names of the incoming edges to specify the conditions under which the join will emit a token.</body>
    </ownedComment>
    <ownedRule xmi:id="_NyGP-mEIEdqmfMQqVJOcWQ" name="one_outgoing_edge" constrainedElement="_NxpkIGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyGP-2EIEdqmfMQqVJOcWQ" annotatedElement="_NyGP-mEIEdqmfMQqVJOcWQ">
        <body>A join node has one outgoing edge.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NyGP_GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.outgoing->size() = 1</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NyGP_WEIEdqmfMQqVJOcWQ" name="incoming_object_flow" constrainedElement="_NxpkIGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyGP_mEIEdqmfMQqVJOcWQ" annotatedElement="_NyGP_WEIEdqmfMQqVJOcWQ">
        <body>If a join node has an incoming object flow, it must have an outgoing object flow, otherwise, it must have an outgoing control flow.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NyGP_2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>(self.incoming.select(e | e.isTypeOf(ObjectFlow)->notEmpty() implies

  self.outgoing.isTypeOf(ObjectFlow)) and

    (self.incoming.select(e | e.isTypeOf(ObjectFlow)->empty() implies

      self.outgoing.isTypeOf(ControlFlow))</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NxpkImEIEdqmfMQqVJOcWQ" general="_NxDuKmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NyGQAGEIEdqmfMQqVJOcWQ" name="isCombineDuplicate">
      <ownedComment xmi:id="_NyGQAWEIEdqmfMQqVJOcWQ" annotatedElement="_NyGQAGEIEdqmfMQqVJOcWQ">
        <body>Tells whether tokens having objects with the same identity are combined into one by the join.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NyGQAmEIEdqmfMQqVJOcWQ" value="true"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NyGQA2EIEdqmfMQqVJOcWQ" name="joinSpec" type="_NiwMlmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_Ny123WEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NyGQBGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NyGQBWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NyGQBmEIEdqmfMQqVJOcWQ" annotatedElement="_NyGQA2EIEdqmfMQqVJOcWQ">
        <body>A specification giving the conditions under which the join with emit a token. Default is &quot;and&quot;.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NyGQB2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NyGQCGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NyGQCWEIEdqmfMQqVJOcWQ" name="DataStoreNode">
    <ownedComment xmi:id="_NyGQCmEIEdqmfMQqVJOcWQ" annotatedElement="_NyGQCWEIEdqmfMQqVJOcWQ">
      <body>A data store keeps all tokens that enter it, copying them when they are chosen to move downstream. Incoming tokens containing a particular object replace any tokens in the object node containing that object.</body>
    </ownedComment>
    <generalization xmi:id="_NyGQC2EIEdqmfMQqVJOcWQ" general="_NxgaIWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NxDuVGEIEdqmfMQqVJOcWQ" name="ObjectFlow">
    <ownedComment xmi:id="_NxDuVWEIEdqmfMQqVJOcWQ" annotatedElement="_NxDuVGEIEdqmfMQqVJOcWQ">
      <body>An object flow models the flow of values to or from object nodes.</body>
    </ownedComment>
    <ownedRule xmi:id="_NxDuVmEIEdqmfMQqVJOcWQ" name="no_actions" constrainedElement="_NxDuVGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxDuV2EIEdqmfMQqVJOcWQ" annotatedElement="_NxDuVmEIEdqmfMQqVJOcWQ">
        <body>Object flows may not have actions at either end.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxDuWGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NxDuWWEIEdqmfMQqVJOcWQ" name="compatible_types" constrainedElement="_NxDuVGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxDuWmEIEdqmfMQqVJOcWQ" annotatedElement="_NxDuWWEIEdqmfMQqVJOcWQ">
        <body>Object nodes connected by an object flow, with optionally intervening control nodes, must have compatible types. In particular, the downstream object node type must be the same or a supertype of the upstream object node type.

</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxDuW2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NxDuXGEIEdqmfMQqVJOcWQ" name="same_upper_bounds" constrainedElement="_NxDuVGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxDuXWEIEdqmfMQqVJOcWQ" annotatedElement="_NxDuXGEIEdqmfMQqVJOcWQ">
        <body>Object nodes connected by an object flow, with optionally intervening control nodes, must have the same upper bounds.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxDuXmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NyGQDGEIEdqmfMQqVJOcWQ" name="target" constrainedElement="_NxDuVGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyGQDWEIEdqmfMQqVJOcWQ" annotatedElement="_NyGQDGEIEdqmfMQqVJOcWQ">
        <body>An edge with constant weight may not target an object node, or lead to an object node downstream with no intervening actions, that has an upper bound less than the weight.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NyGQDmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NyGQD2EIEdqmfMQqVJOcWQ" name="transformation_behaviour" constrainedElement="_NxDuVGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyGQEGEIEdqmfMQqVJOcWQ" annotatedElement="_NyGQD2EIEdqmfMQqVJOcWQ">
        <body>A transformation behavior has one input parameter and one output parameter. The input parameter must be the same as or a supertype of the type of object token coming from the source end. The output parameter must be the same or a subtype of the type of object token expected downstream. The behavior cannot have side effects.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NyGQEWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NyQA8GEIEdqmfMQqVJOcWQ" name="selection_behaviour" constrainedElement="_NxDuVGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyQA8WEIEdqmfMQqVJOcWQ" annotatedElement="_NyQA8GEIEdqmfMQqVJOcWQ">
        <body>An object flow may have a selection behavior only if has an object node as a source.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NyQA8mEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NyQA82EIEdqmfMQqVJOcWQ" name="input_and_output_parameter" constrainedElement="_NxDuVGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyQA9GEIEdqmfMQqVJOcWQ" annotatedElement="_NyQA82EIEdqmfMQqVJOcWQ">
        <body>A selection behavior has one input parameter and one output parameter. The input parameter must be a bag of elements of the same as or a supertype of the type of source object node. The output parameter must be the same or a subtype of the type of source object node. The behavior cannot have side effects.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NyQA9WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NyQA9mEIEdqmfMQqVJOcWQ" name="is_multicast_or_is_multireceive" constrainedElement="_NxDuVGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyQA92EIEdqmfMQqVJOcWQ" annotatedElement="_NyQA9mEIEdqmfMQqVJOcWQ">
        <body>isMulticast and isMultireceive cannot both be true.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NyQA-GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NxDuX2EIEdqmfMQqVJOcWQ" general="_NxDuLWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NyQA-WEIEdqmfMQqVJOcWQ" name="isMulticast">
      <ownedComment xmi:id="_NyQA-mEIEdqmfMQqVJOcWQ" annotatedElement="_NyQA-WEIEdqmfMQqVJOcWQ">
        <body>Tells whether the objects in the flow are passed by multicasting.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NyQA-2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NyQA_GEIEdqmfMQqVJOcWQ" name="isMultireceive">
      <ownedComment xmi:id="_NyQA_WEIEdqmfMQqVJOcWQ" annotatedElement="_NyQA_GEIEdqmfMQqVJOcWQ">
        <body>Tells whether the objects in the flow are gathered from respondents to multicasting.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NyQA_mEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NyQA_2EIEdqmfMQqVJOcWQ" name="transformation" type="_NqDuQGEIEdqmfMQqVJOcWQ" association="_Nyss6mEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyQBAGEIEdqmfMQqVJOcWQ" annotatedElement="_NyQA_2EIEdqmfMQqVJOcWQ">
        <body>Changes or replaces data tokens flowing along edge.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NyQBAWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NyQBAmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NyQBA2EIEdqmfMQqVJOcWQ" name="selection" type="_NqDuQGEIEdqmfMQqVJOcWQ" association="_Nyss92EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyQBBGEIEdqmfMQqVJOcWQ" annotatedElement="_NyQBA2EIEdqmfMQqVJOcWQ">
        <body>Selects tokens from a source object node.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NyQBBWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NyQBBmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Enumeration" xmi:id="_NyQBB2EIEdqmfMQqVJOcWQ" name="ParameterEffectKind">
    <ownedComment xmi:id="_NyQBCGEIEdqmfMQqVJOcWQ" annotatedElement="_NyQBB2EIEdqmfMQqVJOcWQ">
      <body>The datatype ParameterEffectKind is an enumeration that indicates the effect of a behavior on values passed in or out of its parameters.</body>
    </ownedComment>
    <ownedLiteral xmi:id="_NyQBCWEIEdqmfMQqVJOcWQ" name="create"/>
    <ownedLiteral xmi:id="_NyQBCmEIEdqmfMQqVJOcWQ" name="read"/>
    <ownedLiteral xmi:id="_NyQBC2EIEdqmfMQqVJOcWQ" name="update"/>
    <ownedLiteral xmi:id="_NyQBDGEIEdqmfMQqVJOcWQ" name="delete"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NxDuIGEIEdqmfMQqVJOcWQ" name="ObjectNode" isAbstract="true">
    <ownedComment xmi:id="_NxDuIWEIEdqmfMQqVJOcWQ" annotatedElement="_NxDuIGEIEdqmfMQqVJOcWQ">
      <body>An object node is an activity node that indicates an instance of a particular classifier, possibly in a particular state, may be available at a particular point in the activity. Object nodes can be used in a variety of ways, depending on where objects are flowing from and to, as described in the semantics section.</body>
    </ownedComment>
    <ownedComment xmi:id="_NyQBF2EIEdqmfMQqVJOcWQ" annotatedElement="_NxDuIGEIEdqmfMQqVJOcWQ">
      <body>An object node is an activity node that indicates an instance of a particular classifier, possibly in a particular state, may be available at a particular point in the activity. Object nodes can be used in a variety of ways, depending on where objects are flowing from and to, as described in the semantics section.

Complete object nodes add support for token selection, limitation on the number of tokens, specifying the state required for tokens, and carrying control values.

</body>
    </ownedComment>
    <ownedRule xmi:id="_NxDuImEIEdqmfMQqVJOcWQ" name="object_flow_edges" constrainedElement="_NxDuIGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxDuI2EIEdqmfMQqVJOcWQ" annotatedElement="_NxDuImEIEdqmfMQqVJOcWQ">
        <body>All edges coming into or going out of object nodes must be object flow edges.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxDuJGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NxDuJWEIEdqmfMQqVJOcWQ" name="not_unique" constrainedElement="_NxDuIGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxDuJmEIEdqmfMQqVJOcWQ" annotatedElement="_NxDuJWEIEdqmfMQqVJOcWQ">
        <body>Object nodes are not unique typed elements</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxDuJ2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>isUnique = false</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NyQBGGEIEdqmfMQqVJOcWQ" name="selection_behavior" constrainedElement="_NxDuIGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyQBGWEIEdqmfMQqVJOcWQ" annotatedElement="_NyQBGGEIEdqmfMQqVJOcWQ">
        <body>If an object node has a selection behavior, then the ordering of the object node is ordered, and vice versa.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NyQBGmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NyQBG2EIEdqmfMQqVJOcWQ" name="input_output_parameter" constrainedElement="_NxDuIGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyQBHGEIEdqmfMQqVJOcWQ" annotatedElement="_NyQBG2EIEdqmfMQqVJOcWQ">
        <body>A selection behavior has one input parameter and one output parameter. The input parameter must be a bag of elements of the same type as the object node or a supertype of the type of object node. The output parameter must be the same or a subtype of the type of object node. The behavior cannot have side effects.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NyQBHWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NxDuKGEIEdqmfMQqVJOcWQ" general="_Nw59TWEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NxDuKWEIEdqmfMQqVJOcWQ" general="_NiwMj2EIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NyQBHmEIEdqmfMQqVJOcWQ" name="ordering" type="_NyQBMmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyQBH2EIEdqmfMQqVJOcWQ" annotatedElement="_NyQBHmEIEdqmfMQqVJOcWQ">
        <body>Tells whether and how the tokens in the object node are ordered for selection to traverse edges outgoing from the object node.</body>
      </ownedComment>
      <defaultValue xmi:type="uml:InstanceValue" xmi:id="_NyQBIGEIEdqmfMQqVJOcWQ" instance="_NyQBN2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NyQBIWEIEdqmfMQqVJOcWQ" name="isControlType">
      <ownedComment xmi:id="_NyQBImEIEdqmfMQqVJOcWQ" annotatedElement="_NyQBIWEIEdqmfMQqVJOcWQ">
        <body>Tells whether the type of the object node is to be treated as control.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NyQBI2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NyQBJGEIEdqmfMQqVJOcWQ" name="upperBound" type="_NiwMlmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_Nyss4GEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NyQBJWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NyQBJmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NyQBJ2EIEdqmfMQqVJOcWQ" annotatedElement="_NyQBJGEIEdqmfMQqVJOcWQ">
        <body>The maximum number of tokens allowed in the node. Objects cannot flow into the node if the upper bound is reached.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NyQBKGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NyQBKWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NyQBKmEIEdqmfMQqVJOcWQ" name="inState" type="_N1rIm2EIEdqmfMQqVJOcWQ" association="_Nyss5WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyQBK2EIEdqmfMQqVJOcWQ" annotatedElement="_NyQBKmEIEdqmfMQqVJOcWQ">
        <body>The required states of the object available at this point in the activity.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NyQBLGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NyQBLWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NyQBLmEIEdqmfMQqVJOcWQ" name="selection" type="_NqDuQGEIEdqmfMQqVJOcWQ" association="_Nyss-2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyQBL2EIEdqmfMQqVJOcWQ" annotatedElement="_NyQBLmEIEdqmfMQqVJOcWQ">
        <body>Selects tokens for outgoing edges.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NyQBMGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NyQBMWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Enumeration" xmi:id="_NyQBMmEIEdqmfMQqVJOcWQ" name="ObjectNodeOrderingKind">
    <ownedComment xmi:id="_NyQBM2EIEdqmfMQqVJOcWQ" annotatedElement="_NyQBMmEIEdqmfMQqVJOcWQ">
      <body>ObjectNodeOrderingKind is an enumeration indicating queuing order within a node.</body>
    </ownedComment>
    <ownedLiteral xmi:id="_NyQBNGEIEdqmfMQqVJOcWQ" name="unordered"/>
    <ownedLiteral xmi:id="_NyQBNWEIEdqmfMQqVJOcWQ" name="ordered"/>
    <ownedLiteral xmi:id="_NyQBNmEIEdqmfMQqVJOcWQ" name="LIFO"/>
    <ownedLiteral xmi:id="_NyQBN2EIEdqmfMQqVJOcWQ" name="FIFO"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NyQBOGEIEdqmfMQqVJOcWQ" name="ParameterSet">
    <ownedComment xmi:id="_NyQBOWEIEdqmfMQqVJOcWQ" annotatedElement="_NyQBOGEIEdqmfMQqVJOcWQ">
      <body>An parameter set acts as a complete set of inputs and outputs to a behavior, exclusive of other parameter sets on the behavior.</body>
    </ownedComment>
    <ownedRule xmi:id="_NyQBOmEIEdqmfMQqVJOcWQ" name="same_parameterized_entity" constrainedElement="_NyQBOGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyQBO2EIEdqmfMQqVJOcWQ" annotatedElement="_NyQBOmEIEdqmfMQqVJOcWQ">
        <body>The parameters in a parameter set must all be inputs or all be outputs of the same parameterized entity, and the parameter set is owned by that entity.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NyQBPGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NyQBPWEIEdqmfMQqVJOcWQ" name="input" constrainedElement="_NyQBOGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyQBPmEIEdqmfMQqVJOcWQ" annotatedElement="_NyQBPWEIEdqmfMQqVJOcWQ">
        <body>If a behavior has input parameters that are in a parameter set, then any inputs that are not in a parameter set must be streaming. Same for output parameters.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NyQBP2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NyQBQGEIEdqmfMQqVJOcWQ" name="two_parameter_sets" constrainedElement="_NyQBOGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyQBQWEIEdqmfMQqVJOcWQ" annotatedElement="_NyQBQGEIEdqmfMQqVJOcWQ">
        <body>Two parameter sets cannot have exactly the same set of parameters.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NyQBQmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NyQBQ2EIEdqmfMQqVJOcWQ" general="_NjfzQGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NyQBRGEIEdqmfMQqVJOcWQ" name="parameter" type="_NjM40GEIEdqmfMQqVJOcWQ" association="_Nyss6WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyQBRWEIEdqmfMQqVJOcWQ" annotatedElement="_NyQBRGEIEdqmfMQqVJOcWQ">
        <body>Parameters in the parameter set.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NyQBRmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NyQBR2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NyQBSGEIEdqmfMQqVJOcWQ" name="condition" type="_NjDHfmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_Ny120GEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NyQBSWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NyQBSmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NyQBS2EIEdqmfMQqVJOcWQ" annotatedElement="_NyQBSGEIEdqmfMQqVJOcWQ">
        <body>Constraint that should be satisfied for the owner of the parameters in an input parameter set to start execution using the values provided for those parameters, or the owner of the parameters in an output parameter set to end execution providing the values for those parameters, if all preconditions and conditions on input parameter sets were satisfied.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NyQBTGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NyQBTWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NjM40GEIEdqmfMQqVJOcWQ" name="Parameter">
    <ownedComment xmi:id="_NjM40WEIEdqmfMQqVJOcWQ" annotatedElement="_NjM40GEIEdqmfMQqVJOcWQ">
      <body>A parameter is a kind of typed element in order to allow the specification of an optional multiplicity on parameters. In addition, it supports the specification of an optional default value.</body>
    </ownedComment>
    <ownedComment xmi:id="_NmVE12EIEdqmfMQqVJOcWQ" annotatedElement="_NjM40GEIEdqmfMQqVJOcWQ">
      <body>A parameter is a specification of an argument used to pass information into or out of an invocation of a behavioral feature. It has a type, and may have a multiplicity and an optional default value.</body>
    </ownedComment>
    <ownedComment xmi:id="_Nte1sGEIEdqmfMQqVJOcWQ" annotatedElement="_NjM40GEIEdqmfMQqVJOcWQ">
      <body>Parameters are allowed to be treated as connectable elements.</body>
    </ownedComment>
    <ownedComment xmi:id="_NyZx82EIEdqmfMQqVJOcWQ" annotatedElement="_NjM40GEIEdqmfMQqVJOcWQ">
      <body>Parameters are extended in complete activities to add support for streaming, exceptions, and parameter sets.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nte1sWEIEdqmfMQqVJOcWQ" name="connector_end" constrainedElement="_NjM40GEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nte1smEIEdqmfMQqVJOcWQ" annotatedElement="_Nte1sWEIEdqmfMQqVJOcWQ">
        <body>A parameter may only be associated with a connector end within the context of a collaboration.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nte1s2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.end.notEmpty() implies self.collaboration.notEmpty()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NyZx9GEIEdqmfMQqVJOcWQ" name="stream_and_exception" constrainedElement="_NjM40GEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyZx9WEIEdqmfMQqVJOcWQ" annotatedElement="_NyZx9GEIEdqmfMQqVJOcWQ">
        <body>A parameter cannot be a stream and exception at the same time.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NyZx9mEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NyZx92EIEdqmfMQqVJOcWQ" name="not_exception" constrainedElement="_NjM40GEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyZx-GEIEdqmfMQqVJOcWQ" annotatedElement="_NyZx92EIEdqmfMQqVJOcWQ">
        <body>An input parameter cannot be an exception.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NyZx-WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NyZx-mEIEdqmfMQqVJOcWQ" name="reentrant_behaviors" constrainedElement="_NjM40GEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyZx-2EIEdqmfMQqVJOcWQ" annotatedElement="_NyZx-mEIEdqmfMQqVJOcWQ">
        <body>Reentrant behaviors cannot have stream parameters.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NyZx_GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NyZx_WEIEdqmfMQqVJOcWQ" name="in_and_out" constrainedElement="_NjM40GEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyZx_mEIEdqmfMQqVJOcWQ" annotatedElement="_NyZx_WEIEdqmfMQqVJOcWQ">
        <body>Only in and inout parameters may have a delete effect. Only out, inout, and return parameters may have a create effect.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NyZx_2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NjM402EIEdqmfMQqVJOcWQ" general="_NimbYGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_Nte1tGEIEdqmfMQqVJOcWQ" general="_NrGQSmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NjM42GEIEdqmfMQqVJOcWQ" name="direction" type="_Njfzf2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjM42WEIEdqmfMQqVJOcWQ" annotatedElement="_NjM42GEIEdqmfMQqVJOcWQ">
        <body>Indicates whether a parameter is being sent into or out of a behavioral element.</body>
      </ownedComment>
      <defaultValue xmi:type="uml:InstanceValue" xmi:id="_NmVE2GEIEdqmfMQqVJOcWQ" instance="_NjfzgWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjM41GEIEdqmfMQqVJOcWQ" name="default" isDerived="true">
      <eAnnotations xmi:id="_NmVE2WEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NmVE2mEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjM41WEIEdqmfMQqVJOcWQ" annotatedElement="_NjM41GEIEdqmfMQqVJOcWQ">
        <body>Specifies a String that represents a value to be used when no argument is supplied for the Parameter.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NmVE22EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NmVE3GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NmVE3WEIEdqmfMQqVJOcWQ" name="defaultValue" type="_NiwMlmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_Noj5dWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NmVE3mEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NmVE32EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NmVE4GEIEdqmfMQqVJOcWQ" annotatedElement="_NmVE3WEIEdqmfMQqVJOcWQ">
        <body>Specifies a ValueSpecification that represents a value to be used when no argument is supplied for the Parameter.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NmVE4WEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NmVE4mEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjM422EIEdqmfMQqVJOcWQ" name="operation" type="_NjM4UGEIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ" association="_NkZLL2EIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NjM43GEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjM43WEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjM43mEIEdqmfMQqVJOcWQ" annotatedElement="_NjM422EIEdqmfMQqVJOcWQ">
        <body>References the Operation for which this is a formal parameter.</body>
      </ownedComment>
      <ownedComment xmi:id="_NmVE42EIEdqmfMQqVJOcWQ" annotatedElement="_NjM422EIEdqmfMQqVJOcWQ">
        <body>References the Operation owning this parameter.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NmVE5GEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NmVE5WEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NyZyAGEIEdqmfMQqVJOcWQ" name="isException">
      <ownedComment xmi:id="_NyZyAWEIEdqmfMQqVJOcWQ" annotatedElement="_NyZyAGEIEdqmfMQqVJOcWQ">
        <body>Tells whether an output parameter may emit a value to the exclusion of the other outputs.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NyZyAmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NyZyA2EIEdqmfMQqVJOcWQ" name="isStream">
      <ownedComment xmi:id="_NyZyBGEIEdqmfMQqVJOcWQ" annotatedElement="_NyZyA2EIEdqmfMQqVJOcWQ">
        <body>Tells whether an input parameter may accept values while its behavior is executing, or whether an output parameter post values while the behavior is executing.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NyZyBWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NyZyBmEIEdqmfMQqVJOcWQ" name="effect" type="_NyQBB2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyZyB2EIEdqmfMQqVJOcWQ" annotatedElement="_NyZyBmEIEdqmfMQqVJOcWQ">
        <body>Specifies the effect that the owner of the parameter has on values passed in or out of the parameter.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NyZyCGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NyZyCWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NyZyCmEIEdqmfMQqVJOcWQ" name="parameterSet" type="_NyQBOGEIEdqmfMQqVJOcWQ" association="_Nyss6WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyZyC2EIEdqmfMQqVJOcWQ" annotatedElement="_NyZyCmEIEdqmfMQqVJOcWQ">
        <body>The parameter sets containing the parameter. See ParameterSet.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NyZyDGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NyZyDWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NmVE5mEIEdqmfMQqVJOcWQ" name="getDefault" visibility="protected">
      <returnResult xmi:id="_NmVE52EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NmVE6GEIEdqmfMQqVJOcWQ" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NmVE6WEIEdqmfMQqVJOcWQ"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NmVE6mEIEdqmfMQqVJOcWQ" name="setDefault" visibility="protected">
      <ownedParameter xmi:id="_NmVE62EIEdqmfMQqVJOcWQ" name="newDefault" effect="read">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
      </ownedParameter>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NyZyG2EIEdqmfMQqVJOcWQ" name="InterruptibleActivityRegion">
    <ownedComment xmi:id="_NyZyHGEIEdqmfMQqVJOcWQ" annotatedElement="_NyZyG2EIEdqmfMQqVJOcWQ">
      <body>An interruptible region contains activity nodes. When a token leaves an interruptible region via edges designated by the region as interrupting edges, all tokens and behaviors in the region are terminated.</body>
    </ownedComment>
    <ownedRule xmi:id="_NyZyHWEIEdqmfMQqVJOcWQ" name="interrupting_edges" constrainedElement="_NyZyG2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyZyHmEIEdqmfMQqVJOcWQ" annotatedElement="_NyZyHWEIEdqmfMQqVJOcWQ">
        <body>Interrupting edges of a region must have their source node in the region and their target node outside the region in the same activity containing the region.

</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NyZyH2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NyZyIGEIEdqmfMQqVJOcWQ" general="_Nw59MmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NyZyIWEIEdqmfMQqVJOcWQ" name="interruptingEdge" type="_NxDuLWEIEdqmfMQqVJOcWQ" association="_Nyss9GEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyZyImEIEdqmfMQqVJOcWQ" annotatedElement="_NyZyIWEIEdqmfMQqVJOcWQ">
        <body>The edges leaving the region that will abort other tokens flowing in the region.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NyZyI2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NyZyJGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NyZyJWEIEdqmfMQqVJOcWQ" name="node" type="_Nw59TWEIEdqmfMQqVJOcWQ" subsettedProperty="_Nw59NWEIEdqmfMQqVJOcWQ" association="_Nyss9WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyZyJmEIEdqmfMQqVJOcWQ" annotatedElement="_NyZyJWEIEdqmfMQqVJOcWQ">
        <body>Nodes immediately contained in the group.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NyZyJ2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NyZyKGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NjM44WEIEdqmfMQqVJOcWQ" name="BehavioralFeature">
    <ownedComment xmi:id="_NjM44mEIEdqmfMQqVJOcWQ" annotatedElement="_NjM44WEIEdqmfMQqVJOcWQ">
      <body>A behavioral feature is a feature of a classifier that specifies an aspect of the behavior of its instances. BehavioralFeature is an abstract metaclass specializing Feature and Namespace. Kinds of behavioral aspects are modeled by subclasses of BehavioralFeature.</body>
    </ownedComment>
    <ownedComment xmi:id="_NmVE0GEIEdqmfMQqVJOcWQ" annotatedElement="_NjM44WEIEdqmfMQqVJOcWQ">
      <body>A behavioral feature specifies that an instance of a classifier will respond to a designated request by invoking a behavior.

BehavioralFeature is an abstract metaclass specializing Feature and Namespace. Kinds of behavioral aspects are modeled by subclasses of BehavioralFeature.

</body>
    </ownedComment>
    <ownedComment xmi:id="_NqDukGEIEdqmfMQqVJOcWQ" annotatedElement="_NjM44WEIEdqmfMQqVJOcWQ">
      <body>A behavioral feature is implemented (realized) by a behavior. A behavioral feature specifies that a classifier will respond to a designated request by invoking its implementing method.</body>
    </ownedComment>
    <ownedComment xmi:id="_Nyi74GEIEdqmfMQqVJOcWQ" annotatedElement="_NjM44WEIEdqmfMQqVJOcWQ">
      <body>The concept of BehavioralFeature is extended to own ParameterSets.</body>
    </ownedComment>
    <generalization xmi:id="_NjM442EIEdqmfMQqVJOcWQ" general="_NidR-GEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NjM45GEIEdqmfMQqVJOcWQ" general="_NimbnWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NjM45WEIEdqmfMQqVJOcWQ" name="ownedParameter" type="_NjM40GEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_Nj8fR2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NjM45mEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjM452EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjM46GEIEdqmfMQqVJOcWQ" annotatedElement="_NjM45WEIEdqmfMQqVJOcWQ">
        <body>Specifies the ordered set of formal parameters of this BehavioralFeature.</body>
      </ownedComment>
      <ownedComment xmi:id="_NmVE0WEIEdqmfMQqVJOcWQ" annotatedElement="_NjM45WEIEdqmfMQqVJOcWQ">
        <body>Specifies the ordered set of formal parameters owned by this BehavioralFeature. The parameter direction can be 'in', 'inout', 'out', pr 'return' to specify input, output, or return parameters.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NmVE0mEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NmVE02EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqDukWEIEdqmfMQqVJOcWQ" name="isAbstract">
      <eAnnotations xmi:id="_NqDukmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NqDuk2EIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqDulGEIEdqmfMQqVJOcWQ" annotatedElement="_NqDukWEIEdqmfMQqVJOcWQ">
        <body>If true, then the behavioral feature does not have an implementation, and one must be supplied by a more specific element. If false, the behavioral feature must have an implementation in the classifier or one must be inherited from a more general element.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqDulWEIEdqmfMQqVJOcWQ" name="method" type="_NqDuQGEIEdqmfMQqVJOcWQ" association="_NqM4SGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqDulmEIEdqmfMQqVJOcWQ" annotatedElement="_NqDulWEIEdqmfMQqVJOcWQ">
        <body>A behavioral description that implements the behavioral feature. There may be at most one behavior for a particular pairing of a classifier (as owner of the behavior) and a behavioral feature (as specification of the behavior).</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqDul2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqDumGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nsld82EIEdqmfMQqVJOcWQ" name="concurrency" type="_NsvPDmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_Nsld9GEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_Nsld9WEIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nsld9mEIEdqmfMQqVJOcWQ" annotatedElement="_Nsld82EIEdqmfMQqVJOcWQ">
        <body>Specifies the semantics of concurrent calls to the same passive instance (i.e., an instance originating from a class with isActive being false). Active instances control access to their own behavioral features.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjM462EIEdqmfMQqVJOcWQ" name="raisedException" type="_NjWCumEIEdqmfMQqVJOcWQ" association="_Nj8fTGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjM47GEIEdqmfMQqVJOcWQ" annotatedElement="_NjM462EIEdqmfMQqVJOcWQ">
        <body>References the Types representing exceptions that may be raised during an invocation of this feature.</body>
      </ownedComment>
      <ownedComment xmi:id="_Nsld92EIEdqmfMQqVJOcWQ" annotatedElement="_NjM462EIEdqmfMQqVJOcWQ">
        <body>The signals that the behavioral feature raises as exceptions.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nsld-GEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nsld-WEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nyi74WEIEdqmfMQqVJOcWQ" name="ownedParameterSet" type="_NyQBOGEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_Ny1202EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nyi74mEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nyi742EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nyi75GEIEdqmfMQqVJOcWQ" annotatedElement="_Nyi74WEIEdqmfMQqVJOcWQ">
        <body>The ParameterSets owned by this BehavioralFeature.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nyi75WEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nyi75mEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NjM472EIEdqmfMQqVJOcWQ" name="isDistinguishableFrom" isQuery="true" redefinedOperation="_NjfzY2EIEdqmfMQqVJOcWQ" bodyCondition="_NjM48WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjM48GEIEdqmfMQqVJOcWQ" annotatedElement="_NjM472EIEdqmfMQqVJOcWQ">
        <body>The query isDistinguishableFrom() determines whether two BehavioralFeatures may coexist in the same Namespace. It specifies that they have to have different signatures.</body>
      </ownedComment>
      <ownedRule xmi:id="_NjM48WEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NjM472EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NmVE1mEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if n.oclIsKindOf(BehavioralFeature)
then
  if ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->notEmpty()
  then Set{}->including(self)->including(n)->isUnique(bf | bf.ownedParameter->collect(type))
  else true
  endif
else true
endif</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NjM482EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_NjM49GEIEdqmfMQqVJOcWQ" name="n" type="_NjfzQGEIEdqmfMQqVJOcWQ"/>
      <ownedParameter xmi:id="_NjM49WEIEdqmfMQqVJOcWQ" name="ns" type="_NimbnWEIEdqmfMQqVJOcWQ"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NqDuQGEIEdqmfMQqVJOcWQ" name="Behavior">
    <ownedComment xmi:id="_NqDuQWEIEdqmfMQqVJOcWQ" annotatedElement="_NqDuQGEIEdqmfMQqVJOcWQ">
      <body>Behavior is a specification of how its context classifier changes state over time. This specification may be either a definition of possible behavior execution or emergent behavior, or a selective illustration of an interesting subset of possible executions. The latter form is typically used for capturing examples, such as a trace of a particular execution.



A classifier behavior is always a definition of behavior and not an illustration. It describes the sequence of state changes an instance of a classifier may undergo in the course of its lifetime. Its precise semantics depends on the kind of classifier. For example, the classifier behavior of a collaboration represents emergent behavior of all the parts, whereas the classifier behavior of a class is just the behavior of instances of the class separated from the behaviors of any of its parts.

When a behavior is associated as the method of a behavioral feature, it defines the implementation of that feature; i.e., the computation that generates the effects of the behavioral feature.



As a classifier, a behavior can be specialized. Instantiating a behavior is referred to as &quot;invoking&quot; the behavior, an instantiated behavior is also called a behavior &quot;execution.&quot; A behavior may be invoked directly or its invocation may be the result of invoking the behavioral feature that specifies this behavior. A behavior can also be instantiated as an object in virtue of it being a class. The specification of a behavior can take a number of forms, as described in the subclasses of Behavior. Behavior is an abstract metaclass factoring out the commonalities of these different specification mechanisms.



When a behavior is invoked, its execution receives a set of input values that are used to affect the course of execution and as a result of its execution it produces a set of output values which are returned, as specified by its parameters. The observable effects of a behavior execution may include changes of values of various objects involved in the execution, the creation and destruction of objects, generation of communications between objects, as well as an explicit set of output values.

</body>
    </ownedComment>
    <ownedComment xmi:id="_Nyi752EIEdqmfMQqVJOcWQ" annotatedElement="_NqDuQGEIEdqmfMQqVJOcWQ">
      <body>The concept of Behavior is extended to own ParameterSets.</body>
    </ownedComment>
    <ownedRule xmi:id="_NqDuQmEIEdqmfMQqVJOcWQ" name="parameters_match" constrainedElement="_NqDuQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqDuQ2EIEdqmfMQqVJOcWQ" annotatedElement="_NqDuQmEIEdqmfMQqVJOcWQ">
        <body>The parameters of the behavior must match the parameters of the implemented behavioral feature.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NqDuRGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NqDuRWEIEdqmfMQqVJOcWQ" name="feature_of_context_classifier" constrainedElement="_NqDuQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqDuRmEIEdqmfMQqVJOcWQ" annotatedElement="_NqDuRWEIEdqmfMQqVJOcWQ">
        <body>The implemented behavioral feature must be a feature (possibly inherited) of the context classifier of the behavior.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NqDuR2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NqDuSGEIEdqmfMQqVJOcWQ" name="must_realize" constrainedElement="_NqDuQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqDuSWEIEdqmfMQqVJOcWQ" annotatedElement="_NqDuSGEIEdqmfMQqVJOcWQ">
        <body>If the implemented behavioral feature has been redefined in the ancestors of the owner of the behavior, then the behavior must realize the latest redefining behavioral feature.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NqDuSmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NqDuS2EIEdqmfMQqVJOcWQ" name="most_one_behaviour" constrainedElement="_NqDuQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqDuTGEIEdqmfMQqVJOcWQ" annotatedElement="_NqDuS2EIEdqmfMQqVJOcWQ">
        <body>There may be at most one behavior for a given pairing of classifier (as owner of the behavior) and behavioral feature (as specification of the behavior).</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NqDuTWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NqDuTmEIEdqmfMQqVJOcWQ" general="_Ni59kGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NqDuT2EIEdqmfMQqVJOcWQ" name="isReentrant">
      <eAnnotations xmi:id="_NqDuUGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NqDuUWEIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqDuUmEIEdqmfMQqVJOcWQ" annotatedElement="_NqDuT2EIEdqmfMQqVJOcWQ">
        <body>Tells whether the behavior can be invoked while it is still executing from a previous invocation.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqDuU2EIEdqmfMQqVJOcWQ" name="redefinedBehavior" type="_NqDuQGEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMb2EIEdqmfMQqVJOcWQ" association="_NqM4Q2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqDuVGEIEdqmfMQqVJOcWQ" annotatedElement="_NqDuU2EIEdqmfMQqVJOcWQ">
        <body>References a behavior that this behavior redefines. A subtype of Behavior may redefine any other subtype of Behavior. If the behavior implements a behavioral feature, it replaces the redefined behavior. If the behavior is a classifier behavior, it extends the redefined behavior.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqDuVWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqDuVmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqDuV2EIEdqmfMQqVJOcWQ" name="specification" type="_NjM44WEIEdqmfMQqVJOcWQ" association="_NqM4SGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqDuWGEIEdqmfMQqVJOcWQ" annotatedElement="_NqDuV2EIEdqmfMQqVJOcWQ">
        <body>Designates a behavioral feature that the behavior implements. The behavioral feature must be owned by the classifier that owns the behavior or be inherited by it. The parameters of the behavioral feature and the implementing behavior must match. If a behavior does not have a specification, it is directly associated with a classifier (i.e., it is the behavior of the classifier as a whole).</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqDuWWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqDuWmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqDuW2EIEdqmfMQqVJOcWQ" name="ownedParameter" type="_NjM40GEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_NqM4SWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NqDuXGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqDuXWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqDuXmEIEdqmfMQqVJOcWQ" annotatedElement="_NqDuW2EIEdqmfMQqVJOcWQ">
        <body>References a list of parameters to the behavior which describes the order and type of arguments that can be given when the behavior is invoked and of the values which will be returned when the behavior completes its execution.

</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqDuX2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqDuYGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqDuYWEIEdqmfMQqVJOcWQ" name="context" type="_NqDua2EIEdqmfMQqVJOcWQ" isDerived="true" subsettedProperty="_NiwMaWEIEdqmfMQqVJOcWQ" association="_NqM4VmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqDuYmEIEdqmfMQqVJOcWQ" annotatedElement="_NqDuYWEIEdqmfMQqVJOcWQ">
        <body>The classifier that is the context for the execution of the behavior. If the behavior is owned by a BehavioredClassifier, that classifier is the context. Otherwise, the context is the first BehavioredClassifier reached by following the chain of owner relationships. For example, following this algorithm, the owner of an entry action in a state machine is the classifier that owns the state machine. The features of the context classifier as well as the elements visible to the context classifier are visible to the behavior.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqDuY2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqDuZGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nyi76GEIEdqmfMQqVJOcWQ" name="ownedParameterSet" type="_NyQBOGEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_Ny122GEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nyi76WEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nyi76mEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nyi762EIEdqmfMQqVJOcWQ" annotatedElement="_Nyi76GEIEdqmfMQqVJOcWQ">
        <body>The ParameterSets owned by this Behavior.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nyi77GEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nyi77WEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NqDuZWEIEdqmfMQqVJOcWQ" name="getContext" visibility="protected" type="_NqDua2EIEdqmfMQqVJOcWQ">
      <returnResult xmi:id="_NqDuZmEIEdqmfMQqVJOcWQ" type="_NqDua2EIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqDuZ2EIEdqmfMQqVJOcWQ" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqDuaGEIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
    <ownedOperation xmi:id="_NqDuaWEIEdqmfMQqVJOcWQ" name="setContext" visibility="protected">
      <ownedParameter xmi:id="_NqDuamEIEdqmfMQqVJOcWQ" name="newContext" type="_NqDua2EIEdqmfMQqVJOcWQ" effect="read"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nu05q2EIEdqmfMQqVJOcWQ" name="Pin">
    <ownedComment xmi:id="_Nu05rGEIEdqmfMQqVJOcWQ" annotatedElement="_Nu05q2EIEdqmfMQqVJOcWQ">
      <body>A pin is a typed element and multiplicity element that provides values to actions and accept result values from them.</body>
    </ownedComment>
    <ownedComment xmi:id="_NxNfR2EIEdqmfMQqVJOcWQ" annotatedElement="_Nu05q2EIEdqmfMQqVJOcWQ">
      <body>A pin is an object node for inputs and outputs to actions.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nyi77mEIEdqmfMQqVJOcWQ" name="control_pins" constrainedElement="_Nu05q2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nyi772EIEdqmfMQqVJOcWQ" annotatedElement="_Nyi77mEIEdqmfMQqVJOcWQ">
        <body>Control pins have a control type</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nyi78GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>isControl implies isControlType</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NxNfSGEIEdqmfMQqVJOcWQ" general="_NxDuIGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nyi78WEIEdqmfMQqVJOcWQ" name="isControl">
      <ownedComment xmi:id="_Nyi78mEIEdqmfMQqVJOcWQ" annotatedElement="_Nyi78WEIEdqmfMQqVJOcWQ">
        <body>Tells whether the pins provide data to the actions, or just controls when it executes it.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_Nyi782EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nyi79mEIEdqmfMQqVJOcWQ" name="A_weight_activityEdge" memberEnd="_NyQBDWEIEdqmfMQqVJOcWQ _Nyi7-GEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nyi792EIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nyi7-GEIEdqmfMQqVJOcWQ" type="_NxDuLWEIEdqmfMQqVJOcWQ" association="_Nyi79mEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nyss4GEIEdqmfMQqVJOcWQ" name="A_upperBound_objectNode" memberEnd="_Nyss4mEIEdqmfMQqVJOcWQ _NyQBJGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nyss4WEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nyss4mEIEdqmfMQqVJOcWQ" type="_NxDuIGEIEdqmfMQqVJOcWQ" association="_Nyss4GEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nyss42EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nyss5GEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nyss5WEIEdqmfMQqVJOcWQ" name="A_inState_objectNode" memberEnd="_NyQBKmEIEdqmfMQqVJOcWQ _Nyss5mEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nyss5mEIEdqmfMQqVJOcWQ" type="_NxDuIGEIEdqmfMQqVJOcWQ" association="_Nyss5WEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nyss52EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nyss6GEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nyss6WEIEdqmfMQqVJOcWQ" name="A_parameterSet_parameter" memberEnd="_NyZyCmEIEdqmfMQqVJOcWQ _NyQBRGEIEdqmfMQqVJOcWQ"/>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nyss6mEIEdqmfMQqVJOcWQ" name="A_transformation_objectFlow" memberEnd="_NyQA_2EIEdqmfMQqVJOcWQ _Nyss62EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nyss62EIEdqmfMQqVJOcWQ" type="_NxDuVGEIEdqmfMQqVJOcWQ" association="_Nyss6mEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nyss7GEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nyss7WEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nyss7mEIEdqmfMQqVJOcWQ" name="A_action_localPrecondition" memberEnd="_NyZyD2EIEdqmfMQqVJOcWQ _Nyss8GEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nyss72EIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nyss8GEIEdqmfMQqVJOcWQ" type="_NvH0cGEIEdqmfMQqVJOcWQ" association="_Nyss7mEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nyss8WEIEdqmfMQqVJOcWQ" name="A_action_localPostcondition" memberEnd="_Nyss82EIEdqmfMQqVJOcWQ _NyZyFWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nyss8mEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Nyss82EIEdqmfMQqVJOcWQ" type="_NvH0cGEIEdqmfMQqVJOcWQ" association="_Nyss8WEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nyss9GEIEdqmfMQqVJOcWQ" name="A_interruptingEdge_interrupts" memberEnd="_NyZyIWEIEdqmfMQqVJOcWQ _NyQBE2EIEdqmfMQqVJOcWQ"/>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nyss9WEIEdqmfMQqVJOcWQ" name="A_inInterruptibleRegion_node" memberEnd="_NyZyKmEIEdqmfMQqVJOcWQ _NyZyJWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nyss9mEIEdqmfMQqVJOcWQ" general="_Nw59XmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nyss92EIEdqmfMQqVJOcWQ" name="A_selection_objectFlow" memberEnd="_NyQBA2EIEdqmfMQqVJOcWQ _Nyss-GEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nyss-GEIEdqmfMQqVJOcWQ" type="_NxDuVGEIEdqmfMQqVJOcWQ" association="_Nyss92EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nyss-WEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nyss-mEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nyss-2EIEdqmfMQqVJOcWQ" name="A_selection_objectNode" memberEnd="_NyQBLmEIEdqmfMQqVJOcWQ _Nyss_GEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_Nyss_GEIEdqmfMQqVJOcWQ" type="_NxDuIGEIEdqmfMQqVJOcWQ" association="_Nyss-2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nyss_WEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nyss_mEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Ny120GEIEdqmfMQqVJOcWQ" name="A_condition_parameterSet" memberEnd="_Ny120mEIEdqmfMQqVJOcWQ _NyQBSGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Ny120WEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Ny120mEIEdqmfMQqVJOcWQ" type="_NyQBOGEIEdqmfMQqVJOcWQ" association="_Ny120GEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Ny1202EIEdqmfMQqVJOcWQ" name="A_ownedParameterSet_behavioralFeature" memberEnd="_Nyi74WEIEdqmfMQqVJOcWQ _Ny121WEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Ny121GEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Ny121WEIEdqmfMQqVJOcWQ" type="_NjM44WEIEdqmfMQqVJOcWQ" association="_Ny1202EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny121mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny1212EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Ny122GEIEdqmfMQqVJOcWQ" name="A_ownedParameterSet_behavior" memberEnd="_Ny122mEIEdqmfMQqVJOcWQ _Nyi76GEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Ny122WEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Ny122mEIEdqmfMQqVJOcWQ" type="_NqDuQGEIEdqmfMQqVJOcWQ" association="_Ny122GEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny1222EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny123GEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Ny123WEIEdqmfMQqVJOcWQ" name="A_joinSpec_joinNode" memberEnd="_NyGQA2EIEdqmfMQqVJOcWQ _Ny1232EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Ny123mEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_Ny1232EIEdqmfMQqVJOcWQ" type="_NxpkIGEIEdqmfMQqVJOcWQ" association="_Ny123WEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Ny124GEIEdqmfMQqVJOcWQ" name="Variable">
    <ownedComment xmi:id="_Ny124WEIEdqmfMQqVJOcWQ" annotatedElement="_Ny124GEIEdqmfMQqVJOcWQ">
      <body>A variable specifies data storage shared by the actions within a group. There are actions to write and read variables. These actions are treated as side effecting actions, similar to the actions to write and read object attributes and associations. There are no sequencing constraints among actions that access the same variable. Such actions must be explicitly coordinated by control flows or other constraints.



Any values contained by a variable must conform to the type of the variable and have cardinalities allowed by the multiplicity of the variable.

</body>
    </ownedComment>
    <ownedRule xmi:id="_Ny124mEIEdqmfMQqVJOcWQ" name="owned" constrainedElement="_Ny124GEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ny1242EIEdqmfMQqVJOcWQ" annotatedElement="_Ny124mEIEdqmfMQqVJOcWQ">
        <body>A variable is owned by a StructuredNode or Activity, but not both.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ny125GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Ny125WEIEdqmfMQqVJOcWQ" general="_NiwMj2EIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_Ny125mEIEdqmfMQqVJOcWQ" general="_NimbYGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Ny1252EIEdqmfMQqVJOcWQ" name="scope" type="_Ny12-WEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_NzJY4WEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_Ny126GEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Ny126WEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ny126mEIEdqmfMQqVJOcWQ" annotatedElement="_Ny1252EIEdqmfMQqVJOcWQ">
        <body>A structured activity node that owns the variable.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny1262EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny127GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ny127WEIEdqmfMQqVJOcWQ" name="activityScope" type="_Nw59IGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_NzvOsGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_Ny127mEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Ny1272EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ny128GEIEdqmfMQqVJOcWQ" annotatedElement="_Ny127WEIEdqmfMQqVJOcWQ">
        <body>An activity that owns the variable.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny128WEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny128mEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_Ny1282EIEdqmfMQqVJOcWQ" name="isAccessibleBy" isQuery="true" bodyCondition="_Ny129WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ny129GEIEdqmfMQqVJOcWQ" annotatedElement="_Ny1282EIEdqmfMQqVJOcWQ">
        <body>The isAccessibleBy() operation is not defined in standard UML. Implementations should define it to specify which actions can access a variable.

</body>
      </ownedComment>
      <ownedRule xmi:id="_Ny129WEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_Ny1282EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ny129mEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = true</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_Ny1292EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_Ny12-GEIEdqmfMQqVJOcWQ" name="a" type="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nw59IGEIEdqmfMQqVJOcWQ" name="Activity">
    <ownedComment xmi:id="_Nw59IWEIEdqmfMQqVJOcWQ" annotatedElement="_Nw59IGEIEdqmfMQqVJOcWQ">
      <body>An activity specifies the coordination of executions of subordinate behaviors, using a control and data flow model. The subordinate behaviors coordinated by these models may be initiated because other behaviors in the model finish executing, because objects and data become available, or because events occur external to the flow. The flow of execution is modeled as activity nodes connected by activity edges. A node can be the execution of a subordinate behavior, such as an arithmetic computation, a call to an operation, or manipulation of object contents. Activity nodes also include flow-of-control constructs, such as synchronization, decision, and concurrency control. Activities may form invocation hierarchies invoking other activities, ultimately resolving to individual actions. In an object-oriented model, activities are usually invoked indirectly as methods bound to operations that are directly invoked. 



Activities may describe procedural computation. In this context, they are the methods corresponding to operations on classes. Activities may be applied to organizational modeling for business process engineering and workflow. In this context, events often originate from inside the system, such as the finishing of a task, but also from outside the system, such as a customer call. Activities can also be used for information system modeling to specify system level processes. Activities may contain actions of various kinds:

- occurrences of primitive functions, such as arithmetic functions.

- invocations of behavior, such as activities.

- communication actions, such as sending of signals.

- manipulations of objects, such as reading or writing attributes or associations.



Actions have no further decomposition in the activity containing them. However, the execution of a single action may induce the execution of many other actions. For example, a call action invokes an operation which is implemented by an activity containing actions that execute before the call action completes.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nw59ImEIEdqmfMQqVJOcWQ" name="no_supergroups" constrainedElement="_Nw59IGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nw59I2EIEdqmfMQqVJOcWQ" annotatedElement="_Nw59ImEIEdqmfMQqVJOcWQ">
        <body>The groups of an activity have no supergroups.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nw59JGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NxNfSWEIEdqmfMQqVJOcWQ" name="activity_parameter_node" constrainedElement="_Nw59IGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxNfSmEIEdqmfMQqVJOcWQ" annotatedElement="_NxNfSWEIEdqmfMQqVJOcWQ">
        <body>The nodes of the activity must include one ActivityParameterNode for each parameter.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxNfS2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NxNfTGEIEdqmfMQqVJOcWQ" name="autonomous" constrainedElement="_Nw59IGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxNfTWEIEdqmfMQqVJOcWQ" annotatedElement="_NxNfTGEIEdqmfMQqVJOcWQ">
        <body>An activity cannot be autonomous and have a classifier or behavioral feature context at the same time.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxNfTmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nw59JWEIEdqmfMQqVJOcWQ" general="_NqDuQGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NxNfT2EIEdqmfMQqVJOcWQ" name="isReadOnly">
      <ownedComment xmi:id="_NxNfUGEIEdqmfMQqVJOcWQ" annotatedElement="_NxNfT2EIEdqmfMQqVJOcWQ">
        <body>If true, this activity must not make any changes to variables outside the activity or to objects. (This is an assertion, not an executable property. It may be used by an execution engine to optimize model execution. If the assertion is violated by the action, then the model is ill-formed.) The default is false (an activity may make nonlocal changes).</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NxNfUWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NxNfUmEIEdqmfMQqVJOcWQ" name="edge" type="_NxDuLWEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NxWpE2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NxNfU2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NxNfVGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NxWpEGEIEdqmfMQqVJOcWQ" annotatedElement="_NxNfUmEIEdqmfMQqVJOcWQ">
        <body>Edges expressing flow between nodes of the activity.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NxWpEWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NxWpEmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NyGP8GEIEdqmfMQqVJOcWQ" name="partition" type="_NxgaJGEIEdqmfMQqVJOcWQ" subsettedProperty="_Nw59LGEIEdqmfMQqVJOcWQ" association="_NyGP9mEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyGP8WEIEdqmfMQqVJOcWQ" annotatedElement="_NyGP8GEIEdqmfMQqVJOcWQ">
        <body>Top-level partitions in the activity.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NyGP8mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NyGP82EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NyZx8GEIEdqmfMQqVJOcWQ" name="isSingleExecution">
      <ownedComment xmi:id="_NyZx8WEIEdqmfMQqVJOcWQ" annotatedElement="_NyZx8GEIEdqmfMQqVJOcWQ">
        <body>If true, all invocations of the activity are handled by the same execution.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NyZx8mEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ny_oEmEIEdqmfMQqVJOcWQ" name="structuredNode" type="_Ny12-WEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" subsettedProperty="_Nw59JmEIEdqmfMQqVJOcWQ _Nw59LGEIEdqmfMQqVJOcWQ" association="_NzmE4mEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Ny_oE2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Ny_oFGEIEdqmfMQqVJOcWQ" isTransient="true" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ny_oFWEIEdqmfMQqVJOcWQ" annotatedElement="_Ny_oEmEIEdqmfMQqVJOcWQ">
        <body>Top-level structured nodes in the activity.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny_oFmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny_oF2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ny_oGGEIEdqmfMQqVJOcWQ" name="variable" type="_Ny124GEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_NzvOsGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Ny_oGWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Ny_oGmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ny_oG2EIEdqmfMQqVJOcWQ" annotatedElement="_Ny_oGGEIEdqmfMQqVJOcWQ">
        <body>Top-level variables in the activity.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny_oHGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny_oHWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nw59LGEIEdqmfMQqVJOcWQ" name="group" type="_Nw59MmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_Nw59X2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nw59LWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nw59LmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nw59L2EIEdqmfMQqVJOcWQ" annotatedElement="_Nw59LGEIEdqmfMQqVJOcWQ">
        <body>Top-level groups in the activity.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny_oHmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny_oH2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nw59JmEIEdqmfMQqVJOcWQ" name="node" type="_Nw59TWEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_Nw59XGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nw59J2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nw59KGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nw59KWEIEdqmfMQqVJOcWQ" annotatedElement="_Nw59JmEIEdqmfMQqVJOcWQ">
        <body>Nodes coordinated by the activity.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny_oIGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny_oIWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nw59TWEIEdqmfMQqVJOcWQ" name="ActivityNode" isAbstract="true">
    <ownedComment xmi:id="_NxNfNmEIEdqmfMQqVJOcWQ" annotatedElement="_Nw59TWEIEdqmfMQqVJOcWQ">
      <body>An activity node is an abstract class for the steps of an activity. It covers executable nodes, control nodes, and object nodes. Nodes can be replaced in generalization.</body>
    </ownedComment>
    <ownedComment xmi:id="_NyZyKWEIEdqmfMQqVJOcWQ" annotatedElement="_Nw59TWEIEdqmfMQqVJOcWQ">
      <body>An activity node is an abstract class for the steps of an activity. It covers executable nodes, control nodes, and object nodes. Nodes can be contained in interruptible regions.</body>
    </ownedComment>
    <ownedComment xmi:id="_Nw59TmEIEdqmfMQqVJOcWQ" annotatedElement="_Nw59TWEIEdqmfMQqVJOcWQ">
      <body>An activity node is an abstract class for the steps of an activity. It covers executable nodes, control nodes, and object nodes.</body>
    </ownedComment>
    <ownedRule xmi:id="_NxNfN2EIEdqmfMQqVJOcWQ" name="owned" constrainedElement="_Nw59TWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxNfOGEIEdqmfMQqVJOcWQ" annotatedElement="_NxNfN2EIEdqmfMQqVJOcWQ">
        <body>Activity nodes can only be owned by activities or groups.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxNfOWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Ny_oImEIEdqmfMQqVJOcWQ" name="owned_structured_node" constrainedElement="_Nw59TWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ny_oI2EIEdqmfMQqVJOcWQ" annotatedElement="_Ny_oImEIEdqmfMQqVJOcWQ">
        <body>Activity nodes may be owned by at most one structured node.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ny_oJGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NxNfOmEIEdqmfMQqVJOcWQ" general="_NiwMYGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NxNfO2EIEdqmfMQqVJOcWQ" name="outgoing" type="_NxDuLWEIEdqmfMQqVJOcWQ" association="_NxWpFWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxNfPGEIEdqmfMQqVJOcWQ" annotatedElement="_NxNfO2EIEdqmfMQqVJOcWQ">
        <body>Edges that have the node as source.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NxNfPWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NxNfPmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NxNfP2EIEdqmfMQqVJOcWQ" name="incoming" type="_NxDuLWEIEdqmfMQqVJOcWQ" association="_NxWpFmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxNfQGEIEdqmfMQqVJOcWQ" annotatedElement="_NxNfP2EIEdqmfMQqVJOcWQ">
        <body>Edges that have the node as target.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NxNfQWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NxNfQmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NxNfQ2EIEdqmfMQqVJOcWQ" name="redefinedNode" type="_Nw59TWEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMb2EIEdqmfMQqVJOcWQ" association="_NxWpGmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxNfRGEIEdqmfMQqVJOcWQ" annotatedElement="_NxNfQ2EIEdqmfMQqVJOcWQ">
        <body>Inherited nodes replaced by this node in a specialization of the activity.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NxNfRWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NxNfRmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NxgaYmEIEdqmfMQqVJOcWQ" name="inPartition" type="_NxgaJGEIEdqmfMQqVJOcWQ" subsettedProperty="_Nw59VmEIEdqmfMQqVJOcWQ" association="_NxzVBmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxgaY2EIEdqmfMQqVJOcWQ" annotatedElement="_NxgaYmEIEdqmfMQqVJOcWQ">
        <body>Partitions containing the node.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NxgaZGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NxgaZWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NyZyKmEIEdqmfMQqVJOcWQ" name="inInterruptibleRegion" type="_NyZyG2EIEdqmfMQqVJOcWQ" subsettedProperty="_Nw59VmEIEdqmfMQqVJOcWQ" association="_Nyss9WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyZyK2EIEdqmfMQqVJOcWQ" annotatedElement="_NyZyKmEIEdqmfMQqVJOcWQ">
        <body>Interruptible regions containing the node.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NyZyLGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NyZyLWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ny_oJWEIEdqmfMQqVJOcWQ" name="inStructuredNode" type="_Ny12-WEIEdqmfMQqVJOcWQ" subsettedProperty="_Nw59VmEIEdqmfMQqVJOcWQ" association="_NzcTwGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_Ny_oJmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Ny_oJ2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ny_oKGEIEdqmfMQqVJOcWQ" annotatedElement="_Ny_oJWEIEdqmfMQqVJOcWQ">
        <body>Structured activity node containing the node.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny_oKWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny_oKmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nw59VmEIEdqmfMQqVJOcWQ" name="inGroup" type="_Nw59MmEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="_Nw59XmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_Nw59V2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nw59WGEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nw59WWEIEdqmfMQqVJOcWQ" annotatedElement="_Nw59VmEIEdqmfMQqVJOcWQ">
        <body>Groups containing the node. Multiplicity specialized to [0..1] for StructuredActivity-Group.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny_oK2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny_oLGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nw59UGEIEdqmfMQqVJOcWQ" name="activity" type="_Nw59IGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_Nw59XGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_Nw59UWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nw59UmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nw59U2EIEdqmfMQqVJOcWQ" annotatedElement="_Nw59UGEIEdqmfMQqVJOcWQ">
        <body>Activity containing the node.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny_oLWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny_oLmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NzJY02EIEdqmfMQqVJOcWQ" name="SequenceNode">
    <ownedComment xmi:id="_NzJY1GEIEdqmfMQqVJOcWQ" annotatedElement="_NzJY02EIEdqmfMQqVJOcWQ">
      <body>A sequence node is a structured activity node that executes its actions in order.</body>
    </ownedComment>
    <generalization xmi:id="_NzJY1WEIEdqmfMQqVJOcWQ" general="_Ny12-WEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NzJY1mEIEdqmfMQqVJOcWQ" name="executableNode" type="_NzJY0GEIEdqmfMQqVJOcWQ" isOrdered="true" redefinedProperty="_Ny13BGEIEdqmfMQqVJOcWQ" association="_NzvOsmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NzJY12EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NzJY2GEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NzJY2WEIEdqmfMQqVJOcWQ" annotatedElement="_NzJY1mEIEdqmfMQqVJOcWQ">
        <body>An ordered set of executable nodes.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NzJY2mEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NzJY22EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NvH0cGEIEdqmfMQqVJOcWQ" name="Action">
    <ownedComment xmi:id="_NvH0cWEIEdqmfMQqVJOcWQ" annotatedElement="_NvH0cGEIEdqmfMQqVJOcWQ">
      <body>An action is a named element that is the fundamental unit of executable functionality. The execution of an action represents some transformation or processing in the modeled system, be it a computer system or otherwise.</body>
    </ownedComment>
    <ownedComment xmi:id="_NyZyDmEIEdqmfMQqVJOcWQ" annotatedElement="_NvH0cGEIEdqmfMQqVJOcWQ">
      <body>An action may have sets of incoming and outgoing activity edges that specify control flow and data flow from and to other nodes. An action will not begin execution until all of its input conditions are satisfied. The completion of the execution of an action may enable the execution of a set of successor nodes and actions that take their inputs from the outputs of the action. In CompleteActivities, action is extended to have pre- and postconditions.</body>
    </ownedComment>
    <ownedComment xmi:id="_Nw59S2EIEdqmfMQqVJOcWQ" annotatedElement="_NvH0cGEIEdqmfMQqVJOcWQ">
      <body>An action may have sets of incoming and outgoing activity edges that specify control flow and data flow from and to other nodes. An action will not begin execution until all of its input conditions are satisfied. The completion of the execution of an action may enable the execution of a set of successor nodes and actions that take their inputs from the outputs of the action.</body>
    </ownedComment>
    <generalization xmi:id="_NzJY3GEIEdqmfMQqVJOcWQ" general="_NzJY0GEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NvH0c2EIEdqmfMQqVJOcWQ" name="output" type="_Nu-DfGEIEdqmfMQqVJOcWQ" isOrdered="true" isReadOnly="true" isDerived="true" isDerivedUnion="true" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NvH0oWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NvH0dGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NvH0dWEIEdqmfMQqVJOcWQ" isTransient="true" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NvH0dmEIEdqmfMQqVJOcWQ" annotatedElement="_NvH0c2EIEdqmfMQqVJOcWQ">
        <body>The ordered set of output pins connected to the Action. The action places its results onto pins in this set.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvH0d2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvH0eGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NvH0eWEIEdqmfMQqVJOcWQ" name="input" type="_Nu-Df2EIEdqmfMQqVJOcWQ" isOrdered="true" isReadOnly="true" isDerived="true" isDerivedUnion="true" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NvH0pmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NvH0emEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NvH0e2EIEdqmfMQqVJOcWQ" isTransient="true" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NvH0fGEIEdqmfMQqVJOcWQ" annotatedElement="_NvH0eWEIEdqmfMQqVJOcWQ">
        <body>The ordered set of input pins connected to the Action. These are among the total set of inputs.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvH0fWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvH0fmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NvH0f2EIEdqmfMQqVJOcWQ" name="context" type="_NiTgcGEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" association="_NvQ-YGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NvH0gGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NvH0gWEIEdqmfMQqVJOcWQ" isTransient="true" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NvH0gmEIEdqmfMQqVJOcWQ" annotatedElement="_NvH0f2EIEdqmfMQqVJOcWQ">
        <body>The classifier that owns the behavior of which this action is a part.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvH0g2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NvH0hGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NyZyD2EIEdqmfMQqVJOcWQ" name="localPrecondition" type="_NjDHfmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_Nyss7mEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NyZyEGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NyZyEWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NyZyEmEIEdqmfMQqVJOcWQ" annotatedElement="_NyZyD2EIEdqmfMQqVJOcWQ">
        <body>Constraint that must be satisfied when execution is started.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NyZyE2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NyZyFGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NyZyFWEIEdqmfMQqVJOcWQ" name="localPostcondition" type="_NjDHfmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_Nyss8WEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NyZyFmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NyZyF2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NyZyGGEIEdqmfMQqVJOcWQ" annotatedElement="_NyZyFWEIEdqmfMQqVJOcWQ">
        <body>Constraint that must be satisfied when executed is completed.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NyZyGWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NyZyGmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NzJY4WEIEdqmfMQqVJOcWQ" name="A_scope_variable" memberEnd="_Ny1252EIEdqmfMQqVJOcWQ _Ny12_mEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NzJY42EIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NzcTwGEIEdqmfMQqVJOcWQ" name="A_node_inStructuredNode" memberEnd="_Ny_oJWEIEdqmfMQqVJOcWQ _Ny13BGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NzcTwWEIEdqmfMQqVJOcWQ" general="_Nw59XmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NzmEwGEIEdqmfMQqVJOcWQ" name="A_clause_test" memberEnd="_NzmEwWEIEdqmfMQqVJOcWQ _Ny_n_mEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NzmEwWEIEdqmfMQqVJOcWQ" type="_Ny_n-GEIEdqmfMQqVJOcWQ" association="_NzmEwGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NzmEwmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NzmEw2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NzmExGEIEdqmfMQqVJOcWQ" name="A_clause_body" memberEnd="_NzmExWEIEdqmfMQqVJOcWQ _Ny_oAmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NzmExWEIEdqmfMQqVJOcWQ" type="_Ny_n-GEIEdqmfMQqVJOcWQ" association="_NzmExGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NzmExmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NzmEx2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NzmEyGEIEdqmfMQqVJOcWQ" name="A_predecessorClause_successorClause" memberEnd="_Ny_oBmEIEdqmfMQqVJOcWQ _Ny_oCmEIEdqmfMQqVJOcWQ"/>
  <ownedMember xmi:type="uml:Association" xmi:id="_NzmEyWEIEdqmfMQqVJOcWQ" name="A_loopNode_bodyPart" memberEnd="_NzmEymEIEdqmfMQqVJOcWQ _Ny_n6GEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NzmEymEIEdqmfMQqVJOcWQ" type="_Ny_n4WEIEdqmfMQqVJOcWQ" association="_NzmEyWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NzmEy2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NzmEzGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NzmEzWEIEdqmfMQqVJOcWQ" name="A_loopNode_setupPart" memberEnd="_NzmEzmEIEdqmfMQqVJOcWQ _Ny_n7GEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NzmEzmEIEdqmfMQqVJOcWQ" type="_Ny_n4WEIEdqmfMQqVJOcWQ" association="_NzmEzWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NzmEz2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NzmE0GEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NzmE0WEIEdqmfMQqVJOcWQ" name="A_clause_conditionalNode" memberEnd="_Ny_n22EIEdqmfMQqVJOcWQ _NzmE02EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NzmE0mEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NzmE02EIEdqmfMQqVJOcWQ" type="_Ny_n0GEIEdqmfMQqVJOcWQ" association="_NzmE0WEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NzmE1GEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NzmE1WEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NzmE1mEIEdqmfMQqVJOcWQ" name="A_decider_clause" memberEnd="_Ny_oDmEIEdqmfMQqVJOcWQ _NzmE12EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NzmE12EIEdqmfMQqVJOcWQ" type="_Ny_n-GEIEdqmfMQqVJOcWQ" association="_NzmE1mEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NzmE2GEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NzmE2WEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NzmE2mEIEdqmfMQqVJOcWQ" name="A_decider_loopNode" memberEnd="_NzmE22EIEdqmfMQqVJOcWQ _Ny_n8GEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NzmE22EIEdqmfMQqVJOcWQ" type="_Ny_n4WEIEdqmfMQqVJOcWQ" association="_NzmE2mEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NzmE3GEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NzmE3WEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NzmE3mEIEdqmfMQqVJOcWQ" name="A_test_loopNode" memberEnd="_Ny_n9GEIEdqmfMQqVJOcWQ _NzmE32EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_NzmE32EIEdqmfMQqVJOcWQ" type="_Ny_n4WEIEdqmfMQqVJOcWQ" association="_NzmE3mEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NzmE4GEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NzmE4WEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NzmE4mEIEdqmfMQqVJOcWQ" name="A_activity_structuredNode" memberEnd="_Ny_oEmEIEdqmfMQqVJOcWQ _Ny13CmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NzmE42EIEdqmfMQqVJOcWQ" general="_Nw59XGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NzmE5GEIEdqmfMQqVJOcWQ" general="_Nw59X2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NzvOsGEIEdqmfMQqVJOcWQ" name="A_variable_activityScope" memberEnd="_Ny127WEIEdqmfMQqVJOcWQ _Ny_oGGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NzvOsWEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NzvOsmEIEdqmfMQqVJOcWQ" name="A_executableNode_sequenceNode" memberEnd="_NzJY1mEIEdqmfMQqVJOcWQ _NzvOtGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_NzvOs2EIEdqmfMQqVJOcWQ" general="_NzcTwGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_NzvOtGEIEdqmfMQqVJOcWQ" type="_NzJY02EIEdqmfMQqVJOcWQ" association="_NzvOsmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NzvOtWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NzvOtmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nw59XmEIEdqmfMQqVJOcWQ" name="A_containedNode_inGroup" memberEnd="_Nw59VmEIEdqmfMQqVJOcWQ _Nw59NWEIEdqmfMQqVJOcWQ"/>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nw59X2EIEdqmfMQqVJOcWQ" name="A_group_inActivity" memberEnd="_Nw59LGEIEdqmfMQqVJOcWQ _Nw59OWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nw59YGEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_Nw59XGEIEdqmfMQqVJOcWQ" name="A_node_activity" memberEnd="_Nw59JmEIEdqmfMQqVJOcWQ _Nw59UGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_Nw59XWEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Ny_n0GEIEdqmfMQqVJOcWQ" name="ConditionalNode">
    <ownedComment xmi:id="_Ny_n0WEIEdqmfMQqVJOcWQ" annotatedElement="_Ny_n0GEIEdqmfMQqVJOcWQ">
      <body>A conditional node consists of one or more clauses. Each clause consists of a test section and a body section. When the conditional node begins execution, the test sections of the clauses are executed. If one or more test sections yield a true value, one of the corresponding body sections will be executed. If more than one test section yields a true value, only one body section will be executed. The choice is nondeterministic unless the test sequence of clauses is specified. If no test section yields a true value, then no body section is executed; this may be a semantic error if output values are expected from the conditional node.



In general, test section may be executed in any order, including simultaneously (if the underlying execution architecture supports it). The result may therefore be nondeterministic if more than one test section can be true concurrently. To enforce ordering of evaluation, sequencing constraints may be specified among clauses. One frequent case is a total ordering of clauses, in which case the clause execution order is determinate. If it is impossible for more than one test section to evaluate true simultaneously, the result is deterministic and it is unnecessary to order the clauses, as ordering may impose undesirable and unnecessary restrictions on implementation. Note that, although evaluation of test sections may be specified as concurrent, this does not require that the implementation evaluate them in parallel; it merely means that the model does not impose any order on evaluation.



An &quot;else&quot; clause is a clause that is a successor to all other clauses in the conditional and whose test part always returns true.



Output values created in the test or body section of a clause are potentially available for use outside the conditional. However, any value used outside the conditional must be created in every clause, otherwise an undefined value would be accessed if a clause not defining the value were executed.</body>
    </ownedComment>
    <ownedRule xmi:id="_NzvOt2EIEdqmfMQqVJOcWQ" name="result_no_incoming" constrainedElement="_Ny_n0GEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NzvOuGEIEdqmfMQqVJOcWQ" annotatedElement="_NzvOt2EIEdqmfMQqVJOcWQ">
        <body>The result output pins have no incoming edges.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NzvOuWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Ny_n0mEIEdqmfMQqVJOcWQ" general="_Ny12-WEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Ny_n02EIEdqmfMQqVJOcWQ" name="isDeterminate">
      <eAnnotations xmi:id="_Ny_n1GEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_Ny_n1WEIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ny_n1mEIEdqmfMQqVJOcWQ" annotatedElement="_Ny_n02EIEdqmfMQqVJOcWQ">
        <body>If true, the modeler asserts that at most one test will succeed.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ny_n12EIEdqmfMQqVJOcWQ" name="isAssured">
      <eAnnotations xmi:id="_Ny_n2GEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_Ny_n2WEIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ny_n2mEIEdqmfMQqVJOcWQ" annotatedElement="_Ny_n12EIEdqmfMQqVJOcWQ">
        <body>If true, the modeler asserts that at least one test will succeed.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ny_n22EIEdqmfMQqVJOcWQ" name="clause" type="_Ny_n-GEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NzmE0WEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Ny_n3GEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Ny_n3WEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ny_n3mEIEdqmfMQqVJOcWQ" annotatedElement="_Ny_n22EIEdqmfMQqVJOcWQ">
        <body>Set of clauses composing the conditional.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny_n32EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny_n4GEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NzvOumEIEdqmfMQqVJOcWQ" name="result" type="_Nu-DfGEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NvH0c2EIEdqmfMQqVJOcWQ" association="_N0CJoGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NzvOu2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NzvOvGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NzvOvWEIEdqmfMQqVJOcWQ" annotatedElement="_NzvOumEIEdqmfMQqVJOcWQ">
        <body>A list of output pins that constitute the data flow outputs of the conditional.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NzvOvmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NzvOv2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Ny12-WEIEdqmfMQqVJOcWQ" name="StructuredActivityNode">
    <ownedComment xmi:id="_Ny12-mEIEdqmfMQqVJOcWQ" annotatedElement="_Ny12-WEIEdqmfMQqVJOcWQ">
      <body>A structured activity node represents a structured portion of the activity that is not shared with any other structured node, except for nesting. It may have control edges connected to it, and pins when merged with CompleteStructuredActivities. The execution of any embedded actions may not begin until the structured activity node has received its object and control tokens. The availability of output tokens from the structured activity node does not occur until all embedded actions have completed execution.



Note - Any required isolation may be achieved using a locking mechanisms, or it may simply sequentialize execution to avoid concurrency conflicts. Isolation is different from the property of &quot;atomicity&quot;, which is the guarantee that a group of actions either all complete successfully or have no effect at all. Atomicity generally requires a rollback mechanism to prevent committing partial results.

</body>
    </ownedComment>
    <ownedComment xmi:id="_NzvOwGEIEdqmfMQqVJOcWQ" annotatedElement="_Ny12-WEIEdqmfMQqVJOcWQ">
      <body>A structured activity node represents a structured portion of the activity that is not shared with any other structured node, except for nesting. It may have control edges connected to it, and pins in CompleteStructuredActivities. The execution of any embedded actions may not begin until the structured activity node has received its object and control tokens. The availability of output tokens from the structured activity node does not occur until all embedded actions have completed execution.



Because of the concurrent nature of the execution of actions within and across activities, it can be difficult to guarantee the consistent access and modification of object memory. In order to avoid race conditions or other concurrency-related problems, it is sometimes necessary to isolate the effects of a group of actions from the effects of actions outside the group. This may be indicated by setting the mustIsolate attribute to true on a structured activity node. If a structured activity node is &quot;isolated,&quot; then any object used by an action within the node cannot be accessed by any action outside the node until the structured activity node as a whole completes. Any concurrent actions that would result in accessing such objects are required to have their execution deferred until the completion of the node.



Note - Any required isolation may be achieved using a locking mechanisms, or it may simply sequentialize execution to avoid concurrency conflicts. Isolation is different from the property of &quot;atomicity&quot;, which is the guarantee that a group of actions either all complete successfully or have no effect at all. Atomicity generally requires a rollback mechanism to prevent committing partial results.

</body>
    </ownedComment>
    <ownedRule xmi:id="_NzvOwWEIEdqmfMQqVJOcWQ" name="edges" constrainedElement="_Ny12-WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NzvOwmEIEdqmfMQqVJOcWQ" annotatedElement="_NzvOwWEIEdqmfMQqVJOcWQ">
        <body>The edges owned by a structured node must have source and target nodes in the structured node, and vice versa.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NzvOw2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Ny12_WEIEdqmfMQqVJOcWQ" general="_NimbnWEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_Nz4_sGEIEdqmfMQqVJOcWQ" general="_NvH0cGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_Ny12-2EIEdqmfMQqVJOcWQ" general="_Nw59MmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Ny12_mEIEdqmfMQqVJOcWQ" name="variable" type="_Ny124GEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_NzJY4WEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Ny12_2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Ny13AGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ny13AWEIEdqmfMQqVJOcWQ" annotatedElement="_Ny12_mEIEdqmfMQqVJOcWQ">
        <body>A variable defined in the scope of the structured activity node. It has no value and may not be accessed</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny13AmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny13A2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ny13BGEIEdqmfMQqVJOcWQ" name="node" type="_Nw59TWEIEdqmfMQqVJOcWQ" subsettedProperty="_Nw59NWEIEdqmfMQqVJOcWQ" association="_NzcTwGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Ny13BWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Ny13BmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ny13B2EIEdqmfMQqVJOcWQ" annotatedElement="_Ny13BGEIEdqmfMQqVJOcWQ">
        <body>Nodes immediately contained in the group.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny13CGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny13CWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ny13CmEIEdqmfMQqVJOcWQ" name="activity" type="_Nw59IGEIEdqmfMQqVJOcWQ" redefinedProperty="_Nw59UGEIEdqmfMQqVJOcWQ _Nw59OWEIEdqmfMQqVJOcWQ" association="_NzmE4mEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_Ny13C2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Ny13DGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ny13DWEIEdqmfMQqVJOcWQ" annotatedElement="_Ny13CmEIEdqmfMQqVJOcWQ">
        <body>Activity immediately containing the node.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny13DmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny13D2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nz4_sWEIEdqmfMQqVJOcWQ" name="mustIsolate">
      <eAnnotations xmi:id="_Nz4_smEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_Nz4_s2EIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nz4_tGEIEdqmfMQqVJOcWQ" annotatedElement="_Nz4_sWEIEdqmfMQqVJOcWQ">
        <body>If true, then the actions in the node execute in isolation from actions outside the node.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nz4_tWEIEdqmfMQqVJOcWQ" name="edge" type="_NxDuLWEIEdqmfMQqVJOcWQ" subsettedProperty="_NxDudWEIEdqmfMQqVJOcWQ" association="_N0CJvGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nz4_tmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nz4_t2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nz4_uGEIEdqmfMQqVJOcWQ" annotatedElement="_Nz4_tWEIEdqmfMQqVJOcWQ">
        <body>Edges immediately contained in the structured node.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nz4_uWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nz4_umEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Ny_n4WEIEdqmfMQqVJOcWQ" name="LoopNode">
    <ownedComment xmi:id="_Ny_n4mEIEdqmfMQqVJOcWQ" annotatedElement="_Ny_n4WEIEdqmfMQqVJOcWQ">
      <body>Each section is a well-nested subregion of the activity whose nodes follow any predecessors of the loop and precede any successors of the loop. The test section may precede or follow the body section. The setup section is executed once on entry to the loop, and the test and body sections are executed repeatedly until the test produces a false value. The results of the final execution of the test or body are available after completion of execution of the loop.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nz4_u2EIEdqmfMQqVJOcWQ" name="input_edges" constrainedElement="_Ny_n4WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nz4_vGEIEdqmfMQqVJOcWQ" annotatedElement="_Nz4_u2EIEdqmfMQqVJOcWQ">
        <body>Loop variable inputs must not have outgoing edges.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nz4_vWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nz4_vmEIEdqmfMQqVJOcWQ" name="body_output_pins" constrainedElement="_Ny_n4WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nz4_v2EIEdqmfMQqVJOcWQ" annotatedElement="_Nz4_vmEIEdqmfMQqVJOcWQ">
        <body>The bodyOutput pins are output pins on actions in the body of the loop node.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nz4_wGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nz4_wWEIEdqmfMQqVJOcWQ" name="result_no_incoming" constrainedElement="_Ny_n4WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nz4_wmEIEdqmfMQqVJOcWQ" annotatedElement="_Nz4_wWEIEdqmfMQqVJOcWQ">
        <body>The result output pins have no incoming edges.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nz4_w2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Ny_n42EIEdqmfMQqVJOcWQ" general="_Ny12-WEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Ny_n5GEIEdqmfMQqVJOcWQ" name="isTestedFirst">
      <eAnnotations xmi:id="_Ny_n5WEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_Ny_n5mEIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ny_n52EIEdqmfMQqVJOcWQ" annotatedElement="_Ny_n5GEIEdqmfMQqVJOcWQ">
        <body>If true, the test is performed before the first execution of the body.
If false, the body is executed once before the test is performed.
</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ny_n6GEIEdqmfMQqVJOcWQ" name="bodyPart" type="_NzJY0GEIEdqmfMQqVJOcWQ" association="_NzmEyWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ny_n6WEIEdqmfMQqVJOcWQ" annotatedElement="_Ny_n6GEIEdqmfMQqVJOcWQ">
        <body>The set of nodes and edges that perform the repetitive computations of the loop. The body section is executed as long as the test section produces a true value.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny_n6mEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny_n62EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ny_n7GEIEdqmfMQqVJOcWQ" name="setupPart" type="_NzJY0GEIEdqmfMQqVJOcWQ" association="_NzmEzWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ny_n7WEIEdqmfMQqVJOcWQ" annotatedElement="_Ny_n7GEIEdqmfMQqVJOcWQ">
        <body>The set of nodes and edges that initialize values or perform other setup computations for the loop.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny_n7mEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny_n72EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ny_n8GEIEdqmfMQqVJOcWQ" name="decider" type="_Nu-DfGEIEdqmfMQqVJOcWQ" association="_NzmE2mEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ny_n8WEIEdqmfMQqVJOcWQ" annotatedElement="_Ny_n8GEIEdqmfMQqVJOcWQ">
        <body>An output pin within the test fragment the value of which is examined after execution of the test to determine whether to execute the loop body.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny_n8mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny_n82EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ny_n9GEIEdqmfMQqVJOcWQ" name="test" type="_NzJY0GEIEdqmfMQqVJOcWQ" association="_NzmE3mEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ny_n9WEIEdqmfMQqVJOcWQ" annotatedElement="_Ny_n9GEIEdqmfMQqVJOcWQ">
        <body>The set of nodes, edges, and designated value that compute a Boolean value to determine if another execution of the body will be performed.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny_n9mEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny_n92EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nz4_xGEIEdqmfMQqVJOcWQ" name="result" type="_Nu-DfGEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NvH0c2EIEdqmfMQqVJOcWQ" association="_N0CJpWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nz4_xWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nz4_xmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nz4_x2EIEdqmfMQqVJOcWQ" annotatedElement="_Nz4_xGEIEdqmfMQqVJOcWQ">
        <body>A list of output pins that constitute the data flow output of the entire loop.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nz4_yGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nz4_yWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nz4_ymEIEdqmfMQqVJOcWQ" name="loopVariable" type="_Nu-DfGEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_N0CJqmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nz4_y2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nz4_zGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nz4_zWEIEdqmfMQqVJOcWQ" annotatedElement="_Nz4_ymEIEdqmfMQqVJOcWQ">
        <body>A list of output pins owned by the loop that hold the values of the loop variables during an execution of the loop. When the test fails, the values are movied to the result pins of the loop.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nz4_zmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nz4_z2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nz4_0GEIEdqmfMQqVJOcWQ" name="bodyOutput" type="_Nu-DfGEIEdqmfMQqVJOcWQ" association="_N0CJr2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nz4_0WEIEdqmfMQqVJOcWQ" annotatedElement="_Nz4_0GEIEdqmfMQqVJOcWQ">
        <body>A list of output pins within the body fragment the values of which are moved to the loop variable pins after completion of execution of the body, before the next iteration of the loop begins or before the loop exits.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nz4_0mEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nz4_02EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nz4_1GEIEdqmfMQqVJOcWQ" name="loopVariableInput" type="_Nu-Df2EIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NvH0eWEIEdqmfMQqVJOcWQ" association="_N0CJt2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nz4_1WEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nz4_1mEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nz4_12EIEdqmfMQqVJOcWQ" annotatedElement="_Nz4_1GEIEdqmfMQqVJOcWQ">
        <body>A list of values that are moved into the loop variable pins before the first iteration of the loop.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nz4_2GEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nz4_2WEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Ny_n-GEIEdqmfMQqVJOcWQ" name="Clause">
    <ownedComment xmi:id="_Ny_n-WEIEdqmfMQqVJOcWQ" annotatedElement="_Ny_n-GEIEdqmfMQqVJOcWQ">
      <body>A clause is an element that represents a single branch of a conditional construct, including a test and a body section. The body section is executed only if (but not necessarily if) the test section evaluates true.</body>
    </ownedComment>
    <ownedRule xmi:id="_Ny_n-mEIEdqmfMQqVJOcWQ" name="decider_output" constrainedElement="_Ny_n-GEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ny_n-2EIEdqmfMQqVJOcWQ" annotatedElement="_Ny_n-mEIEdqmfMQqVJOcWQ">
        <body>The decider output pin must be for the test body or a node contained by the test body as a structured node.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Ny_n_GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nz4_2mEIEdqmfMQqVJOcWQ" name="body_output_pins" constrainedElement="_Ny_n-GEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nz4_22EIEdqmfMQqVJOcWQ" annotatedElement="_Nz4_2mEIEdqmfMQqVJOcWQ">
        <body>The bodyOutput pins are output pins on actions in the body of the clause.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nz4_3GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Ny_n_WEIEdqmfMQqVJOcWQ" general="_NidR0mEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Ny_n_mEIEdqmfMQqVJOcWQ" name="test" type="_NzJY0GEIEdqmfMQqVJOcWQ" association="_NzmEwGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ny_n_2EIEdqmfMQqVJOcWQ" annotatedElement="_Ny_n_mEIEdqmfMQqVJOcWQ">
        <body>A nested activity fragment with a designated output pin that specifies the result of the test.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny_oAGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny_oAWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ny_oAmEIEdqmfMQqVJOcWQ" name="body" type="_NzJY0GEIEdqmfMQqVJOcWQ" association="_NzmExGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ny_oA2EIEdqmfMQqVJOcWQ" annotatedElement="_Ny_oAmEIEdqmfMQqVJOcWQ">
        <body>A nested activity fragment that is executed if the test evaluates to true and the clause is chosen over any concurrent clauses that also evaluate to true.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny_oBGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny_oBWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ny_oBmEIEdqmfMQqVJOcWQ" name="predecessorClause" type="_Ny_n-GEIEdqmfMQqVJOcWQ" association="_NzmEyGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ny_oB2EIEdqmfMQqVJOcWQ" annotatedElement="_Ny_oBmEIEdqmfMQqVJOcWQ">
        <body>A set of clauses whose tests must all evaluate false before the current clause can be tested.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny_oCGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny_oCWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ny_oCmEIEdqmfMQqVJOcWQ" name="successorClause" type="_Ny_n-GEIEdqmfMQqVJOcWQ" association="_NzmEyGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ny_oC2EIEdqmfMQqVJOcWQ" annotatedElement="_Ny_oCmEIEdqmfMQqVJOcWQ">
        <body>A set of clauses which may not be tested unless the current clause tests false.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny_oDGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny_oDWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ny_oDmEIEdqmfMQqVJOcWQ" name="decider" type="_Nu-DfGEIEdqmfMQqVJOcWQ" association="_NzmE1mEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ny_oD2EIEdqmfMQqVJOcWQ" annotatedElement="_Ny_oDmEIEdqmfMQqVJOcWQ">
        <body>An output pin within the test fragment the value of which is examined after execution of the test to determine whether the body should be executed.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ny_oEGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ny_oEWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nz4_3WEIEdqmfMQqVJOcWQ" name="bodyOutput" type="_Nu-DfGEIEdqmfMQqVJOcWQ" association="_N0CJs2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nz4_3mEIEdqmfMQqVJOcWQ" annotatedElement="_Nz4_3WEIEdqmfMQqVJOcWQ">
        <body>A list of output pins within the body fragment whose values are moved to the result pins of the containing conditional node or conditional node after execution of the clause body.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nz4_32EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nz4_4GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NxDuLWEIEdqmfMQqVJOcWQ" name="ActivityEdge">
    <ownedComment xmi:id="_NxDuLmEIEdqmfMQqVJOcWQ" annotatedElement="_NxDuLWEIEdqmfMQqVJOcWQ">
      <body>ActivityEdge is an abstract class for the connections along which tokens flow between activity nodes. It covers control and data flow edges. Activity edges can control token flow.</body>
    </ownedComment>
    <ownedRule xmi:id="_NxDuL2EIEdqmfMQqVJOcWQ" name="source_and_target" constrainedElement="_NxDuLWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxDuMGEIEdqmfMQqVJOcWQ" annotatedElement="_NxDuL2EIEdqmfMQqVJOcWQ">
        <body>The source and target of an edge must be in the same activity as the edge.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxDuMWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NxDuMmEIEdqmfMQqVJOcWQ" name="owned" constrainedElement="_NxDuLWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxDuM2EIEdqmfMQqVJOcWQ" annotatedElement="_NxDuMmEIEdqmfMQqVJOcWQ">
        <body>Activity edges may be owned only by activities or groups.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxDuNGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nz4_4WEIEdqmfMQqVJOcWQ" name="structured_node" constrainedElement="_NxDuLWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nz4_4mEIEdqmfMQqVJOcWQ" annotatedElement="_Nz4_4WEIEdqmfMQqVJOcWQ">
        <body>Activity edges may be owned by at most one structured node.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nz4_42EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NxDuNWEIEdqmfMQqVJOcWQ" general="_NiwMYGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NxDuNmEIEdqmfMQqVJOcWQ" name="activity" type="_Nw59IGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_NxWpE2EIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NxDuN2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NxDuOGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NxDuOWEIEdqmfMQqVJOcWQ" annotatedElement="_NxDuNmEIEdqmfMQqVJOcWQ">
        <body>Activity containing the edge.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NxDuOmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NxDuO2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NxDuPGEIEdqmfMQqVJOcWQ" name="source" type="_Nw59TWEIEdqmfMQqVJOcWQ" association="_NxWpFWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxDuPWEIEdqmfMQqVJOcWQ" annotatedElement="_NxDuPGEIEdqmfMQqVJOcWQ">
        <body>Node from which tokens are taken when they traverse the edge.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NxDuPmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NxDuP2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NxDuQGEIEdqmfMQqVJOcWQ" name="target" type="_Nw59TWEIEdqmfMQqVJOcWQ" association="_NxWpFmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxDuQWEIEdqmfMQqVJOcWQ" annotatedElement="_NxDuQGEIEdqmfMQqVJOcWQ">
        <body>Node to which tokens are put when they traverse the edge.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NxDuQmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NxDuQ2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NxDuSmEIEdqmfMQqVJOcWQ" name="redefinedEdge" type="_NxDuLWEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMb2EIEdqmfMQqVJOcWQ" association="_NxgaEGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxDuS2EIEdqmfMQqVJOcWQ" annotatedElement="_NxDuSmEIEdqmfMQqVJOcWQ">
        <body>Inherited edges replaced by this edge in a specialization of the activity.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NxDuTGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NxDuTWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NxgaVWEIEdqmfMQqVJOcWQ" name="inPartition" type="_NxgaJGEIEdqmfMQqVJOcWQ" subsettedProperty="_NxDuRGEIEdqmfMQqVJOcWQ" association="_NxzVBGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxgaVmEIEdqmfMQqVJOcWQ" annotatedElement="_NxgaVWEIEdqmfMQqVJOcWQ">
        <body>Partitions containing the edge.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NxgaV2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NxgaWGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NxgaWWEIEdqmfMQqVJOcWQ" name="guard" type="_NiwMlmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_Nx9GAGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NxgaWmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NxgaW2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NxgaXGEIEdqmfMQqVJOcWQ" annotatedElement="_NxgaWWEIEdqmfMQqVJOcWQ">
        <body>Specification evaluated at runtime to determine if the edge can be traversed.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NxgaXWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NxgaXmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NyQBDWEIEdqmfMQqVJOcWQ" name="weight" type="_NiwMlmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_Nyi79mEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NyQBDmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NyQBD2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NyQBEGEIEdqmfMQqVJOcWQ" annotatedElement="_NyQBDWEIEdqmfMQqVJOcWQ">
        <body>Number of tokens consumed from the source node on each traversal.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NyQBEWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NyQBEmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NyQBE2EIEdqmfMQqVJOcWQ" name="interrupts" type="_NyZyG2EIEdqmfMQqVJOcWQ" association="_Nyss9GEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NyQBFGEIEdqmfMQqVJOcWQ" annotatedElement="_NyQBE2EIEdqmfMQqVJOcWQ">
        <body>Region that the edge can interrupt.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NyQBFWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NyQBFmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nz4_5GEIEdqmfMQqVJOcWQ" name="inStructuredNode" type="_Ny12-WEIEdqmfMQqVJOcWQ" subsettedProperty="_NxDuRGEIEdqmfMQqVJOcWQ" association="_N0CJvGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_Nz4_5WEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nz4_5mEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nz4_52EIEdqmfMQqVJOcWQ" annotatedElement="_Nz4_5GEIEdqmfMQqVJOcWQ">
        <body>Structured activity node containing the edge.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nz4_6GEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nz4_6WEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NxDuRGEIEdqmfMQqVJOcWQ" name="inGroup" type="_Nw59MmEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="_NxWpF2EIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NxDuRWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NxDuRmEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NxDuR2EIEdqmfMQqVJOcWQ" annotatedElement="_NxDuRGEIEdqmfMQqVJOcWQ">
        <body>Groups containing the edge. Multiplicity specialized to [0..1] for StructuredActivityGroup.</body>
      </ownedComment>
      <ownedComment xmi:id="_NxgaX2EIEdqmfMQqVJOcWQ" annotatedElement="_NxDuRGEIEdqmfMQqVJOcWQ">
        <body>Groups containing the edge. Multiplicity specialized to [0..1] for StructuredActivity-Group.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nz4_6mEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nz4_62EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nw59MmEIEdqmfMQqVJOcWQ" name="ActivityGroup" isAbstract="true">
    <ownedComment xmi:id="_Nw59M2EIEdqmfMQqVJOcWQ" annotatedElement="_Nw59MmEIEdqmfMQqVJOcWQ">
      <body>Activity groups are a generic grouping construct for nodes and edges. Nodes and edges can belong to more than one group.

They have no inherent semantics and can be used for various purposes. Subclasses of ActivityGroup may add semantics.

</body>
    </ownedComment>
    <ownedRule xmi:id="_NxDubGEIEdqmfMQqVJOcWQ" name="nodes_and_edges" constrainedElement="_Nw59MmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxDubWEIEdqmfMQqVJOcWQ" annotatedElement="_NxDubGEIEdqmfMQqVJOcWQ">
        <body>All nodes and edges of the group must be in the same activity as the group.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxDubmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NxDub2EIEdqmfMQqVJOcWQ" name="not_contained" constrainedElement="_Nw59MmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxDucGEIEdqmfMQqVJOcWQ" annotatedElement="_NxDub2EIEdqmfMQqVJOcWQ">
        <body>No node or edge in a group may be contained by its subgroups or its containing groups, transitively.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxDucWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NxDucmEIEdqmfMQqVJOcWQ" name="group_owned" constrainedElement="_Nw59MmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxDuc2EIEdqmfMQqVJOcWQ" annotatedElement="_NxDucmEIEdqmfMQqVJOcWQ">
        <body>Groups may only be owned by activities or groups.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NxDudGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nw59NGEIEdqmfMQqVJOcWQ" general="_NidR0mEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nw59P2EIEdqmfMQqVJOcWQ" name="subgroup" type="_Nw59MmEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" isDerivedUnion="true" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_Nw59YWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nw59QGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nw59QWEIEdqmfMQqVJOcWQ" isTransient="true" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nw59QmEIEdqmfMQqVJOcWQ" annotatedElement="_Nw59P2EIEdqmfMQqVJOcWQ">
        <body>Groups immediately contained in the group.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nw59Q2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nw59RGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nw59RWEIEdqmfMQqVJOcWQ" name="superGroup" type="_Nw59MmEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" isDerivedUnion="true" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_Nw59YWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_Nw59RmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nw59R2EIEdqmfMQqVJOcWQ" isTransient="true" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nw59SGEIEdqmfMQqVJOcWQ" annotatedElement="_Nw59RWEIEdqmfMQqVJOcWQ">
        <body>Group immediately containing the group.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nw59SWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nw59SmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nw59NWEIEdqmfMQqVJOcWQ" name="containedNode" type="_Nw59TWEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="_Nw59XmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nw59NmEIEdqmfMQqVJOcWQ" annotatedElement="_Nw59NWEIEdqmfMQqVJOcWQ">
        <body>Nodes immediately contained in the group.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NzJY3WEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NzJY3mEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nw59OWEIEdqmfMQqVJOcWQ" name="inActivity" type="_Nw59IGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_Nw59X2EIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_Nw59OmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nw59O2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nw59PGEIEdqmfMQqVJOcWQ" annotatedElement="_Nw59OWEIEdqmfMQqVJOcWQ">
        <body>Activity containing the group.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NzJY32EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NzJY4GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NxDudWEIEdqmfMQqVJOcWQ" name="containedEdge" type="_NxDuLWEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="_NxWpF2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NxDudmEIEdqmfMQqVJOcWQ" annotatedElement="_NxDudWEIEdqmfMQqVJOcWQ">
        <body>Edges immediately contained in the group.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nz4_7GEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nz4_7WEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N0CJoGEIEdqmfMQqVJOcWQ" name="A_result_conditionalNode" memberEnd="_NzvOumEIEdqmfMQqVJOcWQ _N0CJomEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N0CJoWEIEdqmfMQqVJOcWQ" general="_NvH0oWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N0CJomEIEdqmfMQqVJOcWQ" type="_Ny_n0GEIEdqmfMQqVJOcWQ" association="_N0CJoGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0CJo2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0CJpGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N0CJpWEIEdqmfMQqVJOcWQ" name="A_result_loopNode" memberEnd="_N0CJp2EIEdqmfMQqVJOcWQ _Nz4_xGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N0CJpmEIEdqmfMQqVJOcWQ" general="_NvH0oWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N0CJp2EIEdqmfMQqVJOcWQ" type="_Ny_n4WEIEdqmfMQqVJOcWQ" association="_N0CJpWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0CJqGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0CJqWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N0CJqmEIEdqmfMQqVJOcWQ" name="A_loopVariable_loopNode" memberEnd="_Nz4_ymEIEdqmfMQqVJOcWQ _N0CJrGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N0CJq2EIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N0CJrGEIEdqmfMQqVJOcWQ" type="_Ny_n4WEIEdqmfMQqVJOcWQ" association="_N0CJqmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0CJrWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0CJrmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N0CJr2EIEdqmfMQqVJOcWQ" name="A_bodyOutput_loopNode" memberEnd="_N0CJsGEIEdqmfMQqVJOcWQ _Nz4_0GEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N0CJsGEIEdqmfMQqVJOcWQ" type="_Ny_n4WEIEdqmfMQqVJOcWQ" association="_N0CJr2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0CJsWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0CJsmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N0CJs2EIEdqmfMQqVJOcWQ" name="A_bodyOutput_clause" memberEnd="_Nz4_3WEIEdqmfMQqVJOcWQ _N0CJtGEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N0CJtGEIEdqmfMQqVJOcWQ" type="_Ny_n-GEIEdqmfMQqVJOcWQ" association="_N0CJs2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0CJtWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0CJtmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N0CJt2EIEdqmfMQqVJOcWQ" name="A_loopVariableInput_loopNode" memberEnd="_N0CJuWEIEdqmfMQqVJOcWQ _Nz4_1GEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N0CJuGEIEdqmfMQqVJOcWQ" general="_NvH0pmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N0CJuWEIEdqmfMQqVJOcWQ" type="_Ny_n4WEIEdqmfMQqVJOcWQ" association="_N0CJt2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0CJumEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0CJu2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N0CJvGEIEdqmfMQqVJOcWQ" name="A_edge_inStructuredNode" memberEnd="_Nz4_tWEIEdqmfMQqVJOcWQ _Nz4_5GEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N0CJvWEIEdqmfMQqVJOcWQ" general="_NxWpF2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_NxWpF2EIEdqmfMQqVJOcWQ" name="A_containedEdge_inGroup" isDerived="true" memberEnd="_NxDudWEIEdqmfMQqVJOcWQ _NxDuRGEIEdqmfMQqVJOcWQ"/>
  <ownedMember xmi:type="uml:Class" xmi:id="_N0L6oGEIEdqmfMQqVJOcWQ" name="ExpansionNode">
    <ownedComment xmi:id="_N0L6oWEIEdqmfMQqVJOcWQ" annotatedElement="_N0L6oGEIEdqmfMQqVJOcWQ">
      <body>An expansion node is an object node used to indicate a flow across the boundary of an expansion region. A flow into a region contains a collection that is broken into its individual elements inside the region, which is executed once per element. A flow out of a region combines individual elements into a collection for use outside the region.</body>
    </ownedComment>
    <generalization xmi:id="_N0L6omEIEdqmfMQqVJOcWQ" general="_NxDuIGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N0L6o2EIEdqmfMQqVJOcWQ" name="regionAsOutput" type="_N0L6q2EIEdqmfMQqVJOcWQ" association="_N0L67GEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N0L6pGEIEdqmfMQqVJOcWQ" annotatedElement="_N0L6o2EIEdqmfMQqVJOcWQ">
        <body>The expansion region for which the node is an output.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0L6pWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0L6pmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N0L6p2EIEdqmfMQqVJOcWQ" name="regionAsInput" type="_N0L6q2EIEdqmfMQqVJOcWQ" association="_N0L67WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N0L6qGEIEdqmfMQqVJOcWQ" annotatedElement="_N0L6p2EIEdqmfMQqVJOcWQ">
        <body>The expansion region for which the node is an input.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0L6qWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0L6qmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N0L6q2EIEdqmfMQqVJOcWQ" name="ExpansionRegion">
    <ownedComment xmi:id="_N0L6rGEIEdqmfMQqVJOcWQ" annotatedElement="_N0L6q2EIEdqmfMQqVJOcWQ">
      <body>An expansion region is a strictly nested region of an activity with explicit input and outputs (modeled as ExpansionNodes). Each input is a collection of values. If there are multiple inputs, each of them must hold the same kind of collection, although the types of the elements in the different collections may vary. The expansion region is executed once for each element (or position) in the input collection.



The number of output collections can differ from the number of input collections. On each execution of the region, an output value from the region is inserted into an output collection at the same position as the input elements. If the region execution ends with no output, then nothing is added to the output collection. When this happens the output collection will not have the same number of elements as the input collections, the region acts as a filter. If all the executions provide an output to the collection, then the output collections will have the same number of elements as the input collections.



The inputs and outputs to an expansion region are modeled as ExpansionNodes. From &quot;outside&quot; of the region, the values on these nodes appear as collections. From &quot;inside&quot; the region the values appear as elements of the collections. Object flow edges connect pins outside the region to input and output expansion nodes as collections. Object flow edges connect pins inside the region to input and output expansion nodes as individual elements. From the inside of the region, these nodes are visible as individual values. If an expansion node has a name, it is the name of the individual element within the region.



Any object flow edges that cross the boundary of the region, without passing through expansion nodes, provide values that are fixed within the different executions of the region.</body>
    </ownedComment>
    <ownedRule xmi:id="_N0L6rWEIEdqmfMQqVJOcWQ" name="expansion_nodes" constrainedElement="_N0L6q2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N0L6rmEIEdqmfMQqVJOcWQ" annotatedElement="_N0L6rWEIEdqmfMQqVJOcWQ">
        <body>An ExpansionRegion must have one or more argument ExpansionNodes and zero or more result ExpansionNodes.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N0L6r2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N0L6sGEIEdqmfMQqVJOcWQ" general="_Ny12-WEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N0L6sWEIEdqmfMQqVJOcWQ" name="mode" type="_N0L6vWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N0L6smEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_N0L6s2EIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_N0L6tGEIEdqmfMQqVJOcWQ" annotatedElement="_N0L6sWEIEdqmfMQqVJOcWQ">
        <body>The way in which the executions interact:

parallel: all interactions are independent

iterative: the interactions occur in order of the elements

stream: a stream of values flows into a single execution

</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N0L6tWEIEdqmfMQqVJOcWQ" name="outputElement" type="_N0L6oGEIEdqmfMQqVJOcWQ" association="_N0L67GEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N0L6tmEIEdqmfMQqVJOcWQ" annotatedElement="_N0L6tWEIEdqmfMQqVJOcWQ">
        <body>An object node that accepts a separate element of the output collection during each of the multiple executions of the region. The values are formed into a collection that is available when the execution of the region is complete.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0L6t2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0L6uGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N0L6uWEIEdqmfMQqVJOcWQ" name="inputElement" type="_N0L6oGEIEdqmfMQqVJOcWQ" association="_N0L67WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N0L6umEIEdqmfMQqVJOcWQ" annotatedElement="_N0L6uWEIEdqmfMQqVJOcWQ">
        <body>An object node that holds a separate element of the input collection during each of the multiple executions of the region.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0L6u2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0L6vGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Enumeration" xmi:id="_N0L6vWEIEdqmfMQqVJOcWQ" name="ExpansionKind">
    <ownedComment xmi:id="_N0L6vmEIEdqmfMQqVJOcWQ" annotatedElement="_N0L6vWEIEdqmfMQqVJOcWQ">
      <body>ExpansionKind is an enumeration type used to specify how multiple executions of an expansion region interact.</body>
    </ownedComment>
    <ownedLiteral xmi:id="_N0L6v2EIEdqmfMQqVJOcWQ" name="parallel">
      <ownedComment xmi:id="_N0L6wGEIEdqmfMQqVJOcWQ" annotatedElement="_N0L6v2EIEdqmfMQqVJOcWQ">
        <body>The executions are independent. They may be executed concurrently.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_N0L6wWEIEdqmfMQqVJOcWQ" name="iterative">
      <ownedComment xmi:id="_N0L6wmEIEdqmfMQqVJOcWQ" annotatedElement="_N0L6wWEIEdqmfMQqVJOcWQ">
        <body>The executions are dependent and must be executed one at a time, in order of the collection elements.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_N0L6w2EIEdqmfMQqVJOcWQ" name="stream">
      <ownedComment xmi:id="_N0L6xGEIEdqmfMQqVJOcWQ" annotatedElement="_N0L6w2EIEdqmfMQqVJOcWQ">
        <body>A stream of collection elements flows into a single execution, in order of the collection elements.</body>
      </ownedComment>
    </ownedLiteral>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NzJY0GEIEdqmfMQqVJOcWQ" name="ExecutableNode" isAbstract="true">
    <ownedComment xmi:id="_NzJY0WEIEdqmfMQqVJOcWQ" annotatedElement="_NzJY0GEIEdqmfMQqVJOcWQ">
      <body>An executable node is an abstract class for activity nodes that may be executed. It is used as an attachment point for exception handlers.</body>
    </ownedComment>
    <generalization xmi:id="_NzJY0mEIEdqmfMQqVJOcWQ" general="_Nw59TWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N0L6xWEIEdqmfMQqVJOcWQ" name="handler" type="_N0L6y2EIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_N0L67mEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N0L6xmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N0L6x2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N0L6yGEIEdqmfMQqVJOcWQ" annotatedElement="_N0L6xWEIEdqmfMQqVJOcWQ">
        <body>A set of exception handlers that are examined if an uncaught exception propagates to the outer level of the executable node.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0L6yWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0L6ymEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N0L6y2EIEdqmfMQqVJOcWQ" name="ExceptionHandler">
    <ownedComment xmi:id="_N0L6zGEIEdqmfMQqVJOcWQ" annotatedElement="_N0L6y2EIEdqmfMQqVJOcWQ">
      <body>An exception handler is an element that specifies a body to execute in case the specified exception occurs during the execution of the protected node.</body>
    </ownedComment>
    <ownedRule xmi:id="_N0L6zWEIEdqmfMQqVJOcWQ" name="exception_body" constrainedElement="_N0L6y2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N0L6zmEIEdqmfMQqVJOcWQ" annotatedElement="_N0L6zWEIEdqmfMQqVJOcWQ">
        <body>The exception handler and its input object node are not the source or target of any edge.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N0L6z2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N0L60GEIEdqmfMQqVJOcWQ" name="result_pins" constrainedElement="_N0L6y2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N0L60WEIEdqmfMQqVJOcWQ" annotatedElement="_N0L60GEIEdqmfMQqVJOcWQ">
        <body>The result pins of the exception handler body must correspond in number and types to the result pins of the protected node.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N0L60mEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N0L602EIEdqmfMQqVJOcWQ" name="one_input" constrainedElement="_N0L6y2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N0L61GEIEdqmfMQqVJOcWQ" annotatedElement="_N0L602EIEdqmfMQqVJOcWQ">
        <body>The handler body has one input, and that input is the same as the exception input.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N0L61WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N0L61mEIEdqmfMQqVJOcWQ" name="edge_source_target" constrainedElement="_N0L6y2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N0L612EIEdqmfMQqVJOcWQ" annotatedElement="_N0L61mEIEdqmfMQqVJOcWQ">
        <body>An edge that has a source in an exception handler structured node must have its target in the handler also, and vice versa.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N0L62GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N0L62WEIEdqmfMQqVJOcWQ" general="_NidR0mEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N0L62mEIEdqmfMQqVJOcWQ" name="protectedNode" type="_NzJY0GEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_N0L67mEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N0L622EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N0L63GEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N0L63WEIEdqmfMQqVJOcWQ" annotatedElement="_N0L62mEIEdqmfMQqVJOcWQ">
        <body>The node protected by the handler. The handler is examined if an exception propagates to the outside of the node.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0L63mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0L632EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N0L64GEIEdqmfMQqVJOcWQ" name="handlerBody" type="_NzJY0GEIEdqmfMQqVJOcWQ" association="_N0VroGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N0L64WEIEdqmfMQqVJOcWQ" annotatedElement="_N0L64GEIEdqmfMQqVJOcWQ">
        <body>A node that is executed if the handler satisfies an uncaught exception.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0L64mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0L642EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N0L65GEIEdqmfMQqVJOcWQ" name="exceptionInput" type="_NxDuIGEIEdqmfMQqVJOcWQ" association="_N0VromEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N0L65WEIEdqmfMQqVJOcWQ" annotatedElement="_N0L65GEIEdqmfMQqVJOcWQ">
        <body>An object node within the handler body. When the handler catches an exception, the exception token is placed in this node, causing the body to execute.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0L65mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0L652EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N0L66GEIEdqmfMQqVJOcWQ" name="exceptionType" type="_NiTgcGEIEdqmfMQqVJOcWQ" association="_N0VrpGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N0L66WEIEdqmfMQqVJOcWQ" annotatedElement="_N0L66GEIEdqmfMQqVJOcWQ">
        <body>The kind of instances that the handler catches. If an exception occurs whose type is any of the classifiers in the set, the handler catches the exception and executes its body.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0L66mEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0L662EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N0L67GEIEdqmfMQqVJOcWQ" name="A_outputElement_regionAsOutput" memberEnd="_N0L6o2EIEdqmfMQqVJOcWQ _N0L6tWEIEdqmfMQqVJOcWQ"/>
  <ownedMember xmi:type="uml:Association" xmi:id="_N0L67WEIEdqmfMQqVJOcWQ" name="A_inputElement_regionAsInput" memberEnd="_N0L6p2EIEdqmfMQqVJOcWQ _N0L6uWEIEdqmfMQqVJOcWQ"/>
  <ownedMember xmi:type="uml:Association" xmi:id="_N0L67mEIEdqmfMQqVJOcWQ" name="A_handler_protectedNode" memberEnd="_N0L62mEIEdqmfMQqVJOcWQ _N0L6xWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N0L672EIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N0VroGEIEdqmfMQqVJOcWQ" name="A_handlerBody_exceptionHandler" memberEnd="_N0L64GEIEdqmfMQqVJOcWQ _N0VroWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N0VroWEIEdqmfMQqVJOcWQ" type="_N0L6y2EIEdqmfMQqVJOcWQ" association="_N0VroGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N0VromEIEdqmfMQqVJOcWQ" name="A_exceptionInput_exceptionHandler" memberEnd="_N0L65GEIEdqmfMQqVJOcWQ _N0Vro2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N0Vro2EIEdqmfMQqVJOcWQ" type="_N0L6y2EIEdqmfMQqVJOcWQ" association="_N0VromEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N0VrpGEIEdqmfMQqVJOcWQ" name="A_exceptionType_exceptionHandler" memberEnd="_N0L66GEIEdqmfMQqVJOcWQ _N0VrpWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N0VrpWEIEdqmfMQqVJOcWQ" type="_N0L6y2EIEdqmfMQqVJOcWQ" association="_N0VrpGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N0Vr3WEIEdqmfMQqVJOcWQ" name="ComponentRealization">
    <ownedComment xmi:id="_N0Vr3mEIEdqmfMQqVJOcWQ" annotatedElement="_N0Vr3WEIEdqmfMQqVJOcWQ">
      <body>In the metamodel, a ComponentRealization is a subtype of Dependencies::Realization.</body>
    </ownedComment>
    <generalization xmi:id="_N0Vr32EIEdqmfMQqVJOcWQ" general="_NqfzVmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N0Vr4GEIEdqmfMQqVJOcWQ" name="abstraction" type="_N0VrpmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRxmEIEdqmfMQqVJOcWQ _NidR4GEIEdqmfMQqVJOcWQ _NqfzUmEIEdqmfMQqVJOcWQ" association="_N1FSimEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N0Vr4WEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N0Vr4mEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0Vr42EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0Vr5GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N0Vr5WEIEdqmfMQqVJOcWQ" name="realizingClassifier" type="_NiTgcGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRzGEIEdqmfMQqVJOcWQ _NqfzTmEIEdqmfMQqVJOcWQ" association="_N1OccGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0Vr5mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0Vr52EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NrGQEGEIEdqmfMQqVJOcWQ" name="Connector">
    <ownedComment xmi:id="_NrGQEWEIEdqmfMQqVJOcWQ" annotatedElement="_NrGQEGEIEdqmfMQqVJOcWQ">
      <body>Each connector may be attached to two or more connectable elements, each representing a set of instances. Each connector end is distinct in the sense that it plays a distinct role in the communication realized over a connector. The communications realized over a connector may be constrained by various constraints (including type constraints) that apply to the attached connectable elements.</body>
    </ownedComment>
    <ownedComment xmi:id="_N0Vr6GEIEdqmfMQqVJOcWQ" annotatedElement="_NrGQEGEIEdqmfMQqVJOcWQ">
      <body>In the metamodel, a connector kind attribute is added to the Connector metaclass. Its value is an enumeration type with valid values 'assembly' or 'delegation'.</body>
    </ownedComment>
    <ownedRule xmi:id="_NrGQEmEIEdqmfMQqVJOcWQ" name="types" constrainedElement="_NrGQEGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrGQE2EIEdqmfMQqVJOcWQ" annotatedElement="_NrGQEmEIEdqmfMQqVJOcWQ">
        <body>The types of the connectable elements that the ends of a connector are attached to must conform to the types of the association ends of the association that types the connector, if any.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NrGQFGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NrGQFWEIEdqmfMQqVJOcWQ" name="compatible" constrainedElement="_NrGQEGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrGQFmEIEdqmfMQqVJOcWQ" annotatedElement="_NrGQFWEIEdqmfMQqVJOcWQ">
        <body>The connectable elements attached to the ends of a connector must be compatible.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NrGQF2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NrGQGGEIEdqmfMQqVJOcWQ" name="roles" constrainedElement="_NrGQEGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrGQGWEIEdqmfMQqVJOcWQ" annotatedElement="_NrGQGGEIEdqmfMQqVJOcWQ">
        <body>The ConnectableElements attached as roles to each ConnectorEnd owned by a Connector must be roles of the Classifier that owned the Connector, or they must be ports of such roles.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NrGQGmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N0Vr6WEIEdqmfMQqVJOcWQ" name="between_interfaces_ports" constrainedElement="_NrGQEGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N0Vr6mEIEdqmfMQqVJOcWQ" annotatedElement="_N0Vr6WEIEdqmfMQqVJOcWQ">
        <body>A delegation connector must only be defined between used Interfaces or Ports of the same kind, e.g. between two provided Ports or between two required Ports.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N0Vr62EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N0Vr7GEIEdqmfMQqVJOcWQ" name="between_interface_port_implements" constrainedElement="_NrGQEGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N0Vr7WEIEdqmfMQqVJOcWQ" annotatedElement="_N0Vr7GEIEdqmfMQqVJOcWQ">
        <body>If a delegation connector is defined between a used Interface or Port and an internal Part Classifier, then that Classifier must have an 'implements' relationship to the Interface type of that Port.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N0Vr7mEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N0Vr72EIEdqmfMQqVJOcWQ" name="between_interface_port_signature" constrainedElement="_NrGQEGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N0Vr8GEIEdqmfMQqVJOcWQ" annotatedElement="_N0Vr72EIEdqmfMQqVJOcWQ">
        <body>If a delegation connector is defined between a source Interface or Port and a target Interface or Port, then the target Interface must support a signature compatible subset of Operations of the source Interface or Port.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N0Vr8WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N0Vr8mEIEdqmfMQqVJOcWQ" name="union_signature_compatible" constrainedElement="_NrGQEGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N0Vr82EIEdqmfMQqVJOcWQ" annotatedElement="_N0Vr8mEIEdqmfMQqVJOcWQ">
        <body>In a complete model, if a source Port has delegation connectors to a set of delegated target Ports, then the union of the Interfaces of these target Ports must be signature compatible with the Interface that types the source Port.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N0Vr9GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N0Vr9WEIEdqmfMQqVJOcWQ" name="assembly_connector" constrainedElement="_NrGQEGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N0Vr9mEIEdqmfMQqVJOcWQ" annotatedElement="_N0Vr9WEIEdqmfMQqVJOcWQ">
        <body>An assembly connector must only be defined from a required Interface or Ports to a provided Interface or Port.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N0Vr92EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NrGQG2EIEdqmfMQqVJOcWQ" general="_NidR-GEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NrGQHGEIEdqmfMQqVJOcWQ" name="type" type="_Ni59cmEIEdqmfMQqVJOcWQ" association="_NrQBEGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrGQHWEIEdqmfMQqVJOcWQ" annotatedElement="_NrGQHGEIEdqmfMQqVJOcWQ">
        <body>An optional association that specifies the link corresponding to this connector.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrGQHmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrGQH2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrGQIGEIEdqmfMQqVJOcWQ" name="redefinedConnector" type="_NrGQEGEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMb2EIEdqmfMQqVJOcWQ" association="_NrQBK2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrGQIWEIEdqmfMQqVJOcWQ" annotatedElement="_NrGQIGEIEdqmfMQqVJOcWQ">
        <body>A connector may be redefined when its containing classifier is specialized. The redefining connector may have a type that specializes the type of the redefined connector.

The types of the connector ends of the redefining connector may specialize the types of the connector ends of the redefined connector. The properties of the connector ends of the redefining connector may be replaced.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrGQImEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrGQI2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NrGQJGEIEdqmfMQqVJOcWQ" name="end" type="_Nq8fL2EIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NrQBMGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NrGQJWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NrGQJmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NrGQJ2EIEdqmfMQqVJOcWQ" annotatedElement="_NrGQJGEIEdqmfMQqVJOcWQ">
        <body>A connector consists of at least two connector ends, each representing the participation of instances of the classifiers typing the connectable elements attached to this end. The set of connector ends is ordered.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrGQKGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrGQKWEIEdqmfMQqVJOcWQ" value="2"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N0Vr-GEIEdqmfMQqVJOcWQ" name="kind" type="_N1FSgGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N0Vr-WEIEdqmfMQqVJOcWQ" annotatedElement="_N0Vr-GEIEdqmfMQqVJOcWQ">
        <body>Indicates the kind of connector.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0Vr-mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0Vr-2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N0Vr_GEIEdqmfMQqVJOcWQ" name="contract" type="_NqDuQGEIEdqmfMQqVJOcWQ" association="_N1OcdGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0Vr_WEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0Vr_mEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Enumeration" xmi:id="_N1FSgGEIEdqmfMQqVJOcWQ" name="ConnectorKind">
    <ownedComment xmi:id="_N1FSgWEIEdqmfMQqVJOcWQ" annotatedElement="_N1FSgGEIEdqmfMQqVJOcWQ">
      <body>ConnectorKind is an enumeration of the following literal values:
 assembly Indicates that the connector is an assembly connector.
 delegation Indicates that the connector is a delegation connector.
</body>
    </ownedComment>
    <ownedLiteral xmi:id="_N1FSgmEIEdqmfMQqVJOcWQ" name="assembly">
      <ownedComment xmi:id="_N1FSg2EIEdqmfMQqVJOcWQ" annotatedElement="_N1FSgmEIEdqmfMQqVJOcWQ">
        <body>Indicates that the connector is an assembly connector.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_N1FShGEIEdqmfMQqVJOcWQ" name="delegation">
      <ownedComment xmi:id="_N1FShWEIEdqmfMQqVJOcWQ" annotatedElement="_N1FShGEIEdqmfMQqVJOcWQ">
        <body>Indicates that the connector is a delegation connector.</body>
      </ownedComment>
    </ownedLiteral>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N1FShmEIEdqmfMQqVJOcWQ" name="A_required_component" memberEnd="_N0VrrWEIEdqmfMQqVJOcWQ _N1FSh2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N1FSh2EIEdqmfMQqVJOcWQ" type="_N0VrpmEIEdqmfMQqVJOcWQ" association="_N1FShmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N1FSiGEIEdqmfMQqVJOcWQ" name="A_provided_component" memberEnd="_N1FSiWEIEdqmfMQqVJOcWQ _N0Vrs2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N1FSiWEIEdqmfMQqVJOcWQ" type="_N0VrpmEIEdqmfMQqVJOcWQ" association="_N1FSiGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N1FSimEIEdqmfMQqVJOcWQ" name="A_realization_abstraction" memberEnd="_N0VruWEIEdqmfMQqVJOcWQ _N0Vr4GEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N1FSi2EIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N1FSjWEIEdqmfMQqVJOcWQ" general="_NqzVKmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N1OccGEIEdqmfMQqVJOcWQ" name="A_realizingClassifier_componentRealization" memberEnd="_N1Occ2EIEdqmfMQqVJOcWQ _N0Vr5WEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N1OccmEIEdqmfMQqVJOcWQ" general="_NqzVJGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N1Occ2EIEdqmfMQqVJOcWQ" type="_N0Vr3WEIEdqmfMQqVJOcWQ" redefinedProperty="_NkPaKWEIEdqmfMQqVJOcWQ" association="_N1OccGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N1OcdGEIEdqmfMQqVJOcWQ" name="A_contract_connector" memberEnd="_N0Vr_GEIEdqmfMQqVJOcWQ _N1OcdWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N1OcdWEIEdqmfMQqVJOcWQ" type="_NrGQEGEIEdqmfMQqVJOcWQ" association="_N1OcdGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1OcdmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1Ocd2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N0VrpmEIEdqmfMQqVJOcWQ" name="Component">
    <ownedComment xmi:id="_N0Vrp2EIEdqmfMQqVJOcWQ" annotatedElement="_N0VrpmEIEdqmfMQqVJOcWQ">
      <body>A component is a subtype of Class which provides for a Component having attributes and operations, and being able to participate in Associations and Generalizations. A Component may form the abstraction for a set of realizingClassifiers that realize its behavior. In addition, because a Class itself is a subtype of an EncapsulatedClassifier, a Component may optionally have an internal structure and own a set of Ports that formalize its interaction points.



A component has a number of provided and required Interfaces, that form the basis for wiring components together, either using Dependencies, or by using Connectors. A provided Interface is one that is either implemented directly by the component or one of its realizingClassifiers, or it is the type of a provided Port of the Component. A required interface is designated by a Usage Dependency from the Component or one of its realizingClassifiers, or it is the type of a required Port.

</body>
    </ownedComment>
    <generalization xmi:id="_N0VrqGEIEdqmfMQqVJOcWQ" general="_Ni59kGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N1OceGEIEdqmfMQqVJOcWQ" general="_NimbnWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N0VrqmEIEdqmfMQqVJOcWQ" name="isIndirectlyInstantiated">
      <ownedComment xmi:id="_N0Vrq2EIEdqmfMQqVJOcWQ" annotatedElement="_N0VrqmEIEdqmfMQqVJOcWQ">
        <body>The kind of instantiation that applies to a Component. If false, the component is instantiated as an addressable object. If true, the Component is defined at design-time, but at runtime (or execution-time) an object specified by the Component does not exist, that is, the component is instantiated indirectly, through the instantiation of its realizing classifiers or parts. Several standard stereotypes use this meta attribute, e.g. «specification, «focus», «subsystem».</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_N0VrrGEIEdqmfMQqVJOcWQ" value="true"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N0VrrWEIEdqmfMQqVJOcWQ" name="required" type="_NqzVLGEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" association="_N1FShmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N0VrrmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N0Vrr2EIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_N0VrsGEIEdqmfMQqVJOcWQ" annotatedElement="_N0VrrWEIEdqmfMQqVJOcWQ">
        <body>The interfaces that the component requires from other components in its environment in order to be able to offer its full set of provided functionality. These interfaces may be Used by the Component or any of its realizingClassifiers, or they may be the Interfaces that are required by its public Ports.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0VrsWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0VrsmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N0Vrs2EIEdqmfMQqVJOcWQ" name="provided" type="_NqzVLGEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" association="_N1FSiGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N0VrtGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N0VrtWEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_N0VrtmEIEdqmfMQqVJOcWQ" annotatedElement="_N0Vrs2EIEdqmfMQqVJOcWQ">
        <body>The interfaces that the component exposes to its environment. These interfaces may be Realized by the Component or any of its realizingClassifiers, or they may be the Interfaces that are provided by its public Ports.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0Vrt2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0VruGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N0VruWEIEdqmfMQqVJOcWQ" name="realization" type="_N0Vr3WEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_N1FSimEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N0VrumEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N0Vru2EIEdqmfMQqVJOcWQ" isTransient="true" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N0VrvGEIEdqmfMQqVJOcWQ" annotatedElement="_N0VruWEIEdqmfMQqVJOcWQ">
        <body>The set of Realizations owned by the Component. Realizations reference the Classifiers of which the Component is an abstraction; i.e., that realize its behavior.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0VrvWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0VrvmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1OceWEIEdqmfMQqVJOcWQ" name="packagedElement" type="_Nimb8GEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_N1Ocf2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N1OcemEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1Oce2EIEdqmfMQqVJOcWQ"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1OcfGEIEdqmfMQqVJOcWQ" annotatedElement="_N1OceWEIEdqmfMQqVJOcWQ">
        <body>The set of PackageableElements that a Component owns. In the namespace of a component, all model elements that are involved in or related to its definition may be owned or imported explicitly. These may include e.g. Classes, Interfaces, Components, Packages, Use cases, Dependencies (e.g. mappings), and Artifacts.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1OcfWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1OcfmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_N0Vrv2EIEdqmfMQqVJOcWQ" name="realizedInterfaces" type="_NqzVLGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_N0VrwWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N0VrwGEIEdqmfMQqVJOcWQ" annotatedElement="_N0Vrv2EIEdqmfMQqVJOcWQ">
        <body>Utility returning the set of realized interfaces of a component:</body>
      </ownedComment>
      <ownedRule xmi:id="_N0VrwWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N0Vrv2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N0VrwmEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = (classifier.clientDependency->
select(dependency|dependency.oclIsKindOf(Realization) and dependency.supplier.oclIsKindOf(Interface)))->
collect(dependency|dependency.client)</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N0Vrw2EIEdqmfMQqVJOcWQ" type="_NqzVLGEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0VrxGEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0VrxWEIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
    <ownedOperation xmi:id="_N0VrxmEIEdqmfMQqVJOcWQ" name="usedInterfaces" type="_NqzVLGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_N0VryGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N0Vrx2EIEdqmfMQqVJOcWQ" annotatedElement="_N0VrxmEIEdqmfMQqVJOcWQ">
        <body>Utility returning the set of used interfaces of a component:</body>
      </ownedComment>
      <ownedRule xmi:id="_N0VryGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N0VrxmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N0VryWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = (classifier.supplierDependency->
select(dependency|dependency.oclIsKindOf(Usage) and dependency.supplier.oclIsKindOf(interface)))->
collect(dependency|dependency.supplier)</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N0VrymEIEdqmfMQqVJOcWQ" type="_NqzVLGEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0Vry2EIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0VrzGEIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
    <ownedOperation xmi:id="_N0VrzWEIEdqmfMQqVJOcWQ" name="required" type="_NqzVLGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_N0Vr0GEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N0VrzmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EOperation" xmi:id="_N0Vrz2EIEdqmfMQqVJOcWQ" operationName="getRequireds"/>
      </eAnnotations>
      <ownedRule xmi:id="_N0Vr0GEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N0VrzWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N0Vr0WEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = let usedInterfaces = UsedInterfaces(self) and

  let realizingClassifierUsedInterfaces = UsedInterfaces(self.realizingClassifier) and

  let typesOfUsedPorts = self.ownedPort.required in

    ((usedInterfaces->union(realizingClassifierUsedInterfaces))->

      union(typesOfUsedPorts))->asSet()</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N0Vr0mEIEdqmfMQqVJOcWQ" type="_NqzVLGEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0Vr02EIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0Vr1GEIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
    <ownedOperation xmi:id="_N0Vr1WEIEdqmfMQqVJOcWQ" name="provided" type="_NqzVLGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_N0Vr2GEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N0Vr1mEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EOperation" xmi:id="_N0Vr12EIEdqmfMQqVJOcWQ" operationName="getProvideds"/>
      </eAnnotations>
      <ownedRule xmi:id="_N0Vr2GEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N0Vr1WEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N0Vr2WEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = let implementedInterfaces = self.implementation->collect(impl|impl.contract) and

  let realizedInterfaces = RealizedInterfaces(self) and

  let realizingClassifierInterfaces = RealizedInterfaces(self.realizingClassifier) and

  let typesOfRequiredPorts = self.ownedPort.provided in

    (((implementedInterfaces->union(realizedInterfaces)->union(realizingClassifierInterfaces))->

      union(typesOfRequiredPorts))->asSet()</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N0Vr2mEIEdqmfMQqVJOcWQ" type="_NqzVLGEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N0Vr22EIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N0Vr3GEIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N1Ocf2EIEdqmfMQqVJOcWQ" name="A_component_packagedElement" memberEnd="_N1OcgWEIEdqmfMQqVJOcWQ _N1OceWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N1OcgGEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N1OcgWEIEdqmfMQqVJOcWQ" type="_N0VrpmEIEdqmfMQqVJOcWQ" association="_N1Ocf2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1OcgmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1Ocg2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N1OckWEIEdqmfMQqVJOcWQ" name="Node">
    <ownedComment xmi:id="_N1OckmEIEdqmfMQqVJOcWQ" annotatedElement="_N1OckWEIEdqmfMQqVJOcWQ">
      <body>In the metamodel, a Node is a subclass of Class. It is associated with a Deployment of an Artifact. It is also associated with a set of Elements that are deployed on it. This is a derived association in that these PackageableElements are involved in a Manifestation of an Artifact that is deployed on the Node. Nodes may have an internal structure defined in terms of parts and connectors associated with them for advanced modeling applications.</body>
    </ownedComment>
    <ownedRule xmi:id="_N1Ock2EIEdqmfMQqVJOcWQ" name="internal_structure" constrainedElement="_N1OckWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1OclGEIEdqmfMQqVJOcWQ" annotatedElement="_N1Ock2EIEdqmfMQqVJOcWQ">
        <body>The internal structure of a Node (if defined) consists solely of parts of type Node.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1OclWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N1OclmEIEdqmfMQqVJOcWQ" general="_Ni59kGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N1Ocl2EIEdqmfMQqVJOcWQ" general="_N1YNcGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N1OcmGEIEdqmfMQqVJOcWQ" name="nestedNode" type="_N1OckWEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_N1h-emEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N1OcmWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1OcmmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1Ocm2EIEdqmfMQqVJOcWQ" annotatedElement="_N1OcmGEIEdqmfMQqVJOcWQ">
        <body>The Nodes that are defined (nested) within the Node.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1OcnGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1OcnWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N1OcnmEIEdqmfMQqVJOcWQ" name="Device">
    <ownedComment xmi:id="_N1Ocn2EIEdqmfMQqVJOcWQ" annotatedElement="_N1OcnmEIEdqmfMQqVJOcWQ">
      <body>A Device is a physical computational resource with processing capability upon which artifacts may be deployed for execution. Devices may be complex, i.e. they may consist of other devices. In the metamodel, a Device is a subclass of Node.</body>
    </ownedComment>
    <generalization xmi:id="_N1OcoGEIEdqmfMQqVJOcWQ" general="_N1OckWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N1OcoWEIEdqmfMQqVJOcWQ" name="ExecutionEnvironment">
    <ownedComment xmi:id="_N1OcomEIEdqmfMQqVJOcWQ" annotatedElement="_N1OcoWEIEdqmfMQqVJOcWQ">
      <body>In the metamodel, a ExecutionEnvironment is a subclass of Node. It is usually part of a general Node, representing the physical hardware environment on which the ExecutionEnvironment resides. In that environment, the ExecutionEnvironment implements a standard set of services that Components require at execution time (at the modeling level these services are usually implicit). For each component Deployment, aspects of these services may be determined by properties in a DeploymentSpecification for a particular kind of ExecutionEnvironment.</body>
    </ownedComment>
    <generalization xmi:id="_N1Oco2EIEdqmfMQqVJOcWQ" general="_N1OckWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N1YNcGEIEdqmfMQqVJOcWQ" name="DeploymentTarget" isAbstract="true">
    <ownedComment xmi:id="_N1YNcWEIEdqmfMQqVJOcWQ" annotatedElement="_N1YNcGEIEdqmfMQqVJOcWQ">
      <body>In the metamodel, DeploymentTarget is an abstract metaclass that is a specialization of NamedElement. A DeploymentTarget owns a set of Deployments.</body>
    </ownedComment>
    <generalization xmi:id="_N1YNcmEIEdqmfMQqVJOcWQ" general="_NjfzQGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N1YNc2EIEdqmfMQqVJOcWQ" name="deployment" type="_N1OchGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ _NqpkJ2EIEdqmfMQqVJOcWQ" association="_N1h-dmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N1YNdGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1YNdWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1YNdmEIEdqmfMQqVJOcWQ" annotatedElement="_N1YNc2EIEdqmfMQqVJOcWQ">
        <body>The set of Deployments for a DeploymentTarget.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1YNd2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1YNeGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1YNeWEIEdqmfMQqVJOcWQ" name="deployedElement" type="_Nimb8GEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" association="_N1h-fWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N1YNemEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1YNe2EIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1YNfGEIEdqmfMQqVJOcWQ" annotatedElement="_N1YNeWEIEdqmfMQqVJOcWQ">
        <body>The set of elements that are manifested in an Artifact that is involved in Deployment to a DeploymentTarget.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1YNfWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1YNfmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_N1YNf2EIEdqmfMQqVJOcWQ" name="deployedElement" type="_Nimb8GEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_N1YNgmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N1YNgGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EOperation" xmi:id="_N1YNgWEIEdqmfMQqVJOcWQ" operationName="getDeployedElements"/>
      </eAnnotations>
      <ownedRule xmi:id="_N1YNgmEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N1YNf2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1YNg2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = ((self.deployment->collect(deployedArtifact))->collect(manifestation))->collect(utilizedElement)</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N1YNhGEIEdqmfMQqVJOcWQ" type="_Nimb8GEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1YNhWEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1YNhmEIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N1YNh2EIEdqmfMQqVJOcWQ" name="DeployedArtifact" isAbstract="true">
    <ownedComment xmi:id="_N1YNiGEIEdqmfMQqVJOcWQ" annotatedElement="_N1YNh2EIEdqmfMQqVJOcWQ">
      <body>In the metamodel, DeployedArtifact is an abstract metaclass that is a specialization of NamedElement. A DeployedArtifact is involved in one or more Deployments to a DeploymentTarget.</body>
    </ownedComment>
    <generalization xmi:id="_N1YNiWEIEdqmfMQqVJOcWQ" general="_NjfzQGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N1YNimEIEdqmfMQqVJOcWQ" name="CommunicationPath">
    <ownedComment xmi:id="_N1YNi2EIEdqmfMQqVJOcWQ" annotatedElement="_N1YNimEIEdqmfMQqVJOcWQ">
      <body>In the metamodel, CommunicationPath is a subclass of Association.</body>
    </ownedComment>
    <ownedRule xmi:id="_N1YNjGEIEdqmfMQqVJOcWQ" name="association_ends" constrainedElement="_N1YNimEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1YNjWEIEdqmfMQqVJOcWQ" annotatedElement="_N1YNjGEIEdqmfMQqVJOcWQ">
        <body>The association ends of a CommunicationPath are typed by DeploymentTargets.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1YNjmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>result = self.endType->forAll (t | t.oclIsKindOf(DeploymentTarget))</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N1YNj2EIEdqmfMQqVJOcWQ" general="_Ni59cmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nme102EIEdqmfMQqVJOcWQ" name="InstanceSpecification">
    <ownedComment xmi:id="_Nme11GEIEdqmfMQqVJOcWQ" annotatedElement="_Nme102EIEdqmfMQqVJOcWQ">
      <body>An instance specification specifies existence of an entity in a modeled system and completely or partially describes the entity.

The description may include:



- Classification of the entity by one or more classifiers of which the entity is an instance. If the only classifier specified is abstract, then the instance specification only partially describes the entity.

- The kind of instance, based on its classifier or classifiers -- for example, an instance specification whose classifier is a class describes an object of that class, while an instance specification whose classifier is an association describes a link of that association.

- Specification of values of structural features of the entity. Not all structural features of all classifiers of the instance specification need be represented by slots, in which case the instance specification is a partial description.

- Specification of how to compute, derive or construct the instance (optional).



InstanceSpecification is a concrete class.

</body>
    </ownedComment>
    <ownedComment xmi:id="_N1YNlWEIEdqmfMQqVJOcWQ" annotatedElement="_Nme102EIEdqmfMQqVJOcWQ">
      <body>In the metamodel, InstanceSpecification is a specialization of DeploymentTarget and DeployedArtifact.</body>
    </ownedComment>
    <ownedRule xmi:id="_Nme11WEIEdqmfMQqVJOcWQ" name="defining_feature" constrainedElement="_Nme102EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nme11mEIEdqmfMQqVJOcWQ" annotatedElement="_Nme11WEIEdqmfMQqVJOcWQ">
        <body>The defining feature of each slot is a structural feature (directly or inherited) of a classifier of the instance specification.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nme112EIEdqmfMQqVJOcWQ" language="OCL">
        <body>slot->forAll(s | classifier->exists (c | c.allFeatures()->includes (s.definingFeature)))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nme12GEIEdqmfMQqVJOcWQ" name="structural_feature" constrainedElement="_Nme102EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nme12WEIEdqmfMQqVJOcWQ" annotatedElement="_Nme12GEIEdqmfMQqVJOcWQ">
        <body>One structural feature (including the same feature inherited from multiple classifiers) is the defining feature of at most one slot in an instance specification.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nme12mEIEdqmfMQqVJOcWQ" language="OCL">
        <body>classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() &lt;= 1)))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N1YNlmEIEdqmfMQqVJOcWQ" name="deployment_target" constrainedElement="_Nme102EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1YNl2EIEdqmfMQqVJOcWQ" annotatedElement="_N1YNlmEIEdqmfMQqVJOcWQ">
        <body>An InstanceSpecification can be a DeploymentTarget if it is the instance specification of a Node and functions as a part in the internal structure of an encompassing Node.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1YNmGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N1YNmWEIEdqmfMQqVJOcWQ" name="deployment_artifact" constrainedElement="_Nme102EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1YNmmEIEdqmfMQqVJOcWQ" annotatedElement="_N1YNmWEIEdqmfMQqVJOcWQ">
        <body>An InstanceSpecification can be a DeployedArtifact if it is the instance specification of an Artifact.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1YNm2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nme122EIEdqmfMQqVJOcWQ" general="_Nimb8GEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N1YNnGEIEdqmfMQqVJOcWQ" general="_N1YNcGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N1YNnWEIEdqmfMQqVJOcWQ" general="_N1YNh2EIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nme13GEIEdqmfMQqVJOcWQ" name="classifier" type="_NiTgcGEIEdqmfMQqVJOcWQ" association="_Nn-DmGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nme13WEIEdqmfMQqVJOcWQ" annotatedElement="_Nme13GEIEdqmfMQqVJOcWQ">
        <body>The classifier or classifiers of the represented instance. If multiple classifiers are specified, the instance is classified by all of them.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nme13mEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nme132EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nme14GEIEdqmfMQqVJOcWQ" name="slot" type="_Nme17GEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_Nn-DmmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nme14WEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nme14mEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nme142EIEdqmfMQqVJOcWQ" annotatedElement="_Nme14GEIEdqmfMQqVJOcWQ">
        <body>A slot giving the value or values of a structural feature of the instance. An instance specification can have one slot per structural feature of its classifiers, including inherited features. It is not necessary to model a slot for each structural feature, in which case the instance specification is a partial description.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nme15GEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nme15WEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nme15mEIEdqmfMQqVJOcWQ" name="specification" type="_NiwMlmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_No3bdWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nme152EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nme16GEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nme16WEIEdqmfMQqVJOcWQ" annotatedElement="_Nme15mEIEdqmfMQqVJOcWQ">
        <body>A specification of how to compute, derive, or construct the instance.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nme16mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nme162EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NscUCmEIEdqmfMQqVJOcWQ" name="Artifact">
    <ownedComment xmi:id="_NscUC2EIEdqmfMQqVJOcWQ" annotatedElement="_NscUCmEIEdqmfMQqVJOcWQ">
      <body>In the metamodel, an Artifact is a Classifier that represents a physical entity. Artifacts may have Properties that represent features of the Artifact, and Operations that can be performed on its instances. Artifacts can be involved in Associations to other Artifacts, e.g. composition associations. Artifacts can be instantiated to represent detailed copy semantics, where different instances of the same Artifact may be deployed to various Node instances (and each may have separate property values, e.g. for a 'time-stamp' property.</body>
    </ownedComment>
    <ownedComment xmi:id="_N1YNnmEIEdqmfMQqVJOcWQ" annotatedElement="_NscUCmEIEdqmfMQqVJOcWQ">
      <body>As part of the Nodes package, an Artifact is extended to become the source of a deployment to a Node. This is achieved by specializing the abstract superclass.</body>
    </ownedComment>
    <generalization xmi:id="_NscUDGEIEdqmfMQqVJOcWQ" general="_NiTgcGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N1YNn2EIEdqmfMQqVJOcWQ" general="_N1YNh2EIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NscUDmEIEdqmfMQqVJOcWQ" name="fileName">
      <eAnnotations xmi:id="_NscUD2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NscUEGEIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NscUEWEIEdqmfMQqVJOcWQ" annotatedElement="_NscUDmEIEdqmfMQqVJOcWQ">
        <body>A concrete name that is used to refer to the Artifact in a physical context. Example: file system name, universal resource locator.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NscUEmEIEdqmfMQqVJOcWQ" name="nestedArtifact" type="_NscUCmEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_Nsld3WEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NscUE2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NscUFGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NscUFWEIEdqmfMQqVJOcWQ" annotatedElement="_NscUEmEIEdqmfMQqVJOcWQ">
        <body>The Artifacts that are defined (nested) within the Artifact.

The association is a specialization of the ownedMember association from Namespace to NamedElement.

</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NscUFmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NscUF2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NscUGGEIEdqmfMQqVJOcWQ" name="manifestation" type="_Nsld0GEIEdqmfMQqVJOcWQ" subsettedProperty="_NqpkJ2EIEdqmfMQqVJOcWQ _NidR2mEIEdqmfMQqVJOcWQ" association="_Nsld4GEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NscUGWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NscUGmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NscUG2EIEdqmfMQqVJOcWQ" annotatedElement="_NscUGGEIEdqmfMQqVJOcWQ">
        <body>The set of model elements that are manifested in the Artifact. That is, these model elements are utilized in the construction (or generation) of the artifact.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NscUHGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NscUHWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NscUHmEIEdqmfMQqVJOcWQ" name="ownedOperation" type="_NjM4UGEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NiTggGEIEdqmfMQqVJOcWQ _NimbtWEIEdqmfMQqVJOcWQ" association="_Nsld5mEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NscUH2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NscUIGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NscUIWEIEdqmfMQqVJOcWQ" annotatedElement="_NscUHmEIEdqmfMQqVJOcWQ">
        <body>The Operations defined for the Artifact. The association is a specialization of the ownedMember association.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NscUImEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NscUI2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NscUJGEIEdqmfMQqVJOcWQ" name="ownedAttribute" type="_Ni59sGEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NiTgemEIEdqmfMQqVJOcWQ _NimbtWEIEdqmfMQqVJOcWQ" association="_Nsld7WEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NscUJWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NscUJmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NscUJ2EIEdqmfMQqVJOcWQ" annotatedElement="_NscUJGEIEdqmfMQqVJOcWQ">
        <body>The attributes or association ends defined for the Artifact.

The association is a specialization of the ownedMember association.

</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NscUKGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NscUKWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N1h-cGEIEdqmfMQqVJOcWQ" name="A_deployedArtifact_deployment" memberEnd="_N1h-c2EIEdqmfMQqVJOcWQ _N1Och2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N1h-cWEIEdqmfMQqVJOcWQ" general="_NqzVJGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N1h-c2EIEdqmfMQqVJOcWQ" type="_N1OchGEIEdqmfMQqVJOcWQ" association="_N1h-cGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1h-dGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1h-dWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N1h-dmEIEdqmfMQqVJOcWQ" name="A_deployment_location" memberEnd="_N1YNc2EIEdqmfMQqVJOcWQ _N1Oci2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N1h-d2EIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N1h-eGEIEdqmfMQqVJOcWQ" general="_NqzVKmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N1h-emEIEdqmfMQqVJOcWQ" name="A_nestedNode_node" memberEnd="_N1h-fGEIEdqmfMQqVJOcWQ _N1OcmGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N1h-e2EIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N1h-fGEIEdqmfMQqVJOcWQ" type="_N1OckWEIEdqmfMQqVJOcWQ" redefinedProperty="_NkZLJmEIEdqmfMQqVJOcWQ" association="_N1h-emEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N1h-fWEIEdqmfMQqVJOcWQ" name="A_deployedElement_deploymentTarget" isDerived="true" memberEnd="_N1YNeWEIEdqmfMQqVJOcWQ _N1h-fmEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N1h-fmEIEdqmfMQqVJOcWQ" type="_N1YNcGEIEdqmfMQqVJOcWQ" association="_N1h-fWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1h-f2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1h-gGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N1OchGEIEdqmfMQqVJOcWQ" name="Deployment">
    <ownedComment xmi:id="_N1OchWEIEdqmfMQqVJOcWQ" annotatedElement="_N1OchGEIEdqmfMQqVJOcWQ">
      <body>In the metamodel, Deployment is a subtype of Dependency.</body>
    </ownedComment>
    <ownedComment xmi:id="_N1h-gWEIEdqmfMQqVJOcWQ" annotatedElement="_N1OchGEIEdqmfMQqVJOcWQ">
      <body>A component deployment is the deployment of one or more artifacts or artifact instances to a deployment target, optionally parameterized by a deployment specification. Examples are executables and configuration files.</body>
    </ownedComment>
    <generalization xmi:id="_N1OchmEIEdqmfMQqVJOcWQ" general="_NqfzSmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N1Och2EIEdqmfMQqVJOcWQ" name="deployedArtifact" type="_N1YNh2EIEdqmfMQqVJOcWQ" subsettedProperty="_NqfzTmEIEdqmfMQqVJOcWQ _NidRzGEIEdqmfMQqVJOcWQ" association="_N1h-cGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1OciGEIEdqmfMQqVJOcWQ" annotatedElement="_N1Och2EIEdqmfMQqVJOcWQ">
        <body>The Artifacts that are deployed onto a Node. This association specializes the supplier association.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1OciWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1OcimEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1Oci2EIEdqmfMQqVJOcWQ" name="location" type="_N1YNcGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRxmEIEdqmfMQqVJOcWQ _NqfzUmEIEdqmfMQqVJOcWQ" association="_N1h-dmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N1OcjGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1OcjWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1OcjmEIEdqmfMQqVJOcWQ" annotatedElement="_N1Oci2EIEdqmfMQqVJOcWQ">
        <body>The DeployedTarget which is the target of a Deployment.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1Ocj2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1OckGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1h-gmEIEdqmfMQqVJOcWQ" name="configuration" type="_N1h-iGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_N1h-n2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N1h-g2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1h-hGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1h-hWEIEdqmfMQqVJOcWQ" annotatedElement="_N1h-gmEIEdqmfMQqVJOcWQ">
        <body>The specification of properties that parameterize the deployment and execution of one or more Artifacts. This association is specialized from the ownedMember association.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1h-hmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1h-h2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N1h-iGEIEdqmfMQqVJOcWQ" name="DeploymentSpecification">
    <ownedComment xmi:id="_N1h-iWEIEdqmfMQqVJOcWQ" annotatedElement="_N1h-iGEIEdqmfMQqVJOcWQ">
      <body>In the metamodel, a DeploymentSpecification is a subtype of Artifact. It defines a set of deployment properties that are specific to a certain Container type. An instance of a DeploymentSpecification with specific values for these properties may be contained in a complex Artifact.</body>
    </ownedComment>
    <ownedRule xmi:id="_N1h-imEIEdqmfMQqVJOcWQ" name="deployed_elements" constrainedElement="_N1h-iGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1h-i2EIEdqmfMQqVJOcWQ" annotatedElement="_N1h-imEIEdqmfMQqVJOcWQ">
        <body>The deployedElements of a DeploymentTarget that are involved in a Deployment that has an associated Deployment-Specification is a kind of Component (i.e. the configured components).</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1h-jGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.deployment->forAll (d | d.location.deployedElements->forAll (de |

  de.oclIsKindOf(Component)))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N1h-jWEIEdqmfMQqVJOcWQ" name="deployment_target" constrainedElement="_N1h-iGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1h-jmEIEdqmfMQqVJOcWQ" annotatedElement="_N1h-jWEIEdqmfMQqVJOcWQ">
        <body>The DeploymentTarget of a DeploymentSpecification is a kind of ExecutionEnvironment.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1h-j2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>result = self.deployment->forAll (d | d.location..oclIsKindOf(ExecutionEnvironment))</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N1h-kGEIEdqmfMQqVJOcWQ" general="_NscUCmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N1h-kWEIEdqmfMQqVJOcWQ" name="deploymentLocation">
      <eAnnotations xmi:id="_N1h-kmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_N1h-k2EIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1h-lGEIEdqmfMQqVJOcWQ" annotatedElement="_N1h-kWEIEdqmfMQqVJOcWQ">
        <body>The location where an Artifact is deployed onto a Node. This is typically a 'directory' or 'memory address'.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1h-lWEIEdqmfMQqVJOcWQ" name="executionLocation">
      <eAnnotations xmi:id="_N1h-lmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_N1h-l2EIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1h-mGEIEdqmfMQqVJOcWQ" annotatedElement="_N1h-lWEIEdqmfMQqVJOcWQ">
        <body>The location where a component Artifact executes. This may be a local or remote location.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1h-mWEIEdqmfMQqVJOcWQ" name="deployment" type="_N1OchGEIEdqmfMQqVJOcWQ" association="_N1h-n2EIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N1h-mmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1h-m2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1h-nGEIEdqmfMQqVJOcWQ" annotatedElement="_N1h-mWEIEdqmfMQqVJOcWQ">
        <body>The deployment with which the DeploymentSpecification is associated.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1h-nWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1h-nmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N1h-n2EIEdqmfMQqVJOcWQ" name="A_configuration_deployment" memberEnd="_N1h-gmEIEdqmfMQqVJOcWQ _N1h-mWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N1h-oGEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N1rIYGEIEdqmfMQqVJOcWQ" name="StateMachine">
    <ownedComment xmi:id="_N1rIYWEIEdqmfMQqVJOcWQ" annotatedElement="_N1rIYGEIEdqmfMQqVJOcWQ">
      <body>A state machine owns one or more regions, which in turn own vertices and transitions.

The behaviored classifier context owning a state machine defines which signal and call triggers are defined for the state machine, and which attributes and operations are available in activities of the state machine. Signal triggers and call triggers for the state machine are defined according to the receptions and operations of this classifier.



As a kind of behavior, a state machine may have an associated behavioral feature (specification) and be the method of this behavioral feature. In this case the state machine specifies the behavior of this behavioral feature. The parameters of the state machine in this case match the parameters of the behavioral feature and provide the means for accessing (within the state machine) the behavioral feature parameters.



A state machine without a context classifier may use triggers that are independent of receptions or operations of a classifier, i.e. either just signal triggers or call triggers based upon operation template parameters of the (parameterized) statemachine.

</body>
    </ownedComment>
    <ownedRule xmi:id="_N1rIYmEIEdqmfMQqVJOcWQ" name="classifier_context" constrainedElement="_N1rIYGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rIY2EIEdqmfMQqVJOcWQ" annotatedElement="_N1rIYmEIEdqmfMQqVJOcWQ">
        <body>The classifier context of a state machine cannot be an interface.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rIZGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>context->notEmpty() implies not context.oclIsKindOf(Interface)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N1rIZWEIEdqmfMQqVJOcWQ" name="context_classifier" constrainedElement="_N1rIYGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rIZmEIEdqmfMQqVJOcWQ" annotatedElement="_N1rIZWEIEdqmfMQqVJOcWQ">
        <body>The context classifier of the method state machine of a behavioral feature must be the classifier that owns the behavioral feature.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rIZ2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>specification->notEmpty() implies (context->notEmpty() and specification->featuringClassifier->exists (c | c = context))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N1rIaGEIEdqmfMQqVJOcWQ" name="connection_points" constrainedElement="_N1rIYGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rIaWEIEdqmfMQqVJOcWQ" annotatedElement="_N1rIaGEIEdqmfMQqVJOcWQ">
        <body>The connection points of a state machine are pseudostates of kind entry point or exit point.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rIamEIEdqmfMQqVJOcWQ" language="OCL">
        <body>conectionPoint->forAll (c | c.kind = #entryPoint or c.kind = #exitPoint)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N1rIa2EIEdqmfMQqVJOcWQ" name="method" constrainedElement="_N1rIYGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rIbGEIEdqmfMQqVJOcWQ" annotatedElement="_N1rIa2EIEdqmfMQqVJOcWQ">
        <body>A state machine as the method for a behavioral feature cannot have entry/exit connection points.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rIbWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>specification->notEmpty() implies connectionPoint->isEmpty()</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N1rIbmEIEdqmfMQqVJOcWQ" general="_NqDuQGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N1rIb2EIEdqmfMQqVJOcWQ" name="region" type="_N1-qYGEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_N2RlZGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N1rIcGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1rIcWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1rIcmEIEdqmfMQqVJOcWQ" annotatedElement="_N1rIb2EIEdqmfMQqVJOcWQ">
        <body>The regions owned directly by the state machine.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1rIc2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1rIdGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1rIdWEIEdqmfMQqVJOcWQ" name="connectionPoint" type="_N105z2EIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_N2RlZmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N1rIdmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1rId2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1rIeGEIEdqmfMQqVJOcWQ" annotatedElement="_N1rIdWEIEdqmfMQqVJOcWQ">
        <body>The connection points defined for this state machine. They represent the interface of the state machine when used as part of submachine state.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1rIeWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1rIemEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1rIe2EIEdqmfMQqVJOcWQ" name="extendedStateMachine" type="_N1rIYGEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMb2EIEdqmfMQqVJOcWQ" association="_N2Rlb2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rIfGEIEdqmfMQqVJOcWQ" annotatedElement="_N1rIe2EIEdqmfMQqVJOcWQ">
        <body>The state machines of which this is an extension.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1rIfWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1rIfmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_N1rIf2EIEdqmfMQqVJOcWQ" name="LCA" type="_NimbnWEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_N1rIgmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N1rIgGEIEdqmfMQqVJOcWQ" source="keywords"/>
      <ownedComment xmi:id="_N1rIgWEIEdqmfMQqVJOcWQ" annotatedElement="_N1rIf2EIEdqmfMQqVJOcWQ">
        <body>The operation LCA(s1,s2) returns an orthogonal state or region which is the least common ancestor of states s1 and s2, based on the statemachine containment hierarchy.</body>
      </ownedComment>
      <ownedRule xmi:id="_N1rIgmEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N1rIf2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rIg2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>true</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N1rIhGEIEdqmfMQqVJOcWQ" type="_NimbnWEIEdqmfMQqVJOcWQ" direction="return"/>
      <ownedParameter xmi:id="_N1rIhWEIEdqmfMQqVJOcWQ" name="s1" type="_N1rIm2EIEdqmfMQqVJOcWQ"/>
      <ownedParameter xmi:id="_N1rIhmEIEdqmfMQqVJOcWQ" name="s2" type="_N1rIm2EIEdqmfMQqVJOcWQ"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N1rIh2EIEdqmfMQqVJOcWQ" name="ancestor" isQuery="true" bodyCondition="_N1rIiWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rIiGEIEdqmfMQqVJOcWQ" annotatedElement="_N1rIh2EIEdqmfMQqVJOcWQ">
        <body>The query ancestor(s1, s2) checks whether s2 is an ancestor state of state s1. context StateMachine::ancestor (s1 : State, s2 : State) : Boolean

</body>
      </ownedComment>
      <ownedRule xmi:id="_N1rIiWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N1rIh2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rIimEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if (s2 = s1) then
true
else if (s1.container->isEmpty) then
true
else if (s2.container->isEmpty) then
false
else (ancestor (s1, s2.container))</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N1rIi2EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_N1rIjGEIEdqmfMQqVJOcWQ" name="s1" type="_N1rIm2EIEdqmfMQqVJOcWQ"/>
      <ownedParameter xmi:id="_N1rIjWEIEdqmfMQqVJOcWQ" name="s2" type="_N1rIm2EIEdqmfMQqVJOcWQ"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N1rIjmEIEdqmfMQqVJOcWQ" name="isRedefinitionContextValid" isQuery="true" redefinedOperation="_NiwMe2EIEdqmfMQqVJOcWQ" bodyCondition="_N1rIkGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rIj2EIEdqmfMQqVJOcWQ" annotatedElement="_N1rIjmEIEdqmfMQqVJOcWQ">
        <body>The query isRedefinitionContextValid() specifies whether the redefinition contexts of a statemachine are properly related to the redefinition contexts of the specified statemachine to allow this element to redefine the other. The containing classifier of a redefining statemachine must redefine the containing classifier of the redefined statemachine.</body>
      </ownedComment>
      <ownedRule xmi:id="_N1rIkGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N1rIjmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rIkWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = true</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N1rIkmEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_N1rIk2EIEdqmfMQqVJOcWQ" name="redefined" type="_N1rIYGEIEdqmfMQqVJOcWQ" effect="read"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N1rIlGEIEdqmfMQqVJOcWQ" name="isConsistentWith" isQuery="true" redefinedOperation="_NiwMdWEIEdqmfMQqVJOcWQ" bodyCondition="_N1rIl2EIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N1rIlWEIEdqmfMQqVJOcWQ" source="keywords"/>
      <ownedComment xmi:id="_N1rIlmEIEdqmfMQqVJOcWQ" annotatedElement="_N1rIlGEIEdqmfMQqVJOcWQ">
        <body>The query isConsistentWith() specifies that a redefining state machine is consistent with a redefined state machine provided that the redefining state machine is an extension of the redefined state machine: Regions are inherited and regions can be added, inherited regions can be redefined. In case of multiple redefining state machines, extension implies that the redefining state machine gets orthogonal regions for each of the redefined state machines.</body>
      </ownedComment>
      <ownedRule xmi:id="_N1rIl2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N1rIlGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rImGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = true</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N1rImWEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_N1rImmEIEdqmfMQqVJOcWQ" name="redefinee" type="_NiwMYGEIEdqmfMQqVJOcWQ"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N105YGEIEdqmfMQqVJOcWQ" name="Transition">
    <ownedComment xmi:id="_N105YWEIEdqmfMQqVJOcWQ" annotatedElement="_N105YGEIEdqmfMQqVJOcWQ">
      <body>A transition is a directed relationship between a source vertex and a target vertex. It may be part of a compound transition, which takes the state machine from one state configuration to another, representing the complete response of the state machine to an occurrence of an event of a particular type.</body>
    </ownedComment>
    <ownedRule xmi:id="_N105YmEIEdqmfMQqVJOcWQ" name="fork_segment_guards" constrainedElement="_N105YGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N105Y2EIEdqmfMQqVJOcWQ" annotatedElement="_N105YmEIEdqmfMQqVJOcWQ">
        <body>A fork segment must not have guards or triggers.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N105ZGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>(source.oclIsKindOf(Pseudostate) and source.kind = #fork) implies (guard->isEmpty() and trigger->isEmpty())</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N105ZWEIEdqmfMQqVJOcWQ" name="join_segment_guards" constrainedElement="_N105YGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N105ZmEIEdqmfMQqVJOcWQ" annotatedElement="_N105ZWEIEdqmfMQqVJOcWQ">
        <body>A join segment must not have guards or triggers.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N105Z2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>(target.oclIsKindOf(Pseudostate) and target.kind = #join) implies (guard->isEmpty() and trigger->isEmpty())</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N105aGEIEdqmfMQqVJOcWQ" name="fork_segment_state" constrainedElement="_N105YGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N105aWEIEdqmfMQqVJOcWQ" annotatedElement="_N105aGEIEdqmfMQqVJOcWQ">
        <body>A fork segment must always target a state.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N105amEIEdqmfMQqVJOcWQ" language="OCL">
        <body>(source.oclIsKindOf(Pseudostate) and source.kind = #fork) implies (target.oclIsKindOf(State))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N105a2EIEdqmfMQqVJOcWQ" name="join_segment_state" constrainedElement="_N105YGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N105bGEIEdqmfMQqVJOcWQ" annotatedElement="_N105a2EIEdqmfMQqVJOcWQ">
        <body>A join segment must always originate from a state.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N105bWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>(target.oclIsKindOf(Pseudostate) and target.kind = #join) implies (source.oclIsKindOf(State))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N105bmEIEdqmfMQqVJOcWQ" name="outgoing_pseudostates" constrainedElement="_N105YGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N105b2EIEdqmfMQqVJOcWQ" annotatedElement="_N105bmEIEdqmfMQqVJOcWQ">
        <body>Transitions outgoing pseudostates may not have a trigger.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N105cGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>source.oclIsKindOf(Pseudostate) and
((source.kind &lt;> #junction) and (source.kind &lt;> #join) and (source.kind &lt;> #initial)) implies trigger->isEmpty()
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N105cWEIEdqmfMQqVJOcWQ" name="initial_transition" constrainedElement="_N105YGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N105cmEIEdqmfMQqVJOcWQ" annotatedElement="_N105cWEIEdqmfMQqVJOcWQ">
        <body>An initial transition at the topmost level (region of a statemachine) either has no trigger or it has a trigger with the stereotype create.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N105c2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.source.oclIsKindOf(Pseudostate) implies
(self.source.oclAsType(Pseudostate).kind = #initial) implies
(self.source.container = self.stateMachine.top) implies
((self.trigger->isEmpty) or
(self.trigger.stereotype.name = 'create'))
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N105dGEIEdqmfMQqVJOcWQ" name="signatures_compatible" constrainedElement="_N105YGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N105dWEIEdqmfMQqVJOcWQ" annotatedElement="_N105dGEIEdqmfMQqVJOcWQ">
        <body>In case of more than one trigger, the signatures of these must be compatible in case the parameters of the signal are assigned to local variables/attributes.

</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N105dmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N105d2EIEdqmfMQqVJOcWQ" general="_NiwMYGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N105eWEIEdqmfMQqVJOcWQ" name="kind" type="_N2H0UGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N105emEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_N105e2EIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_N105fGEIEdqmfMQqVJOcWQ" annotatedElement="_N105eWEIEdqmfMQqVJOcWQ">
        <body>Indicates  the precise type of the transition.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N105fWEIEdqmfMQqVJOcWQ" name="container" type="_N1-qYGEIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ" association="_N2H0ZGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N105fmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N105f2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N105gGEIEdqmfMQqVJOcWQ" annotatedElement="_N105fWEIEdqmfMQqVJOcWQ">
        <body>Designates the region that owns this transition.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N105gWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N105gmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N105g2EIEdqmfMQqVJOcWQ" name="source" type="_N105uWEIEdqmfMQqVJOcWQ" association="_N2H0ZmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N105hGEIEdqmfMQqVJOcWQ" annotatedElement="_N105g2EIEdqmfMQqVJOcWQ">
        <body>Designates the originating vertex (state or pseudostate) of the transition.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N105hWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N105hmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N105h2EIEdqmfMQqVJOcWQ" name="target" type="_N105uWEIEdqmfMQqVJOcWQ" association="_N2H0Z2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N105iGEIEdqmfMQqVJOcWQ" annotatedElement="_N105h2EIEdqmfMQqVJOcWQ">
        <body>Designates the target vertex that is reached when the transition is taken.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N105iWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N105imEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N105i2EIEdqmfMQqVJOcWQ" name="redefinedTransition" type="_N105YGEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMb2EIEdqmfMQqVJOcWQ" association="_N2RlW2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N105jGEIEdqmfMQqVJOcWQ" annotatedElement="_N105i2EIEdqmfMQqVJOcWQ">
        <body>The transition that is redefined by this transition.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N105jWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N105jmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N105j2EIEdqmfMQqVJOcWQ" name="guard" type="_NjDHfmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_N2avQGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N105kGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N105kWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N105kmEIEdqmfMQqVJOcWQ" annotatedElement="_N105j2EIEdqmfMQqVJOcWQ">
        <body>A guard is a constraint that provides a fine-grained control over the firing of the transition. The guard is evaluated when an event occurrence is dispatched by the state machine. If the guard is true at that time, the transition may be enabled, otherwise, it is disabled. Guards should be pure expressions without side effects. Guard expressions with side effects are ill formed.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N105k2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N105lGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N105lWEIEdqmfMQqVJOcWQ" name="redefinitionContext" type="_NiTgcGEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" redefinedProperty="_NiwMaWEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMaWEIEdqmfMQqVJOcWQ" association="_N2avT2EIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N105lmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N105l2EIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_N105mGEIEdqmfMQqVJOcWQ" annotatedElement="_N105lWEIEdqmfMQqVJOcWQ">
        <body>References the classifier in which context this element may be redefined.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N105mWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N105mmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N105m2EIEdqmfMQqVJOcWQ" name="effect" type="_NqDuQGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_N2avWWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N105nGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N105nWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N105nmEIEdqmfMQqVJOcWQ" annotatedElement="_N105m2EIEdqmfMQqVJOcWQ">
        <body>Specifies an optional behavior to be performed when the transition fires.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N105n2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N105oGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N105oWEIEdqmfMQqVJOcWQ" name="trigger" type="_NsvO22EIEdqmfMQqVJOcWQ" association="_N2kgQmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N105omEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N105o2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N105pGEIEdqmfMQqVJOcWQ" annotatedElement="_N105oWEIEdqmfMQqVJOcWQ">
        <body>Specifies the triggers that may fire the transition.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N105pWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N105pmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_N105p2EIEdqmfMQqVJOcWQ" name="redefinitionContext" type="_NiTgcGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_N105qWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N105qGEIEdqmfMQqVJOcWQ" annotatedElement="_N105p2EIEdqmfMQqVJOcWQ">
        <body>The redefinition context of a transition is the nearest containing statemachine.</body>
      </ownedComment>
      <ownedRule xmi:id="_N105qWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N105p2EIEdqmfMQqVJOcWQ _N105lWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N105qmEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = let sm = containingStateMachine() in
if sm.context->isEmpty() or sm.general->notEmpty() then
sm
else
sm.context
endif</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N105q2EIEdqmfMQqVJOcWQ" type="_NiTgcGEIEdqmfMQqVJOcWQ" direction="return"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N105rGEIEdqmfMQqVJOcWQ" name="isConsistentWith" isQuery="true" precondition="_N105sGEIEdqmfMQqVJOcWQ" redefinedOperation="_NiwMdWEIEdqmfMQqVJOcWQ" bodyCondition="_N105rmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N105rWEIEdqmfMQqVJOcWQ" annotatedElement="_N105rGEIEdqmfMQqVJOcWQ">
        <body>The query isConsistentWith() specifies that a redefining transition is consistent with a redefined transition provided that the redefining transition has the following relation to the redefined transition: A redefining transition redefines all properties of the corresponding redefined transition, except the source state and the trigger.</body>
      </ownedComment>
      <ownedRule xmi:id="_N105rmEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N105rGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N105r2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = (redefinee.oclIsKindOf(Transition) and

  let trans: Transition = redefinee.oclAsType(Transition) in

    (source() = trans.source() and trigger() = tran.trigger())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_N105sGEIEdqmfMQqVJOcWQ" constrainedElement="_N105rGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N105sWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>redefinee.isRedefinitionContextValid(self)</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N105smEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_N105s2EIEdqmfMQqVJOcWQ" name="redefinee" type="_NiwMYGEIEdqmfMQqVJOcWQ"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N105tGEIEdqmfMQqVJOcWQ" name="containingStateMachine" type="_N1rIYGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_N105tmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N105tWEIEdqmfMQqVJOcWQ" annotatedElement="_N105tGEIEdqmfMQqVJOcWQ">
        <body>The query containingStateMachine() returns the state machine that contains the transition either directly or transitively.</body>
      </ownedComment>
      <ownedRule xmi:id="_N105tmEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N105tGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N105t2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = container.containingStateMachine()</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N105uGEIEdqmfMQqVJOcWQ" type="_N1rIYGEIEdqmfMQqVJOcWQ" direction="return"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N105uWEIEdqmfMQqVJOcWQ" name="Vertex" isAbstract="true">
    <ownedComment xmi:id="_N105umEIEdqmfMQqVJOcWQ" annotatedElement="_N105uWEIEdqmfMQqVJOcWQ">
      <body>A vertex is an abstraction of a node in a state machine graph. In general, it can be the source or destination of any number of transitions.</body>
    </ownedComment>
    <generalization xmi:id="_N105u2EIEdqmfMQqVJOcWQ" general="_NjfzQGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N105vGEIEdqmfMQqVJOcWQ" name="container" type="_N1-qYGEIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ" association="_N2H0YmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N105vWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N105vmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N105v2EIEdqmfMQqVJOcWQ" annotatedElement="_N105vGEIEdqmfMQqVJOcWQ">
        <body>The region that contains this vertex.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N105wGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N105wWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N105wmEIEdqmfMQqVJOcWQ" name="outgoing" type="_N105YGEIEdqmfMQqVJOcWQ" association="_N2H0ZmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N105w2EIEdqmfMQqVJOcWQ" annotatedElement="_N105wmEIEdqmfMQqVJOcWQ">
        <body>Specifies the transitions departing from this vertex.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N105xGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N105xWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N105xmEIEdqmfMQqVJOcWQ" name="incoming" type="_N105YGEIEdqmfMQqVJOcWQ" association="_N2H0Z2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N105x2EIEdqmfMQqVJOcWQ" annotatedElement="_N105xmEIEdqmfMQqVJOcWQ">
        <body>Specifies the transitions entering this vertex.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N105yGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N105yWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_N105ymEIEdqmfMQqVJOcWQ" name="containingStatemachine" type="_N1rIYGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_N105zGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N105y2EIEdqmfMQqVJOcWQ" annotatedElement="_N105ymEIEdqmfMQqVJOcWQ">
        <body>The operation containingStatemachine() returns the state machine in which this Vertex is defined</body>
      </ownedComment>
      <ownedRule xmi:id="_N105zGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N105ymEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N105zWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if not container->isEmpty()
then
-- the container is a region
container.containingStateMachine()
else if (oclIsKindOf(Pseudostate)) then
-- entry or exit point?
if (kind = #entryPoint) or (kind = #exitPoint) then
stateMachine
else if (oclIsKindOf(ConnectionPointReference)) then
state.containingStateMachine() -- no other valid cases possible
endif
</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N105zmEIEdqmfMQqVJOcWQ" type="_N1rIYGEIEdqmfMQqVJOcWQ" direction="return"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N105z2EIEdqmfMQqVJOcWQ" name="Pseudostate">
    <ownedComment xmi:id="_N1050GEIEdqmfMQqVJOcWQ" annotatedElement="_N105z2EIEdqmfMQqVJOcWQ">
      <body>Pseudostates are typically used to connect multiple transitions into more complex state transitions paths. For example, by combining a transition entering a fork pseudostate with a set of transitions exiting the fork pseudostate, we get a compound transition that leads to a set of orthogonal target states.</body>
    </ownedComment>
    <ownedRule xmi:id="_N1050WEIEdqmfMQqVJOcWQ" name="initial_vertex" constrainedElement="_N105z2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1050mEIEdqmfMQqVJOcWQ" annotatedElement="_N1050WEIEdqmfMQqVJOcWQ">
        <body>An initial vertex can have at most one outgoing transition.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N10502EIEdqmfMQqVJOcWQ" language="OCL">
        <body>(self.kind = #initial) implies (self.outgoing->size &lt;= 1)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N1051GEIEdqmfMQqVJOcWQ" name="history_vertices" constrainedElement="_N105z2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1051WEIEdqmfMQqVJOcWQ" annotatedElement="_N1051GEIEdqmfMQqVJOcWQ">
        <body>History vertices can have at most one outgoing transition.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1051mEIEdqmfMQqVJOcWQ" language="OCL">
        <body>((self.kind = #deepHistory) or (self.kind = #shallowHistory)) implies
(self.outgoing->size &lt;= 1)
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N10512EIEdqmfMQqVJOcWQ" name="join_vertex" constrainedElement="_N105z2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1052GEIEdqmfMQqVJOcWQ" annotatedElement="_N10512EIEdqmfMQqVJOcWQ">
        <body>In a complete statemachine, a join vertex must have at least two incoming transitions and exactly one outgoing transition.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1052WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>(self.kind = #join) implies
((self.outgoing->size = 1) and (self.incoming->size >= 2))
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N1052mEIEdqmfMQqVJOcWQ" name="transitions_incoming" constrainedElement="_N105z2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N10522EIEdqmfMQqVJOcWQ" annotatedElement="_N1052mEIEdqmfMQqVJOcWQ">
        <body>All transitions incoming a join vertex must originate in different regions of an orthogonal state.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1053GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>(self.kind = #join) implies
  self.incoming->forAll (t1, t2 | t1&lt;>t2 implies
    (self.stateMachine.LCA(t1.source, t2.source).container.isOrthogonal))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N1053WEIEdqmfMQqVJOcWQ" name="fork_vertex" constrainedElement="_N105z2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1053mEIEdqmfMQqVJOcWQ" annotatedElement="_N1053WEIEdqmfMQqVJOcWQ">
        <body>In a complete statemachine, a fork vertex must have at least two outgoing transitions and exactly one incoming transition.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N10532EIEdqmfMQqVJOcWQ" language="OCL">
        <body>(self.kind = #fork) implies
((self.incoming->size = 1) and (self.outgoing->size >= 2))
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N1054GEIEdqmfMQqVJOcWQ" name="transitions_outgoing" constrainedElement="_N105z2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1054WEIEdqmfMQqVJOcWQ" annotatedElement="_N1054GEIEdqmfMQqVJOcWQ">
        <body>All transitions outgoing a fork vertex must target states in different regions of an orthogonal state.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1054mEIEdqmfMQqVJOcWQ" language="OCL">
        <body>(self.kind = #fork) implies
  self.outgoing->forAll (t1, t2 | t1&lt;>t2 implies
    (self.stateMachine.LCA(t1.target, t2.target).container.isOrthogonal))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N10542EIEdqmfMQqVJOcWQ" name="junction_vertex" constrainedElement="_N105z2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1055GEIEdqmfMQqVJOcWQ" annotatedElement="_N10542EIEdqmfMQqVJOcWQ">
        <body>In a complete statemachine, a junction vertex must have at least one incoming and one outgoing transition.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1055WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>(self.kind = #junction) implies
((self.incoming->size >= 1) and (self.outgoing->size >= 1))
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N1055mEIEdqmfMQqVJOcWQ" name="choice_vertex" constrainedElement="_N105z2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N10552EIEdqmfMQqVJOcWQ" annotatedElement="_N1055mEIEdqmfMQqVJOcWQ">
        <body>In a complete statemachine, a choice vertex must have at least one incoming and one outgoing transition.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1056GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>(self.kind = #choice) implies
((self.incoming->size >= 1) and (self.outgoing->size >= 1))
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N1056WEIEdqmfMQqVJOcWQ" name="outgoing_from_initial" constrainedElement="_N105z2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1056mEIEdqmfMQqVJOcWQ" annotatedElement="_N1056WEIEdqmfMQqVJOcWQ">
        <body>The outgoing transition from and initial vertex may have a behavior, but not a trigger or a guard.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N10562EIEdqmfMQqVJOcWQ" language="OCL">
        <body>(self.kind = #initial) implies (self.outgoing.guard->isEmpty()

  and self.outgoing.trigger->isEmpty())</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N1057GEIEdqmfMQqVJOcWQ" general="_N105uWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N1057WEIEdqmfMQqVJOcWQ" name="kind" type="_N106KWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N1057mEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_N10572EIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1058GEIEdqmfMQqVJOcWQ" annotatedElement="_N1057WEIEdqmfMQqVJOcWQ">
        <body>Determines the precise type of the Pseudostate and can be one of: entryPoint, exitPoint, initial, deepHistory, shallowHistory, join, fork, junction, terminate or choice.</body>
      </ownedComment>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1058WEIEdqmfMQqVJOcWQ" name="stateMachine" type="_N1rIYGEIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ" association="_N2RlZmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N1058mEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N10582EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1059GEIEdqmfMQqVJOcWQ" annotatedElement="_N1058WEIEdqmfMQqVJOcWQ">
        <body>The StateMachine in which this Pseudostate is defined. This only applies to Pseudostates of the kind entryPoint or exitPoint.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1059WEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1059mEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N10592EIEdqmfMQqVJOcWQ" name="state" type="_N1rIm2EIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_N2kgQGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N105-GEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N105-WEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N105-mEIEdqmfMQqVJOcWQ" annotatedElement="_N10592EIEdqmfMQqVJOcWQ">
        <body>The State that owns the pseudostate. If a Pseudostat is owned by a State, then it cannot also be owned by a StateMachine.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N105-2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N105_GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N105_WEIEdqmfMQqVJOcWQ" name="FinalState">
    <ownedComment xmi:id="_N105_mEIEdqmfMQqVJOcWQ" annotatedElement="_N105_WEIEdqmfMQqVJOcWQ">
      <body>A special kind of state signifying that the enclosing region is completed. If the enclosing region is directly contained in a state machine and all other regions in the state machine also are completed, then it means that the entire state machine is completed.</body>
    </ownedComment>
    <ownedRule xmi:id="_N105_2EIEdqmfMQqVJOcWQ" name="no_outgoing_transitions" constrainedElement="_N105_WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N106AGEIEdqmfMQqVJOcWQ" annotatedElement="_N105_2EIEdqmfMQqVJOcWQ">
        <body>A final state cannot have any outgoing transitions.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N106AWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.outgoing->size() = 0</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N106AmEIEdqmfMQqVJOcWQ" name="no_regions" constrainedElement="_N105_WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N106A2EIEdqmfMQqVJOcWQ" annotatedElement="_N106AmEIEdqmfMQqVJOcWQ">
        <body>A final state cannot have regions.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N106BGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.region->size() = 0</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N106BWEIEdqmfMQqVJOcWQ" name="cannot_reference_submachine" constrainedElement="_N105_WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N106BmEIEdqmfMQqVJOcWQ" annotatedElement="_N106BWEIEdqmfMQqVJOcWQ">
        <body>A final state cannot reference a submachine.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N106B2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.submachine->isEmpty()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N106CGEIEdqmfMQqVJOcWQ" name="no_entry_behavior" constrainedElement="_N105_WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N106CWEIEdqmfMQqVJOcWQ" annotatedElement="_N106CGEIEdqmfMQqVJOcWQ">
        <body>A final state has no entry behavior.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N106CmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.entry->isEmpty()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N106C2EIEdqmfMQqVJOcWQ" name="no_exit behavior" constrainedElement="_N105_WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N106DGEIEdqmfMQqVJOcWQ" annotatedElement="_N106C2EIEdqmfMQqVJOcWQ">
        <body>A final state has no exit behavior.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N106DWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.exit->isEmpty()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N106DmEIEdqmfMQqVJOcWQ" name="no_state_behavior" constrainedElement="_N105_WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N106D2EIEdqmfMQqVJOcWQ" annotatedElement="_N106DmEIEdqmfMQqVJOcWQ">
        <body>A final state has no state (doActivity) behavior.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N106EGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.doActivity->isEmpty()</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N106EWEIEdqmfMQqVJOcWQ" general="_N1rIm2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N106EmEIEdqmfMQqVJOcWQ" name="ConnectionPointReference">
    <ownedComment xmi:id="_N106E2EIEdqmfMQqVJOcWQ" annotatedElement="_N106EmEIEdqmfMQqVJOcWQ">
      <body>Connection point references of a submachine state can be used as sources/targets of transitions. They represent entries into or exits out of the submachine state machine referenced by the submachine state.</body>
    </ownedComment>
    <ownedRule xmi:id="_N106FGEIEdqmfMQqVJOcWQ" name="entry_pseudostates" constrainedElement="_N106EmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N106FWEIEdqmfMQqVJOcWQ" annotatedElement="_N106FGEIEdqmfMQqVJOcWQ">
        <body>The entry Pseudostates must be Pseudostates with kind entryPoint.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N106FmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>entry->notEmpty() implies entry->forAll(e | e.kind = #entryPoint)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N106F2EIEdqmfMQqVJOcWQ" name="exit_pseudostates" constrainedElement="_N106EmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N106GGEIEdqmfMQqVJOcWQ" annotatedElement="_N106F2EIEdqmfMQqVJOcWQ">
        <body>The exit Pseudostates must be Pseudostates with kind exitPoint.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N106GWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>exit->notEmpty() implies exit->forAll(e | e.kind = #exitPoint)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N106GmEIEdqmfMQqVJOcWQ" general="_N105uWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N106G2EIEdqmfMQqVJOcWQ" name="entry" type="_N105z2EIEdqmfMQqVJOcWQ" association="_N2RlUGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N106HGEIEdqmfMQqVJOcWQ" annotatedElement="_N106G2EIEdqmfMQqVJOcWQ">
        <body>The entryPoint kind pseudo states corresponding to this connection point.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N106HWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N106HmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N106H2EIEdqmfMQqVJOcWQ" name="state" type="_N1rIm2EIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ" association="_N2RlVGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N106IGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N106IWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N106ImEIEdqmfMQqVJOcWQ" annotatedElement="_N106H2EIEdqmfMQqVJOcWQ">
        <body>The State in which the connection point refreshens are defined.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N106I2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N106JGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N106JWEIEdqmfMQqVJOcWQ" name="exit" type="_N105z2EIEdqmfMQqVJOcWQ" association="_N2RlYGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N106JmEIEdqmfMQqVJOcWQ" annotatedElement="_N106JWEIEdqmfMQqVJOcWQ">
        <body>The exitPoints kind pseudo states corresponding to this connection point.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N106J2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N106KGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Enumeration" xmi:id="_N106KWEIEdqmfMQqVJOcWQ" name="PseudostateKind">
    <ownedComment xmi:id="_N106KmEIEdqmfMQqVJOcWQ" annotatedElement="_N106KWEIEdqmfMQqVJOcWQ">
      <body>PseudoStateKind is an enumeration of the following literal values:
 initial
 deepHistory
 shallowHistory
 join
 fork
 junction
 choice
 entryPoint
 exitPoint
 terminate
</body>
    </ownedComment>
    <ownedLiteral xmi:id="_N106K2EIEdqmfMQqVJOcWQ" name="initial">
      <ownedComment xmi:id="_N106LGEIEdqmfMQqVJOcWQ" annotatedElement="_N106K2EIEdqmfMQqVJOcWQ">
        <body>An initial pseudostate represents a default vertex that is the source for a single transition to the default state of a composite state. There can be at most one initial vertex in a region. The outgoing transition from the initial vertex may have a behavior, but not a trigger or guard.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_N106LWEIEdqmfMQqVJOcWQ" name="deepHistory">
      <ownedComment xmi:id="_N106LmEIEdqmfMQqVJOcWQ" annotatedElement="_N106LWEIEdqmfMQqVJOcWQ">
        <body>DeepHistory represents the most recent active configuration of the composite state that directly contains this pseudostate; e.g. the state configuration that was active when the composite state was last exited. A composite state can have at most one deep history vertex. At most one transition may originate from the history connector to the default deep history state. This transition is taken in case the composite state had never been active before. Entry actions of states entered on the path to the state represented by a deep history are performed.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_N106L2EIEdqmfMQqVJOcWQ" name="shallowHistory">
      <ownedComment xmi:id="_N106MGEIEdqmfMQqVJOcWQ" annotatedElement="_N106L2EIEdqmfMQqVJOcWQ">
        <body>ShallowHistory represents the most recent active substate of its containing state (but not the substates of that substate). A composite state can have at most one shallow history vertex. A transition coming into the shallow history vertex is equivalent to a transition coming into the most recent active substate of a state. At most one transition may originate from the history connector to the default shallow history state. This transition is taken in case the composite state had never been active before. Entry actions of states entered on the path to the state represented by a shallow history are performed.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_N106MWEIEdqmfMQqVJOcWQ" name="join">
      <ownedComment xmi:id="_N106MmEIEdqmfMQqVJOcWQ" annotatedElement="_N106MWEIEdqmfMQqVJOcWQ">
        <body>Join vertices serve to merge several transitions emanating from source vertices in different orthogonal regions. The transitions entering a join vertex cannot have guards or triggers.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_N106M2EIEdqmfMQqVJOcWQ" name="fork">
      <ownedComment xmi:id="_N106NGEIEdqmfMQqVJOcWQ" annotatedElement="_N106M2EIEdqmfMQqVJOcWQ">
        <body>Fork vertices serve to split an incoming transition into two or more transitions terminating on orthogonal target vertices

(i.e. vertices in different regions of a composite state). The segments outgoing from a fork vertex must not have guards or triggers.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_N106NWEIEdqmfMQqVJOcWQ" name="junction">
      <ownedComment xmi:id="_N106NmEIEdqmfMQqVJOcWQ" annotatedElement="_N106NWEIEdqmfMQqVJOcWQ">
        <body>Junction vertices are semantic-free vertices that are used to chain together multiple transitions. They are used to construct compound transition paths between states. For example, a junction can be used to converge multiple incoming transitions into a single outgoing transition representing a shared transition path (this is known as an merge). Conversely, they can be used to split an incoming transition into multiple outgoing transition segments with different guard conditions. This realizes a static conditional branch. (In the latter case, outgoing transitions whose guard conditions evaluate to false are disabled. A predefined guard denoted else may be defined for at most one outgoing transition. This transition is enabled if all the guards labeling the other transitions are false.) Static conditional branches are distinct from dynamic conditional branches that are realized by choice vertices (described below).</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_N106N2EIEdqmfMQqVJOcWQ" name="choice">
      <ownedComment xmi:id="_N106OGEIEdqmfMQqVJOcWQ" annotatedElement="_N106N2EIEdqmfMQqVJOcWQ">
        <body>Choice vertices which, when reached, result in the dynamic evaluation of the guards of the triggers of its outgoing transitions. This realizes a dynamic conditional branch. It allows splitting of transitions into multiple outgoing paths such that the decision on which path to take may be a function of the results of prior actions performed in the same run-tocompletion step. If more than one of the guards evaluates to true, an arbitrary one is selected. If none of the guards evaluates to true, then the model is considered ill-formed. (To avoid this, it is recommended to define one outgoing transition with the predefined else guard for every choice vertex.) Choice vertices should be distinguished from static branch points that are based on junction points (described above).</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_N106OWEIEdqmfMQqVJOcWQ" name="entryPoint">
      <ownedComment xmi:id="_N106OmEIEdqmfMQqVJOcWQ" annotatedElement="_N106OWEIEdqmfMQqVJOcWQ">
        <body>An entry point pseudostate is an entry point of a state machine or composite state. In each region of the state machine or composite state it has a single transition to a vertex within the same region.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_N106O2EIEdqmfMQqVJOcWQ" name="exitPoint">
      <ownedComment xmi:id="_N106PGEIEdqmfMQqVJOcWQ" annotatedElement="_N106O2EIEdqmfMQqVJOcWQ">
        <body>An exit point pseudostate is an exit point of a state machine or composite state. Entering an exit point within any region of the composite state or state machine referenced by a submachine state implies the exit of this composite state or submachine state and the triggering of the transition that has this exit point as source in the state machine enclosing the submachine or composite state.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_N106PWEIEdqmfMQqVJOcWQ" name="terminate">
      <ownedComment xmi:id="_N106PmEIEdqmfMQqVJOcWQ" annotatedElement="_N106PWEIEdqmfMQqVJOcWQ">
        <body>Entering a terminate pseudostate implies that the execution of this state machine by means of its context object is terminated. The state machine does not exit any states nor does it perform any exit actions other than those associated with the transition leading to the terminate pseudostate. Entering a terminate pseudostate is equivalent to invoking a DestroyObjectAction.</body>
      </ownedComment>
    </ownedLiteral>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N1-qYGEIEdqmfMQqVJOcWQ" name="Region">
    <ownedComment xmi:id="_N1-qYWEIEdqmfMQqVJOcWQ" annotatedElement="_N1-qYGEIEdqmfMQqVJOcWQ">
      <body>A region is an orthogonal part of either a composite state or a state machine. It contains states and transitions.</body>
    </ownedComment>
    <ownedRule xmi:id="_N1-qYmEIEdqmfMQqVJOcWQ" name="initial_vertex" constrainedElement="_N1-qYGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1-qY2EIEdqmfMQqVJOcWQ" annotatedElement="_N1-qYmEIEdqmfMQqVJOcWQ">
        <body>A region can have at most one initial vertex</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1-qZGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.subvertex->select (v | v.oclIsKindOf(Pseudostate))->
select(p : Pseudostate | p.kind = #initial)->size() &lt;= 1
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N1-qZWEIEdqmfMQqVJOcWQ" name="deep_history_vertex" constrainedElement="_N1-qYGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1-qZmEIEdqmfMQqVJOcWQ" annotatedElement="_N1-qZWEIEdqmfMQqVJOcWQ">
        <body>A region can have at most one deep history vertex</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1-qZ2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.subvertex->select (v | v.oclIsKindOf(Pseudostate))->
select(p : Pseudostate | p.kind = #deepHistory)->size() &lt;= 1
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N1-qaGEIEdqmfMQqVJOcWQ" name="shallow_history_vertex" constrainedElement="_N1-qYGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1-qaWEIEdqmfMQqVJOcWQ" annotatedElement="_N1-qaGEIEdqmfMQqVJOcWQ">
        <body>A region can have at most one shallow history vertex</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1-qamEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.subvertex->select(v | v.oclIsKindOf(Pseudostate))->
select(p : Pseudostate | p.kind = #shallowHistory)->size() &lt;= 1
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N1-qa2EIEdqmfMQqVJOcWQ" name="owned" constrainedElement="_N1-qYGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1-qbGEIEdqmfMQqVJOcWQ" annotatedElement="_N1-qa2EIEdqmfMQqVJOcWQ">
        <body>If a Region is owned by a StateMachine, then it cannot also be owned by a State and vice versa.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1-qbWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>(stateMachine->notEmpty() implies state->isEmpty()) and (state->notEmpty() implies stateMachine->isEmpty())</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N1-qbmEIEdqmfMQqVJOcWQ" general="_NiwMYGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N1-qb2EIEdqmfMQqVJOcWQ" general="_NimbnWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N1-qcGEIEdqmfMQqVJOcWQ" name="subvertex" type="_N105uWEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_N2H0YmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N1-qcWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1-qcmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1-qc2EIEdqmfMQqVJOcWQ" annotatedElement="_N1-qcGEIEdqmfMQqVJOcWQ">
        <body>The set of vertices that are owned by this region.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1-qdGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1-qdWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1-qdmEIEdqmfMQqVJOcWQ" name="transition" type="_N105YGEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_N2H0ZGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N1-qd2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1-qeGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1-qeWEIEdqmfMQqVJOcWQ" annotatedElement="_N1-qdmEIEdqmfMQqVJOcWQ">
        <body>The set of transitions owned by the region. Note that internal transitions are owned by a region, but applies to the source state.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1-qemEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1-qe2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1-qfGEIEdqmfMQqVJOcWQ" name="stateMachine" type="_N1rIYGEIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ" association="_N2RlZGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N1-qfWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1-qfmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1-qf2EIEdqmfMQqVJOcWQ" annotatedElement="_N1-qfGEIEdqmfMQqVJOcWQ">
        <body>The StateMachine that owns the Region. If a Region is owned by a StateMachine, then it cannot also be owned by a State.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1-qgGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1-qgWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1-qgmEIEdqmfMQqVJOcWQ" name="state" type="_N1rIm2EIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ" association="_N2RlaGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N1-qg2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1-qhGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1-qhWEIEdqmfMQqVJOcWQ" annotatedElement="_N1-qgmEIEdqmfMQqVJOcWQ">
        <body>The State that owns the Region. If a Region is owned by a State, then it cannot also be owned by a StateMachine.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1-qhmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1-qh2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1-qiGEIEdqmfMQqVJOcWQ" name="extendedRegion" type="_N1-qYGEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMb2EIEdqmfMQqVJOcWQ" association="_N2RlamEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1-qiWEIEdqmfMQqVJOcWQ" annotatedElement="_N1-qiGEIEdqmfMQqVJOcWQ">
        <body>The region of which this region is an extension.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1-qimEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1-qi2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1-qjGEIEdqmfMQqVJOcWQ" name="redefinitionContext" type="_NiTgcGEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" redefinedProperty="_NiwMaWEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMaWEIEdqmfMQqVJOcWQ" association="_N2avRWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N1-qjWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1-qjmEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1-qj2EIEdqmfMQqVJOcWQ" annotatedElement="_N1-qjGEIEdqmfMQqVJOcWQ">
        <body>References the classifier in which context this element may be redefined.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1-qkGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1-qkWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_N1-qkmEIEdqmfMQqVJOcWQ" name="redefinitionContext" type="_NiTgcGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_N1-qlGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1-qk2EIEdqmfMQqVJOcWQ" annotatedElement="_N1-qkmEIEdqmfMQqVJOcWQ">
        <body>The redefinition context of a region is the nearest containing statemachine</body>
      </ownedComment>
      <ownedRule xmi:id="_N1-qlGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N1-qkmEIEdqmfMQqVJOcWQ _N1-qjGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1-qlWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = let sm = containingStateMachine() in
if sm.context->isEmpty() or sm.general->notEmpty() then
sm
else
sm.context
endif</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N1-qlmEIEdqmfMQqVJOcWQ" type="_NiTgcGEIEdqmfMQqVJOcWQ" direction="return"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N1-ql2EIEdqmfMQqVJOcWQ" name="isRedefinitionContextValid" isQuery="true" redefinedOperation="_NiwMe2EIEdqmfMQqVJOcWQ" bodyCondition="_N1-qmWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1-qmGEIEdqmfMQqVJOcWQ" annotatedElement="_N1-ql2EIEdqmfMQqVJOcWQ">
        <body>The query isRedefinitionContextValid() specifies whether the redefinition contexts of a region are properly related to the redefinition contexts of the specified region to allow this element to redefine the other. The containing statemachine/state of a redefining region must redefine the containing statemachine/state of the redefined region.</body>
      </ownedComment>
      <ownedRule xmi:id="_N1-qmWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N1-ql2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1-qmmEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = true</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N1-qm2EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_N1-qnGEIEdqmfMQqVJOcWQ" name="redefined" type="_N1-qYGEIEdqmfMQqVJOcWQ" effect="read"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N1-qnWEIEdqmfMQqVJOcWQ" name="isConsistentWith" isQuery="true" redefinedOperation="_NiwMdWEIEdqmfMQqVJOcWQ" bodyCondition="_N1-qn2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1-qnmEIEdqmfMQqVJOcWQ" annotatedElement="_N1-qnWEIEdqmfMQqVJOcWQ">
        <body>The query isConsistentWith() specifies that a redefining region is consistent with a redefined region provided that the redefining region is an extension of the redefined region, i.e. it adds vertices and transitions and it redefines states and transitions of the redefined region.</body>
      </ownedComment>
      <ownedRule xmi:id="_N1-qn2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N1-qnWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1-qoGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = true</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N1-qoWEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_N1-qomEIEdqmfMQqVJOcWQ" name="redefinee" type="_NiwMYGEIEdqmfMQqVJOcWQ"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N1-qo2EIEdqmfMQqVJOcWQ" name="containingStateMachine" type="_N1rIYGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_N1-qpWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1-qpGEIEdqmfMQqVJOcWQ" annotatedElement="_N1-qo2EIEdqmfMQqVJOcWQ">
        <body>The operation containingStateMachine() returns the sate machine in which this Region is defined</body>
      </ownedComment>
      <ownedRule xmi:id="_N1-qpWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N1-qo2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1-qpmEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if stateMachine->isEmpty() 
then
state.containingStateMachine()
else
stateMachine
endif</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N1-qp2EIEdqmfMQqVJOcWQ" type="_N1rIYGEIEdqmfMQqVJOcWQ" direction="return"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Enumeration" xmi:id="_N2H0UGEIEdqmfMQqVJOcWQ" name="TransitionKind">
    <ownedComment xmi:id="_N2H0UWEIEdqmfMQqVJOcWQ" annotatedElement="_N2H0UGEIEdqmfMQqVJOcWQ">
      <body>TransitionKind is an enumeration of the following literal values:
 external
 internal
 local
</body>
    </ownedComment>
    <ownedRule xmi:id="_N2H0UmEIEdqmfMQqVJOcWQ" name="state_is_local" constrainedElement="_N2H0UGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N2H0U2EIEdqmfMQqVJOcWQ" annotatedElement="_N2H0UmEIEdqmfMQqVJOcWQ">
        <body>The source state of a transition with transition kind local must be a composite state.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N2H0VGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>kind=#local implies owner.source.isComposite</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N2H0VWEIEdqmfMQqVJOcWQ" name="state_is_external" constrainedElement="_N2H0UGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N2H0VmEIEdqmfMQqVJOcWQ" annotatedElement="_N2H0VWEIEdqmfMQqVJOcWQ">
        <body>The source state of a transition with transition kind external must be a composite state.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N2H0V2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>kind=#external implies owner.source.isComposite</body>
      </specification>
    </ownedRule>
    <ownedLiteral xmi:id="_N2H0WGEIEdqmfMQqVJOcWQ" name="internal">
      <ownedComment xmi:id="_N2H0WWEIEdqmfMQqVJOcWQ" annotatedElement="_N2H0WGEIEdqmfMQqVJOcWQ">
        <body>kind=internal implies that the transition, if triggered, occurs without exiting or entering the source state. Thus, it does not cause a state change. This means that the entry or exit condition of the source state will not be invoked. An internal transition can be taken even if the state machine is in one or more regions nested within this state.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_N2H0WmEIEdqmfMQqVJOcWQ" name="local">
      <ownedComment xmi:id="_N2H0W2EIEdqmfMQqVJOcWQ" annotatedElement="_N2H0WmEIEdqmfMQqVJOcWQ">
        <body>kind=local implies that the transition, if triggered, will not exit the composite (source) state, but it will apply to any state within the composite state, and these will be exited and entered.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_N2H0XGEIEdqmfMQqVJOcWQ" name="external">
      <ownedComment xmi:id="_N2H0XWEIEdqmfMQqVJOcWQ" annotatedElement="_N2H0XGEIEdqmfMQqVJOcWQ">
        <body>kind=external implies that the transition, if triggered, will exit the composite (source) state.</body>
      </ownedComment>
    </ownedLiteral>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NsvPAWEIEdqmfMQqVJOcWQ" name="TimeEvent">
    <ownedComment xmi:id="_NsvPAmEIEdqmfMQqVJOcWQ" annotatedElement="_NsvPAWEIEdqmfMQqVJOcWQ">
      <body>A time event specifies a point in time by an expression. The expression might be absolute or might be relative to some other point in time.</body>
    </ownedComment>
    <ownedComment xmi:id="_N2H0XmEIEdqmfMQqVJOcWQ" annotatedElement="_NsvPAWEIEdqmfMQqVJOcWQ">
      <body>Extends TimeEvent to be defined relative to entering the current state of the executing state machine.</body>
    </ownedComment>
    <ownedRule xmi:id="_N2H0X2EIEdqmfMQqVJOcWQ" name="starting_time" constrainedElement="_NsvPAWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N2H0YGEIEdqmfMQqVJOcWQ" annotatedElement="_N2H0X2EIEdqmfMQqVJOcWQ">
        <body>The starting time for a relative time event may only be omitted for a time event that is the trigger of a state machine.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N2H0YWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NsvPA2EIEdqmfMQqVJOcWQ" general="_Ns4YyWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NsvPBGEIEdqmfMQqVJOcWQ" name="isRelative">
      <eAnnotations xmi:id="_NsvPBWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NsvPBmEIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NsvPB2EIEdqmfMQqVJOcWQ" annotatedElement="_NsvPBGEIEdqmfMQqVJOcWQ">
        <body>Specifies whether it is relative or absolute time.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NsvPCGEIEdqmfMQqVJOcWQ" name="when" type="_NiwMlmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NtCJ2GEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NsvPCWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NsvPCmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NsvPC2EIEdqmfMQqVJOcWQ" annotatedElement="_NsvPCGEIEdqmfMQqVJOcWQ">
        <body>Specifies the corresponding time deadline.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NurIlGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NurIlWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2H0YmEIEdqmfMQqVJOcWQ" name="A_container_subvertex" memberEnd="_N105vGEIEdqmfMQqVJOcWQ _N1-qcGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2H0Y2EIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2H0ZGEIEdqmfMQqVJOcWQ" name="A_container_transition" memberEnd="_N105fWEIEdqmfMQqVJOcWQ _N1-qdmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2H0ZWEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2H0ZmEIEdqmfMQqVJOcWQ" name="A_outgoing_source" memberEnd="_N105g2EIEdqmfMQqVJOcWQ _N105wmEIEdqmfMQqVJOcWQ"/>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2H0Z2EIEdqmfMQqVJOcWQ" name="A_incoming_target" memberEnd="_N105h2EIEdqmfMQqVJOcWQ _N105xmEIEdqmfMQqVJOcWQ"/>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2H0aGEIEdqmfMQqVJOcWQ" name="A_submachineState_submachine" memberEnd="_N1rIwmEIEdqmfMQqVJOcWQ _N2H0a2EIEdqmfMQqVJOcWQ">
    <ownedRule xmi:id="_N2H0aWEIEdqmfMQqVJOcWQ" constrainedElement="_N2H0aGEIEdqmfMQqVJOcWQ">
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N2H0amEIEdqmfMQqVJOcWQ" language="OCL">
        <body>substate kind = stub</body>
      </specification>
    </ownedRule>
    <ownedEnd xmi:id="_N2H0a2EIEdqmfMQqVJOcWQ" name="submachineState" type="_N1rIm2EIEdqmfMQqVJOcWQ" association="_N2H0aGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2H0bGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2H0bWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2RlUGEIEdqmfMQqVJOcWQ" name="A_entry_connectionPointReference" memberEnd="_N106G2EIEdqmfMQqVJOcWQ _N2RlUWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N2RlUWEIEdqmfMQqVJOcWQ" type="_N106EmEIEdqmfMQqVJOcWQ" association="_N2RlUGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2RlUmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2RlU2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2RlVGEIEdqmfMQqVJOcWQ" name="A_state_connection" memberEnd="_N106H2EIEdqmfMQqVJOcWQ _N1rIxmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2RlVWEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2RlVmEIEdqmfMQqVJOcWQ" name="A_redefinedState_state" memberEnd="_N1rIzGEIEdqmfMQqVJOcWQ _N2RlWGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2RlV2EIEdqmfMQqVJOcWQ" general="_NkPaLGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N2RlWGEIEdqmfMQqVJOcWQ" type="_N1rIm2EIEdqmfMQqVJOcWQ" redefinedProperty="_NkPaLWEIEdqmfMQqVJOcWQ" association="_N2RlVmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2RlWWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2RlWmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2RlW2EIEdqmfMQqVJOcWQ" name="A_redefinedTransition_transition" memberEnd="_N2RlXWEIEdqmfMQqVJOcWQ _N105i2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2RlXGEIEdqmfMQqVJOcWQ" general="_NkPaLGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N2RlXWEIEdqmfMQqVJOcWQ" type="_N105YGEIEdqmfMQqVJOcWQ" redefinedProperty="_NkPaLWEIEdqmfMQqVJOcWQ" association="_N2RlW2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2RlXmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2RlX2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2RlYGEIEdqmfMQqVJOcWQ" name="A_exit_connectionPointReference" memberEnd="_N2RlYWEIEdqmfMQqVJOcWQ _N106JWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N2RlYWEIEdqmfMQqVJOcWQ" type="_N106EmEIEdqmfMQqVJOcWQ" association="_N2RlYGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2RlYmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2RlY2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2RlZGEIEdqmfMQqVJOcWQ" name="A_region_stateMachine" memberEnd="_N1rIb2EIEdqmfMQqVJOcWQ _N1-qfGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2RlZWEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2RlZmEIEdqmfMQqVJOcWQ" name="A_connectionPoint_stateMachine" memberEnd="_N1rIdWEIEdqmfMQqVJOcWQ _N1058WEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2RlZ2EIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2RlaGEIEdqmfMQqVJOcWQ" name="A_region_state" memberEnd="_N1rI0GEIEdqmfMQqVJOcWQ _N1-qgmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2RlaWEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2RlamEIEdqmfMQqVJOcWQ" name="A_region_extendedRegion" memberEnd="_N2RlbGEIEdqmfMQqVJOcWQ _N1-qiGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2Rla2EIEdqmfMQqVJOcWQ" general="_NkPaLGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N2RlbGEIEdqmfMQqVJOcWQ" type="_N1-qYGEIEdqmfMQqVJOcWQ" redefinedProperty="_NkPaLWEIEdqmfMQqVJOcWQ" association="_N2RlamEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2RlbWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2RlbmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2Rlb2EIEdqmfMQqVJOcWQ" name="A_stateMachine_extendedStateMachine" memberEnd="_N2RlcWEIEdqmfMQqVJOcWQ _N1rIe2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2RlcGEIEdqmfMQqVJOcWQ" general="_NkPaLGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N2RlcWEIEdqmfMQqVJOcWQ" type="_N1rIYGEIEdqmfMQqVJOcWQ" redefinedProperty="_NkPaLWEIEdqmfMQqVJOcWQ" association="_N2Rlb2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2RlcmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2Rlc2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2avQGEIEdqmfMQqVJOcWQ" name="A_guard_transition" memberEnd="_N105j2EIEdqmfMQqVJOcWQ _N2avQmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2avQWEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N2avQmEIEdqmfMQqVJOcWQ" type="_N105YGEIEdqmfMQqVJOcWQ" association="_N2avQGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2avQ2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2avRGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2avRWEIEdqmfMQqVJOcWQ" name="A_redefinitionContext_region" memberEnd="_N1-qjGEIEdqmfMQqVJOcWQ _N2avR2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2avRmEIEdqmfMQqVJOcWQ" general="_NkPaKmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N2avR2EIEdqmfMQqVJOcWQ" type="_N1-qYGEIEdqmfMQqVJOcWQ" association="_N2avRWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2avSGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2avSWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2avSmEIEdqmfMQqVJOcWQ" name="A_state_redefinitionContext" isDerived="true" memberEnd="_N2avTGEIEdqmfMQqVJOcWQ _N1rI1mEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2avS2EIEdqmfMQqVJOcWQ" general="_NkPaKmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N2avTGEIEdqmfMQqVJOcWQ" type="_N1rIm2EIEdqmfMQqVJOcWQ" association="_N2avSmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2avTWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2avTmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2avT2EIEdqmfMQqVJOcWQ" name="A_transition_redefinitionContext" memberEnd="_N2avUWEIEdqmfMQqVJOcWQ _N105lWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2avUGEIEdqmfMQqVJOcWQ" general="_NkPaKmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N2avUWEIEdqmfMQqVJOcWQ" type="_N105YGEIEdqmfMQqVJOcWQ" association="_N2avT2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2avUmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2avU2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2avVGEIEdqmfMQqVJOcWQ" name="A_stateInvariant_owningState" memberEnd="_N2avVmEIEdqmfMQqVJOcWQ _N1rI3GEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2avVWEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N2avVmEIEdqmfMQqVJOcWQ" name="owningState" type="_N1rIm2EIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_N2avVGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2avV2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2avWGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2avWWEIEdqmfMQqVJOcWQ" name="A_effect_transition" memberEnd="_N105m2EIEdqmfMQqVJOcWQ _N2avW2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2avWmEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N2avW2EIEdqmfMQqVJOcWQ" type="_N105YGEIEdqmfMQqVJOcWQ" association="_N2avWWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2avXGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2avXWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2avXmEIEdqmfMQqVJOcWQ" name="A_entry_state" memberEnd="_N1rI4mEIEdqmfMQqVJOcWQ _N2avYGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2avX2EIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N2avYGEIEdqmfMQqVJOcWQ" type="_N1rIm2EIEdqmfMQqVJOcWQ" association="_N2avXmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2avYWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2avYmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2avY2EIEdqmfMQqVJOcWQ" name="A_exit_state" memberEnd="_N1rI6GEIEdqmfMQqVJOcWQ _N2avZWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2avZGEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N2avZWEIEdqmfMQqVJOcWQ" type="_N1rIm2EIEdqmfMQqVJOcWQ" association="_N2avY2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2avZmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2avZ2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2avaGEIEdqmfMQqVJOcWQ" name="A_doActivity_state" memberEnd="_N1rI7mEIEdqmfMQqVJOcWQ _N2avamEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2avaWEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N2avamEIEdqmfMQqVJOcWQ" type="_N1rIm2EIEdqmfMQqVJOcWQ" association="_N2avaGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2ava2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2avbGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2kgQGEIEdqmfMQqVJOcWQ" name="A_connectionPoint_state" memberEnd="_N1rI9GEIEdqmfMQqVJOcWQ _N10592EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2kgQWEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2kgQmEIEdqmfMQqVJOcWQ" name="A_trigger_transition" memberEnd="_N2kgQ2EIEdqmfMQqVJOcWQ _N105oWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N2kgQ2EIEdqmfMQqVJOcWQ" type="_N105YGEIEdqmfMQqVJOcWQ" association="_N2kgQmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2kgRGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2kgRWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2kgRmEIEdqmfMQqVJOcWQ" name="A_deferrableTrigger_state" memberEnd="_N2kgR2EIEdqmfMQqVJOcWQ _N1rI-mEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N2kgR2EIEdqmfMQqVJOcWQ" type="_N1rIm2EIEdqmfMQqVJOcWQ" association="_N2kgRmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2kgSGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2kgSWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N2kgSmEIEdqmfMQqVJOcWQ" name="ProtocolConformance">
    <ownedComment xmi:id="_N2kgS2EIEdqmfMQqVJOcWQ" annotatedElement="_N2kgSmEIEdqmfMQqVJOcWQ">
      <body>Protocol state machines can be redefined into more specific protocol state machines, or into behavioral state machines.



Protocol conformance declares that the specific protocol state machine specifies a protocol that conforms to the general state machine one, or that the specific behavioral state machine abide by the protocol of the general protocol state machine.



A protocol state machine is owned by a classifier. The classifiers owning a general state machine and an associated specific state machine are generally also connected by a generalization or a realization link.

</body>
    </ownedComment>
    <generalization xmi:id="_N2kgTGEIEdqmfMQqVJOcWQ" general="_NidRw2EIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N2kgTWEIEdqmfMQqVJOcWQ" name="specificMachine" type="_N2uRQGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRxmEIEdqmfMQqVJOcWQ _NidR4GEIEdqmfMQqVJOcWQ" association="_N2uRWWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N2kgTmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N2kgT2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N2kgUGEIEdqmfMQqVJOcWQ" annotatedElement="_N2kgTWEIEdqmfMQqVJOcWQ">
        <body>Specifies the state machine which conforms to the general state machine.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2kgUWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2kgUmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N2kgU2EIEdqmfMQqVJOcWQ" name="generalMachine" type="_N2uRQGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRzGEIEdqmfMQqVJOcWQ" association="_N2uRa2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N2kgVGEIEdqmfMQqVJOcWQ" annotatedElement="_N2kgU2EIEdqmfMQqVJOcWQ">
        <body>Specifies the protocol state machine to which the specific state machine conforms.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2kgVWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2kgVmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NqzVLGEIEdqmfMQqVJOcWQ" name="Interface">
    <ownedComment xmi:id="_NqzVLWEIEdqmfMQqVJOcWQ" annotatedElement="_NqzVLGEIEdqmfMQqVJOcWQ">
      <body>An interface is a kind of classifier that represents a declaration of a set of coherent public features and obligations. An interface specifies a contract; any instance of a classifier that realizes the interface must fulfill that contract. The obligations that may be associated with an interface are in the form of various kinds of constraints (such as pre- and post-conditions) or protocol specifications, which may impose ordering restrictions on interactions through the interface.

Since interfaces are declarations, they are not instantiable. Instead, an interface specification is implemented by an instance of an instantiable classifier, which means that the instantiable classifier presents a public facade that conforms to the interface specification. Note that a given classifier may implement more than one interface and that an interface may be implemented by a number of different classifiers.

</body>
    </ownedComment>
    <ownedComment xmi:id="_NsvO4mEIEdqmfMQqVJOcWQ" annotatedElement="_NqzVLGEIEdqmfMQqVJOcWQ">
      <body>Adds the capability for interfaces to include receptions (in addition to operations).</body>
    </ownedComment>
    <ownedComment xmi:id="_N2kgV2EIEdqmfMQqVJOcWQ" annotatedElement="_NqzVLGEIEdqmfMQqVJOcWQ">
      <body>Since an interface specifies conformance characteristics, it does not own detailed behavior specifications. Instead, interfaces may own a protocol state machine that specifies event sequences and pre/post conditions for the operations and receptions described by the interface.</body>
    </ownedComment>
    <ownedRule xmi:id="_NqzVLmEIEdqmfMQqVJOcWQ" name="visibility" constrainedElement="_NqzVLGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqzVL2EIEdqmfMQqVJOcWQ" annotatedElement="_NqzVLmEIEdqmfMQqVJOcWQ">
        <body>The visibility of all features owned by an interface must be public.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NqzVMGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.feature->forAll(f | f.visibility = #public)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NqzVMWEIEdqmfMQqVJOcWQ" general="_NiTgcGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NqzVMmEIEdqmfMQqVJOcWQ" name="ownedAttribute" type="_Ni59sGEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NiTgemEIEdqmfMQqVJOcWQ _NimbtWEIEdqmfMQqVJOcWQ" association="_Nq8fEGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NqzVM2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqzVNGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqzVNWEIEdqmfMQqVJOcWQ" annotatedElement="_NqzVMmEIEdqmfMQqVJOcWQ">
        <body>The attributes (i.e. the properties) owned by the class.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqzVNmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqzVN2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqzVOGEIEdqmfMQqVJOcWQ" name="ownedOperation" type="_NjM4UGEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NiTggGEIEdqmfMQqVJOcWQ _NimbtWEIEdqmfMQqVJOcWQ" association="_Nq8fFmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NqzVOWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqzVOmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqzVO2EIEdqmfMQqVJOcWQ" annotatedElement="_NqzVOGEIEdqmfMQqVJOcWQ">
        <body>The operations owned by the class.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqzVPGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqzVPWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqzVPmEIEdqmfMQqVJOcWQ" name="nestedClassifier" type="_NiTgcGEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_Nq8fJGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NqzVP2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqzVQGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqzVQWEIEdqmfMQqVJOcWQ" annotatedElement="_NqzVPmEIEdqmfMQqVJOcWQ">
        <body>References all the Classifiers that are defined (nested) within the Class.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqzVQmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqzVQ2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqzVRGEIEdqmfMQqVJOcWQ" name="redefinedInterface" type="_NqzVLGEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMb2EIEdqmfMQqVJOcWQ" association="_Nq8fKmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqzVRWEIEdqmfMQqVJOcWQ" annotatedElement="_NqzVRGEIEdqmfMQqVJOcWQ">
        <body>References all the Interfaces redefined by this Interface.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqzVRmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqzVR2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NsvO42EIEdqmfMQqVJOcWQ" name="ownedReception" type="_NsvO6WEIEdqmfMQqVJOcWQ" subsettedProperty="_NiTggGEIEdqmfMQqVJOcWQ _NimbtWEIEdqmfMQqVJOcWQ" association="_NtCJzGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NsvO5GEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NsvO5WEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NsvO5mEIEdqmfMQqVJOcWQ" annotatedElement="_NsvO42EIEdqmfMQqVJOcWQ">
        <body>Receptions that objects providing this interface are willing to accept.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NsvO52EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsvO6GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N2kgWGEIEdqmfMQqVJOcWQ" name="protocol" type="_N2uRQGEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_N2uRZWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N2kgWWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N2kgWmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N2kgW2EIEdqmfMQqVJOcWQ" annotatedElement="_N2kgWGEIEdqmfMQqVJOcWQ">
        <body>References a protocol state machine specifying the legal sequences of the invocation of the behavioral features described in the interface.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2kgXGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2kgXWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NtL6x2EIEdqmfMQqVJOcWQ" name="Port">
    <ownedComment xmi:id="_NtL6yGEIEdqmfMQqVJOcWQ" annotatedElement="_NtL6x2EIEdqmfMQqVJOcWQ">
      <body>Ports represent interaction points between a classifier and its environment. The interfaces associated with a port specify the nature of the interactions that may occur over a port. The required interfaces of a port characterize the requests which may be made from the classifier to its environment through this port. The provided interfaces of a port characterize requests to the classifier that its environment may make through this port.



A port has the ability to specify that any requests arriving at this port are handled by the behavior of the instance of the owning classifier, rather than being forwarded to any contained instances, if any.

</body>
    </ownedComment>
    <ownedComment xmi:id="_N2kgXmEIEdqmfMQqVJOcWQ" annotatedElement="_NtL6x2EIEdqmfMQqVJOcWQ">
      <body>Port is defined as a specialization of the general Port, adding an association to a protocol state machine.</body>
    </ownedComment>
    <ownedRule xmi:id="_NtL6yWEIEdqmfMQqVJOcWQ" name="required_interfaces" constrainedElement="_NtL6x2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtL6ymEIEdqmfMQqVJOcWQ" annotatedElement="_NtL6yWEIEdqmfMQqVJOcWQ">
        <body>The required interfaces of a port must be provided by elements to which the port is connected.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtL6y2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NtL6zGEIEdqmfMQqVJOcWQ" name="port_aggregation" constrainedElement="_NtL6x2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtL6zWEIEdqmfMQqVJOcWQ" annotatedElement="_NtL6zGEIEdqmfMQqVJOcWQ">
        <body>Port.aggregation must be composite.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtL6zmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NtL6z2EIEdqmfMQqVJOcWQ" name="port_destroyed" constrainedElement="_NtL6x2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtL60GEIEdqmfMQqVJOcWQ" annotatedElement="_NtL6z2EIEdqmfMQqVJOcWQ">
        <body>When a port is destroyed, all connectors attached to this port will be destroyed also.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtL60WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NtL60mEIEdqmfMQqVJOcWQ" name="default_value" constrainedElement="_NtL6x2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtL602EIEdqmfMQqVJOcWQ" annotatedElement="_NtL60mEIEdqmfMQqVJOcWQ">
        <body>A defaultValue for port cannot be specified when the type of the Port is an Interface</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NtL61GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NtL61WEIEdqmfMQqVJOcWQ" general="_Ni59sGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NtL61mEIEdqmfMQqVJOcWQ" name="isBehavior">
      <ownedComment xmi:id="_NtL612EIEdqmfMQqVJOcWQ" annotatedElement="_NtL61mEIEdqmfMQqVJOcWQ">
        <body>Specifies whether requests arriving at this port are sent to the classifier behavior of this classifier. Such ports are referred to as behavior port. Any invocation of a behavioral feature targeted at a behavior port will be handled by the instance of the owning classifier itself, rather than by any instances that this classifier may contain.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NtL62GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NtL62WEIEdqmfMQqVJOcWQ" name="isService">
      <ownedComment xmi:id="_NtL62mEIEdqmfMQqVJOcWQ" annotatedElement="_NtL62WEIEdqmfMQqVJOcWQ">
        <body>If true indicates that this port is used to provide the published functionality of a classifier; if false, this port is used to implement the classifier but is not part of the essential externally-visible functionality of the classifier and can, therefore, be altered or deleted along with the internal implementation of the classifier and other properties that are considered part of its implementation.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NtL622EIEdqmfMQqVJOcWQ" value="true"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NtL63GEIEdqmfMQqVJOcWQ" name="required" type="_NqzVLGEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" association="_NtL7EGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NtL63WEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NtL63mEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NtL632EIEdqmfMQqVJOcWQ" annotatedElement="_NtL63GEIEdqmfMQqVJOcWQ">
        <body>References the interfaces specifying the set of operations and receptions which the classifier expects its environment to handle. This association is derived as the set of interfaces required by the type of the port or its supertypes.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtL64GEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtL64WEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NtL64mEIEdqmfMQqVJOcWQ" name="redefinedPort" type="_NtL6x2EIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMb2EIEdqmfMQqVJOcWQ" association="_NtL7FGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtL642EIEdqmfMQqVJOcWQ" annotatedElement="_NtL64mEIEdqmfMQqVJOcWQ">
        <body>A port may be redefined when its containing classifier is specialized. The redefining port may have additional interfaces to those that are associated with the redefined port or it may replace an interface by one of its subtypes.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtL65GEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtL65WEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NtL65mEIEdqmfMQqVJOcWQ" name="provided" type="_NqzVLGEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" association="_NtL7GWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NtL652EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NtL66GEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NtL66WEIEdqmfMQqVJOcWQ" annotatedElement="_NtL65mEIEdqmfMQqVJOcWQ">
        <body>References the interfaces specifying the set of operations and receptions which the classifier offers to its environment, and which it will handle either directly or by forwarding it to a part of its internal structure. This association is derived from the interfaces realized by the type of the port or by the type of the port, if the port was typed by an interface.

</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtL66mEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtL662EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N2kgX2EIEdqmfMQqVJOcWQ" name="protocol" type="_N2uRQGEIEdqmfMQqVJOcWQ" association="_N2uRXGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N2kgYGEIEdqmfMQqVJOcWQ" annotatedElement="_N2kgX2EIEdqmfMQqVJOcWQ">
        <body>References an optional protocol state machine which describes valid interactions at this interaction point.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2kgYWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2kgYmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NtL67GEIEdqmfMQqVJOcWQ" name="getProvideds" visibility="protected" type="_NqzVLGEIEdqmfMQqVJOcWQ">
      <returnResult xmi:id="_NtL67WEIEdqmfMQqVJOcWQ" type="_NqzVLGEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtL67mEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtL672EIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
    <ownedOperation xmi:id="_NtL68GEIEdqmfMQqVJOcWQ" name="getRequireds" visibility="protected" type="_NqzVLGEIEdqmfMQqVJOcWQ">
      <returnResult xmi:id="_NtL68WEIEdqmfMQqVJOcWQ" type="_NqzVLGEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtL68mEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtL682EIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N2kgY2EIEdqmfMQqVJOcWQ" name="ProtocolTransition">
    <ownedComment xmi:id="_N2kgZGEIEdqmfMQqVJOcWQ" annotatedElement="_N2kgY2EIEdqmfMQqVJOcWQ">
      <body>A protocol transition (transition as specialized in the ProtocolStateMachines package) specifies a legal transition for an operation. Transitions of protocol state machines have the following information: a pre condition (guard), on trigger, and a post condition. Every protocol transition is associated to zero or one operation (referred BehavioralFeature) that belongs to the context classifier of the protocol state machine.



The protocol transition specifies that the associated (referred) operation can be called for an instance in the origin state under the initial condition (guard), and that at the end of the transition, the destination state will be reached under the final condition (post).

</body>
    </ownedComment>
    <ownedRule xmi:id="_N2kgZWEIEdqmfMQqVJOcWQ" name="belongs_psm" constrainedElement="_N2kgY2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N2kgZmEIEdqmfMQqVJOcWQ" annotatedElement="_N2kgZWEIEdqmfMQqVJOcWQ">
        <body>A protocol transition always belongs to a protocol state machine.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N2kgZ2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>container.belongsToPSM()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N2kgaGEIEdqmfMQqVJOcWQ" name="associated_actions" constrainedElement="_N2kgY2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N2kgaWEIEdqmfMQqVJOcWQ" annotatedElement="_N2kgaGEIEdqmfMQqVJOcWQ">
        <body>A protocol transition never has associated actions.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N2kgamEIEdqmfMQqVJOcWQ" language="OCL">
        <body>effect->isEmpty()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N2kga2EIEdqmfMQqVJOcWQ" name="refers_to_operation" constrainedElement="_N2kgY2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N2kgbGEIEdqmfMQqVJOcWQ" annotatedElement="_N2kga2EIEdqmfMQqVJOcWQ">
        <body>If a protocol transition refers to an operation (i. e. has a call trigger corresponding to an operation), then that operation should apply to the context classifier of the state machine of the protocol transition.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N2kgbWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N2kgbmEIEdqmfMQqVJOcWQ" general="_N105YGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N2kgb2EIEdqmfMQqVJOcWQ" name="postCondition" type="_NjDHfmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_N2uRYGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N2kgcGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N2kgcWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N2kgcmEIEdqmfMQqVJOcWQ" annotatedElement="_N2kgb2EIEdqmfMQqVJOcWQ">
        <body>Specifies the post condition of the transition which is the condition that should be obtained once the transition is triggered. This post condition is part of the post condition of the operation connected to the transition.

</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2kgc2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2kgdGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N2kgdWEIEdqmfMQqVJOcWQ" name="referred" type="_NjM4UGEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" association="_N23bMGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N2kgdmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N2kgd2EIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_N2kgeGEIEdqmfMQqVJOcWQ" annotatedElement="_N2kgdWEIEdqmfMQqVJOcWQ">
        <body>This association refers to the associated operation. It is derived from the operation of the call trigger when applicable.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2kgeWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2kgemEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N2kge2EIEdqmfMQqVJOcWQ" name="preCondition" type="_NjDHfmEIEdqmfMQqVJOcWQ" subsettedProperty="_N105j2EIEdqmfMQqVJOcWQ" association="_N23bNGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N2kgfGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N2kgfWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N2kgfmEIEdqmfMQqVJOcWQ" annotatedElement="_N2kge2EIEdqmfMQqVJOcWQ">
        <body>Specifies the precondition of the transition. It specifies the condition that should be verified before triggering the transition. This guard condition added to the source state will be evaluated as part of the precondition of the operation referred by the transition if any.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2kgf2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2kggGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_N2kggWEIEdqmfMQqVJOcWQ" name="belongsToPSM" isQuery="true" bodyCondition="_N2kgg2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N2kggmEIEdqmfMQqVJOcWQ" annotatedElement="_N2kggWEIEdqmfMQqVJOcWQ">
        <body>The operation belongsToPSM () checks if the region belongs to a protocol state machine</body>
      </ownedComment>
      <ownedRule xmi:id="_N2kgg2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N2kggWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N2kghGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if not stateMachine->isEmpty() then
oclIsTypeOf(ProtocolStateMachine)
else if not state->isEmpty() then
state.container.belongsToPSM ()
else false</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N2kghWEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N2uRQGEIEdqmfMQqVJOcWQ" name="ProtocolStateMachine">
    <ownedComment xmi:id="_N2uRQWEIEdqmfMQqVJOcWQ" annotatedElement="_N2uRQGEIEdqmfMQqVJOcWQ">
      <body>A protocol state machine is always defined in the context of a classifier. It specifies which operations of the classifier can be called in which state and under which condition, thus specifying the allowed call sequences on the classifier's operations. A protocol state machine presents the possible and permitted transitions on the instances of its context classifier, together with the operations which carry the transitions. In this manner, an instance lifecycle can be created for a classifier, by specifying the order in which the operations can be activated and the states through which an instance progresses during its existence.</body>
    </ownedComment>
    <ownedRule xmi:id="_N2uRQmEIEdqmfMQqVJOcWQ" name="classifier_context" constrainedElement="_N2uRQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N2uRQ2EIEdqmfMQqVJOcWQ" annotatedElement="_N2uRQmEIEdqmfMQqVJOcWQ">
        <body>A protocol state machine must only have a classifier context, not a behavioral feature context.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N2uRRGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>(not context->isEmpty( )) and specification->isEmpty()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N2uRRWEIEdqmfMQqVJOcWQ" name="protocol_transitions" constrainedElement="_N2uRQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N2uRRmEIEdqmfMQqVJOcWQ" annotatedElement="_N2uRRWEIEdqmfMQqVJOcWQ">
        <body>All transitions of a protocol state machine must be protocol transitions. (transitions as extended by the ProtocolStateMachines package)</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N2uRR2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>region->forAll(r | r.transition->forAll(t | t.oclIsTypeOf(ProtocolTransition)))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N2uRSGEIEdqmfMQqVJOcWQ" name="entry_exit_do" constrainedElement="_N2uRQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N2uRSWEIEdqmfMQqVJOcWQ" annotatedElement="_N2uRSGEIEdqmfMQqVJOcWQ">
        <body>The states of a protocol state machine cannot have entry, exit, or do activity actions.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N2uRSmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>region->forAll(r | r.subvertex->forAll(v | v.oclIsKindOf(State) implies
(v.entry->isEmpty() and v.exit->isEmpty() and v.doActivity->isEmpty())))
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N2uRS2EIEdqmfMQqVJOcWQ" name="deep_or_shallow_history" constrainedElement="_N2uRQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N2uRTGEIEdqmfMQqVJOcWQ" annotatedElement="_N2uRS2EIEdqmfMQqVJOcWQ">
        <body>Protocol state machines cannot have deep or shallow history pseudostates.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N2uRTWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>region->forAll (r | r.subvertex->forAll (v | v.oclIsKindOf(Psuedostate) implies
((v.kind &lt;> #deepHistory) and (v.kind &lt;> #shallowHistory)))))
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N2uRTmEIEdqmfMQqVJOcWQ" name="ports_connected" constrainedElement="_N2uRQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N2uRT2EIEdqmfMQqVJOcWQ" annotatedElement="_N2uRTmEIEdqmfMQqVJOcWQ">
        <body>If two ports are connected, then the protocol state machine of the required interface (if defined) must be conformant to the protocol state machine of the provided interface (if defined).</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N2uRUGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N2uRUWEIEdqmfMQqVJOcWQ" general="_N1rIYGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N2uRUmEIEdqmfMQqVJOcWQ" name="conformance" type="_N2kgSmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_N2uRWWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N2uRU2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N2uRVGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N2uRVWEIEdqmfMQqVJOcWQ" annotatedElement="_N2uRUmEIEdqmfMQqVJOcWQ">
        <body>Conformance between protocol state machines.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2uRVmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2uRV2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N1rIm2EIEdqmfMQqVJOcWQ" name="State">
    <ownedComment xmi:id="_N1rInGEIEdqmfMQqVJOcWQ" annotatedElement="_N1rIm2EIEdqmfMQqVJOcWQ">
      <body>A state models a situation during which some (usually implicit) invariant condition holds. The invariant may represent a static situation such as an object waiting for some external event to occur. However, it can also model dynamic conditions such as the process of performing some behavior (i.e., the model element under consideration enters the state when the behavior commences and leaves it as soon as the behavior is completed). The following kinds of states are distinguished:

o Simple state,

o composite state, and

o submachine state.

A composite state is either a simple composite state (with just one region) or an orthogonal state (with more than one region).



Simple state

A simple state is a state that does not have substates, i.e. it has no regions and it has no submachine state machine.



Composite state

A composite state either contains one region or is decomposed into two or more orthogonal regions. Each region has a set of mutually exclusive disjoint subvertices and a set of transitions. A given state may only be decomposed in one of these two ways. 

Any state enclosed within a region of a composite state is called a substate of that composite state. It is called a direct substate when it is not contained by any other state; otherwise it is referred to as a indirect substate. 

Each region of a composite state may have an initial pseudostate and a final state. A transition to the enclosing state represents a transition to the initial pseudostate in each region. A newly-created object takes it's topmost default transitions, originating from the topmost initial pseudostates of each region.



A transition to a final state represents the completion of behavior in the enclosing region. Completion of behavior in all orthogonal regions represents completion of behavior by the enclosing state and triggers a completion event on the enclosing state. Completion of the topmost regions of an object corresponds to its termination.



An entry pseudostate is used to join an external transition terminating on that entry point to an internal transition emanating from that entry point. An exit pseudostate is used to join an internal transition terminating on that exit point to an external transition emanating from that exit point. The main purpose of such entry and exit points is to execute the state entry and exit actions respectively in between the actions that are associated with the joined transitions.



Semantic variation point (default entry rule)

If a transition terminates on an enclosing state and the enclosed regions do not have an initial pseudostate, the interpretation of this situation is a semantic variation point. In some interpretations, this is considered an ill-formed model. That is, in those cases the initial pseudostate is mandatory. 

An alternative interpretation allows this situation and it means that, when such a transition is taken, the state machine stays in the composite state, without entering any of the regions or their substates.



Submachine state

A submachine state specifies the insertion of the specification of a submachine state machine. The state machine that contains the submachine state is called the containing state machine. The same state machine may be a submachine more than once in the context of a single containing state machine.



A submachine state is semantically equivalent to a composite state. The regions of the submachine state machine are the regions of the composite state. The entry, exit and behavior actions, and internal transitions, are defined as part of the state. Submachine state is a decomposition mechanism that allows factoring of common behaviors and their reuse.

Transitions in the containing state machine can have entry/exit points of the inserted state machine as targets/sources.

</body>
    </ownedComment>
    <ownedComment xmi:id="_N2uRWGEIEdqmfMQqVJOcWQ" annotatedElement="_N1rIm2EIEdqmfMQqVJOcWQ">
      <body>The states of protocol state machines are exposed to the users of their context classifiers. A protocol state represents an exposed stable situation of its context classifier: when an instance of the classifier is not processing any operation, users of this instance can always know its state configuration.</body>
    </ownedComment>
    <ownedRule xmi:id="_N1rInWEIEdqmfMQqVJOcWQ" name="regions" constrainedElement="_N1rIm2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rInmEIEdqmfMQqVJOcWQ" annotatedElement="_N1rInWEIEdqmfMQqVJOcWQ">
        <body>There have to be at least two regions in an orthogonal composite state.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rIn2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>(self.isOrthogonal) implies
(self.region->size >= 2)
</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N1rIoGEIEdqmfMQqVJOcWQ" name="submachine_states" constrainedElement="_N1rIm2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rIoWEIEdqmfMQqVJOcWQ" annotatedElement="_N1rIoGEIEdqmfMQqVJOcWQ">
        <body>Only submachine states can have connection point references.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rIomEIEdqmfMQqVJOcWQ" language="OCL">
        <body>isSubmachineState implies connection->notEmpty ( )</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N1rIo2EIEdqmfMQqVJOcWQ" name="destinations_or_sources_of_transitions" constrainedElement="_N1rIm2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rIpGEIEdqmfMQqVJOcWQ" annotatedElement="_N1rIo2EIEdqmfMQqVJOcWQ">
        <body>The connection point references used as destinations/sources of transitions associated with a submachine state must be defined as entry/exit points in the submachine state machine.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rIpWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N1rIpmEIEdqmfMQqVJOcWQ" name="submachine_or_regions" constrainedElement="_N1rIm2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rIp2EIEdqmfMQqVJOcWQ" annotatedElement="_N1rIpmEIEdqmfMQqVJOcWQ">
        <body>A state is not allowed to have both a submachine and regions.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rIqGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>isComposite implies not isSubmachineState</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N1rIqWEIEdqmfMQqVJOcWQ" name="composite_states" constrainedElement="_N1rIm2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rIqmEIEdqmfMQqVJOcWQ" annotatedElement="_N1rIqWEIEdqmfMQqVJOcWQ">
        <body>Only composite states can have entry or exit pseudostates defined.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rIq2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>connectionPoint->notEmpty() implies isComoposite</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N1rIrGEIEdqmfMQqVJOcWQ" name="entry_or_exit" constrainedElement="_N1rIm2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rIrWEIEdqmfMQqVJOcWQ" annotatedElement="_N1rIrGEIEdqmfMQqVJOcWQ">
        <body>Only entry or exit pseudostates can serve as connection points.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rIrmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>connectionPoint->forAll(cp|cp.kind = #entry or cp.kind = #exit)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N1rIr2EIEdqmfMQqVJOcWQ" general="_N105uWEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N1rIsGEIEdqmfMQqVJOcWQ" general="_NiwMYGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N1rIsWEIEdqmfMQqVJOcWQ" general="_NimbnWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N1rIsmEIEdqmfMQqVJOcWQ" name="isComposite" isReadOnly="true" isDerived="true">
      <eAnnotations xmi:id="_N1rIs2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_N1rItGEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1rItWEIEdqmfMQqVJOcWQ" annotatedElement="_N1rIsmEIEdqmfMQqVJOcWQ">
        <body>A state with isComposite=true is said to be a composite state. A composite state is a state that contains at least one region.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1rItmEIEdqmfMQqVJOcWQ" name="isOrthogonal" isReadOnly="true" isDerived="true">
      <eAnnotations xmi:id="_N1rIt2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_N1rIuGEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1rIuWEIEdqmfMQqVJOcWQ" annotatedElement="_N1rItmEIEdqmfMQqVJOcWQ">
        <body>A state with isOrthogonal=true is said to be an orthogonal composite state. An orthogonal composite state contains two or more regions.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1rIumEIEdqmfMQqVJOcWQ" name="isSimple" isReadOnly="true" isDerived="true">
      <eAnnotations xmi:id="_N1rIu2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_N1rIvGEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1rIvWEIEdqmfMQqVJOcWQ" annotatedElement="_N1rIumEIEdqmfMQqVJOcWQ">
        <body>A state with isSimple=true is said to be a simple state. A simple state does not have any regions and it does not refer to any submachine state machine.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1rIvmEIEdqmfMQqVJOcWQ" name="isSubmachineState" isReadOnly="true" isDerived="true">
      <eAnnotations xmi:id="_N1rIv2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_N1rIwGEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1rIwWEIEdqmfMQqVJOcWQ" annotatedElement="_N1rIvmEIEdqmfMQqVJOcWQ">
        <body>A state with isSubmachineState=true is said to be a submachine state. Such a state refers to a state machine (submachine).</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1rIwmEIEdqmfMQqVJOcWQ" name="submachine" type="_N1rIYGEIEdqmfMQqVJOcWQ" association="_N2H0aGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rIw2EIEdqmfMQqVJOcWQ" annotatedElement="_N1rIwmEIEdqmfMQqVJOcWQ">
        <body>The state machine that is to be inserted in place of the (submachine) state.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1rIxGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1rIxWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1rIxmEIEdqmfMQqVJOcWQ" name="connection" type="_N106EmEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_N2RlVGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N1rIx2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1rIyGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1rIyWEIEdqmfMQqVJOcWQ" annotatedElement="_N1rIxmEIEdqmfMQqVJOcWQ">
        <body>The entry and exit connection points used in conjunction with this (submachine) state, i.e. as targets and sources, respectively, in the region with the submachine state. A connection point reference references the corresponding definition of a connection point pseudostate in the statemachine referenced by the submachinestate.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1rIymEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1rIy2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1rIzGEIEdqmfMQqVJOcWQ" name="redefinedState" type="_N1rIm2EIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMb2EIEdqmfMQqVJOcWQ" association="_N2RlVmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rIzWEIEdqmfMQqVJOcWQ" annotatedElement="_N1rIzGEIEdqmfMQqVJOcWQ">
        <body>The state of which this state is a redefinition.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1rIzmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1rIz2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1rI0GEIEdqmfMQqVJOcWQ" name="region" type="_N1-qYGEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_N2RlaGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N1rI0WEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1rI0mEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1rI02EIEdqmfMQqVJOcWQ" annotatedElement="_N1rI0GEIEdqmfMQqVJOcWQ">
        <body>The regions owned directly by the state.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1rI1GEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1rI1WEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1rI1mEIEdqmfMQqVJOcWQ" name="redefinitionContext" type="_NiTgcGEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" redefinedProperty="_NiwMaWEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMaWEIEdqmfMQqVJOcWQ" association="_N2avSmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N1rI12EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1rI2GEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1rI2WEIEdqmfMQqVJOcWQ" annotatedElement="_N1rI1mEIEdqmfMQqVJOcWQ">
        <body>References the classifier in which context this element may be redefined.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1rI2mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1rI22EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1rI3GEIEdqmfMQqVJOcWQ" name="stateInvariant" type="_NjDHfmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_N2avVGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N1rI3WEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1rI3mEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1rI32EIEdqmfMQqVJOcWQ" annotatedElement="_N1rI3GEIEdqmfMQqVJOcWQ">
        <body>Specifies conditions that are always true when this state is the current state. In protocol state machines, state invariants are additional conditions to the preconditions of the outgoing transitions, and to the postcondition of the incoming transitions.

</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1rI4GEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1rI4WEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1rI4mEIEdqmfMQqVJOcWQ" name="entry" type="_NqDuQGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_N2avXmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N1rI42EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1rI5GEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1rI5WEIEdqmfMQqVJOcWQ" annotatedElement="_N1rI4mEIEdqmfMQqVJOcWQ">
        <body>An optional behavior that is executed whenever this state is entered regardless of the transition taken to reach the state. If defined, entry actions are always executed to completion prior to any internal behavior or transitions performed within the state.

</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1rI5mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1rI52EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1rI6GEIEdqmfMQqVJOcWQ" name="exit" type="_NqDuQGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_N2avY2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N1rI6WEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1rI6mEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1rI62EIEdqmfMQqVJOcWQ" annotatedElement="_N1rI6GEIEdqmfMQqVJOcWQ">
        <body>An optional behavior that is executed whenever this state is exited regardless of which transition was taken out of the state. If defined, exit actions are always executed to completion only after all internal activities and transition actions have completed execution.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1rI7GEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1rI7WEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1rI7mEIEdqmfMQqVJOcWQ" name="doActivity" type="_NqDuQGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_N2avaGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N1rI72EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1rI8GEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1rI8WEIEdqmfMQqVJOcWQ" annotatedElement="_N1rI7mEIEdqmfMQqVJOcWQ">
        <body>An optional behavior that is executed while being in the state. The execution starts when this state is entered, and stops either by itself, or when the state is exited, whichever comes first.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1rI8mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1rI82EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1rI9GEIEdqmfMQqVJOcWQ" name="connectionPoint" type="_N105z2EIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_N2kgQGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N1rI9WEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1rI9mEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1rI92EIEdqmfMQqVJOcWQ" annotatedElement="_N1rI9GEIEdqmfMQqVJOcWQ">
        <body>The entry and exit pseudostates of a composite state. These can only be entry or exit Pseudostates, and they must have different names. They can only be defined for composite states.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1rI-GEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1rI-WEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N1rI-mEIEdqmfMQqVJOcWQ" name="deferrableTrigger" type="_NsvO22EIEdqmfMQqVJOcWQ" association="_N2kgRmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N1rI-2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N1rI_GEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N1rI_WEIEdqmfMQqVJOcWQ" annotatedElement="_N1rI-mEIEdqmfMQqVJOcWQ">
        <body>A list of triggers that are candidates to be retained by the state machine if they trigger no transitions out of the state (not consumed). A deferred trigger is retained until the state machine reaches a state configuration where it is no longer deferred.

</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N1rI_mEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N1rI_2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_N1rJAGEIEdqmfMQqVJOcWQ" name="isSimple" isQuery="true" bodyCondition="_N1rJAmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rJAWEIEdqmfMQqVJOcWQ" annotatedElement="_N1rJAGEIEdqmfMQqVJOcWQ">
        <body>A simple state is a state without any regions.</body>
      </ownedComment>
      <ownedRule xmi:id="_N1rJAmEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N1rJAGEIEdqmfMQqVJOcWQ _N1rIumEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rJA2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = region.isEmpty()</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N1rJBGEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N1rJBWEIEdqmfMQqVJOcWQ" name="isComposite" isQuery="true" bodyCondition="_N1rJB2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rJBmEIEdqmfMQqVJOcWQ" annotatedElement="_N1rJBWEIEdqmfMQqVJOcWQ">
        <body>A composite state is a state with at least one region.</body>
      </ownedComment>
      <ownedRule xmi:id="_N1rJB2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N1rJBWEIEdqmfMQqVJOcWQ _N1rIsmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rJCGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = region.notEmpty()</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N1rJCWEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N1rJCmEIEdqmfMQqVJOcWQ" name="isOrthogonal" isQuery="true" bodyCondition="_N1rJDGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rJC2EIEdqmfMQqVJOcWQ" annotatedElement="_N1rJCmEIEdqmfMQqVJOcWQ">
        <body>An orthogonal state is a composite state with at least 2 regions</body>
      </ownedComment>
      <ownedRule xmi:id="_N1rJDGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N1rJCmEIEdqmfMQqVJOcWQ _N1rItmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rJDWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = (region->size () > 1)</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N1rJDmEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N1rJD2EIEdqmfMQqVJOcWQ" name="isSubmachineState" isQuery="true" bodyCondition="_N1rJEWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rJEGEIEdqmfMQqVJOcWQ" annotatedElement="_N1rJD2EIEdqmfMQqVJOcWQ">
        <body>Only submachine states can have a reference statemachine.</body>
      </ownedComment>
      <ownedRule xmi:id="_N1rJEWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N1rJD2EIEdqmfMQqVJOcWQ _N1rIvmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rJEmEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = submachine.notEmpty()</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N1rJE2EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N1rJFGEIEdqmfMQqVJOcWQ" name="redefinitionContext" type="_NiTgcGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_N1rJFmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rJFWEIEdqmfMQqVJOcWQ" annotatedElement="_N1rJFGEIEdqmfMQqVJOcWQ">
        <body>The redefinition context of a state is the nearest containing statemachine.</body>
      </ownedComment>
      <ownedRule xmi:id="_N1rJFmEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N1rJFGEIEdqmfMQqVJOcWQ _N1rI1mEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rJF2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = let sm = containingStateMachine() in
if sm.context->isEmpty() or sm.general->notEmpty() then
sm
else
sm.context
endif</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N1rJGGEIEdqmfMQqVJOcWQ" type="_NiTgcGEIEdqmfMQqVJOcWQ" direction="return"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N1rJGWEIEdqmfMQqVJOcWQ" name="isRedefinitionContextValid" isQuery="true" redefinedOperation="_NiwMe2EIEdqmfMQqVJOcWQ" bodyCondition="_N1rJG2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rJGmEIEdqmfMQqVJOcWQ" annotatedElement="_N1rJGWEIEdqmfMQqVJOcWQ">
        <body>The query isRedefinitionContextValid() specifies whether the redefinition contexts of a state are properly related to the redefinition contexts of the specified state to allow this element to redefine the other. The containing region of a redefining state must redefine the containing region of the redefined state.</body>
      </ownedComment>
      <ownedRule xmi:id="_N1rJG2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N1rJGWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rJHGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = true</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N1rJHWEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_N1rJHmEIEdqmfMQqVJOcWQ" name="redefined" type="_N1rIm2EIEdqmfMQqVJOcWQ" effect="read"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N1rJH2EIEdqmfMQqVJOcWQ" name="isConsistentWith" isQuery="true" redefinedOperation="_NiwMdWEIEdqmfMQqVJOcWQ" bodyCondition="_N1rJIWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rJIGEIEdqmfMQqVJOcWQ" annotatedElement="_N1rJH2EIEdqmfMQqVJOcWQ">
        <body>The query isConsistentWith() specifies that a redefining state is consistent with a redefined state provided that the redefining state is an extension of the redefined state: A simple state can be redefined (extended) to become a composite state (by adding a region) and a composite state can be redefined (extended) by adding regions and by adding vertices, states, and transitions to inherited regions. All states may add or replace entry, exit, and 'doActivity' actions.</body>
      </ownedComment>
      <ownedRule xmi:id="_N1rJIWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N1rJH2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rJImEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = true</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N1rJI2EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_N1rJJGEIEdqmfMQqVJOcWQ" name="redefinee" type="_NiwMYGEIEdqmfMQqVJOcWQ"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N1rJJWEIEdqmfMQqVJOcWQ" name="containingStateMachine" type="_N1rIYGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_N1rJJ2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1rJJmEIEdqmfMQqVJOcWQ" annotatedElement="_N1rJJWEIEdqmfMQqVJOcWQ">
        <body>The query containingStateMachine() returns the state machine that contains the state either directly or transitively.</body>
      </ownedComment>
      <ownedRule xmi:id="_N1rJJ2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N1rJJWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1rJKGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = container.containingStateMachine()</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N1rJKWEIEdqmfMQqVJOcWQ" type="_N1rIYGEIEdqmfMQqVJOcWQ" direction="return"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2uRWWEIEdqmfMQqVJOcWQ" name="A_conformance_specificMachine" memberEnd="_N2uRUmEIEdqmfMQqVJOcWQ _N2kgTWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2uRWmEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N2uRW2EIEdqmfMQqVJOcWQ" general="_NkPaJGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2uRXGEIEdqmfMQqVJOcWQ" name="A_protocol_port" memberEnd="_N2uRXWEIEdqmfMQqVJOcWQ _N2kgX2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N2uRXWEIEdqmfMQqVJOcWQ" type="_NtL6x2EIEdqmfMQqVJOcWQ" association="_N2uRXGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2uRXmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2uRX2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2uRYGEIEdqmfMQqVJOcWQ" name="A_postCondition_owningTransition" memberEnd="_N2kgb2EIEdqmfMQqVJOcWQ _N2uRYmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2uRYWEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N2uRYmEIEdqmfMQqVJOcWQ" name="owningTransition" type="_N2kgY2EIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_N2uRYGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2uRY2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2uRZGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2uRZWEIEdqmfMQqVJOcWQ" name="A_protocol_interface" memberEnd="_N2kgWGEIEdqmfMQqVJOcWQ _N2uRZ2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2uRZmEIEdqmfMQqVJOcWQ" general="_NkZLImEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N2uRZ2EIEdqmfMQqVJOcWQ" name="interface" type="_NqzVLGEIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ" association="_N2uRZWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N2uRaGEIEdqmfMQqVJOcWQ" annotatedElement="_N2uRZ2EIEdqmfMQqVJOcWQ">
        <body>Specifies the namespace in which the protocol state machine is defined.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2uRaWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2uRamEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N2uRa2EIEdqmfMQqVJOcWQ" name="A_generalMachine_protocolConformance" memberEnd="_N2kgU2EIEdqmfMQqVJOcWQ _N2uRbWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N2uRbGEIEdqmfMQqVJOcWQ" general="_NkPaJ2EIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N2uRbWEIEdqmfMQqVJOcWQ" type="_N2kgSmEIEdqmfMQqVJOcWQ" association="_N2uRa2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2uRbmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2uRb2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N23bMGEIEdqmfMQqVJOcWQ" name="A_referred_protocolTransition" memberEnd="_N2kgdWEIEdqmfMQqVJOcWQ _N23bMWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N23bMWEIEdqmfMQqVJOcWQ" type="_N2kgY2EIEdqmfMQqVJOcWQ" association="_N23bMGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N23bMmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N23bM2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N23bNGEIEdqmfMQqVJOcWQ" name="A_preCondition_protocolTransition" memberEnd="_N2kge2EIEdqmfMQqVJOcWQ _N23bNmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N23bNWEIEdqmfMQqVJOcWQ" general="_N2avQGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N23bNmEIEdqmfMQqVJOcWQ" type="_N2kgY2EIEdqmfMQqVJOcWQ" redefinedProperty="_N2avQmEIEdqmfMQqVJOcWQ" association="_N23bNGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N23bN2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N23bOGEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N23bOWEIEdqmfMQqVJOcWQ" name="AssociationClass">
    <ownedComment xmi:id="_N23bOmEIEdqmfMQqVJOcWQ" annotatedElement="_N23bOWEIEdqmfMQqVJOcWQ">
      <body>In the metamodel, an AssociationClass is a declaration of a semantic relationship between Classifiers, which has a set of features of its own. AssociationClass is both an Association and a Class.</body>
    </ownedComment>
    <ownedRule xmi:id="_N23bO2EIEdqmfMQqVJOcWQ" name="cannot_be_defined" constrainedElement="_N23bOWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N23bPGEIEdqmfMQqVJOcWQ" annotatedElement="_N23bO2EIEdqmfMQqVJOcWQ">
        <body>An AssociationClass cannot be defined between itself and something else.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N23bPWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.endType->excludes(self) and self.endType>collect(et|et.allparents()->excludes(self))</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N23bPmEIEdqmfMQqVJOcWQ" general="_Ni59cmEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N23bP2EIEdqmfMQqVJOcWQ" general="_Ni59kGEIEdqmfMQqVJOcWQ"/>
    <ownedOperation xmi:id="_N23bQGEIEdqmfMQqVJOcWQ" name="allConnections" type="_Ni59sGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_N23bQmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N23bQWEIEdqmfMQqVJOcWQ" annotatedElement="_N23bQGEIEdqmfMQqVJOcWQ">
        <body>The operation allConnections results in the set of all AssociationEnds of the Association.</body>
      </ownedComment>
      <ownedRule xmi:id="_N23bQmEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N23bQGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N23bQ2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = memberEnd->union ( self.parents ()->collect (p | p.allConnections () )</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N23bRGEIEdqmfMQqVJOcWQ" type="_Ni59sGEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N23bRWEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N23bRmEIEdqmfMQqVJOcWQ" value="2"/>
      </returnResult>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N23bVGEIEdqmfMQqVJOcWQ" name="A_qualifier_associationEnd" memberEnd="_N23bTmEIEdqmfMQqVJOcWQ _N23bSGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N23bVWEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N3BMMGEIEdqmfMQqVJOcWQ" name="TemplateSignature">
    <ownedComment xmi:id="_N3BMMWEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMMGEIEdqmfMQqVJOcWQ">
      <body>TemplateParameterSubstitution associates one or more actual parameters with a formal template parameter within the context of a TemplateBinding.</body>
    </ownedComment>
    <ownedRule xmi:id="_N3BMMmEIEdqmfMQqVJOcWQ" name="own_elements" constrainedElement="_N3BMMGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3BMM2EIEdqmfMQqVJOcWQ" annotatedElement="_N3BMMmEIEdqmfMQqVJOcWQ">
        <body>Parameters must own the elements they parameter or those elements must be owned by the element being templated.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N3BMNGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>templatedElement.ownedElement->includesAll(parameter.parameteredElement - parameter.ownedParameteredElement)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N3BMNWEIEdqmfMQqVJOcWQ" general="_NidR0mEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N3BMNmEIEdqmfMQqVJOcWQ" name="parameter" type="_N3BMTWEIEdqmfMQqVJOcWQ" isOrdered="true" association="_N3d4Z2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3BMN2EIEdqmfMQqVJOcWQ" annotatedElement="_N3BMNmEIEdqmfMQqVJOcWQ">
        <body>The ordered set of all formal template parameters for this template signature.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3BMOGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3BMOWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3BMOmEIEdqmfMQqVJOcWQ" name="ownedParameter" type="_N3BMTWEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ _N3BMNmEIEdqmfMQqVJOcWQ" association="_N3d4aWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N3BMO2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N3BMPGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N3BMPWEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMOmEIEdqmfMQqVJOcWQ">
        <body>The formal template parameters that are owned by this template signature.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3BMPmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3BMP2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3BMQGEIEdqmfMQqVJOcWQ" name="template" type="_N3K9MmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_N3nCH2EIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N3BMQWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N3BMQmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N3BMQ2EIEdqmfMQqVJOcWQ" annotatedElement="_N3BMQGEIEdqmfMQqVJOcWQ">
        <body>The element that owns this template signature.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3BMRGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3BMRWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NjfzQGEIEdqmfMQqVJOcWQ" name="NamedElement" isAbstract="true">
    <ownedComment xmi:id="_NjfzQWEIEdqmfMQqVJOcWQ" annotatedElement="_NjfzQGEIEdqmfMQqVJOcWQ">
      <body>NamedElement has a visibility attribute.</body>
    </ownedComment>
    <ownedComment xmi:id="_Nk13EmEIEdqmfMQqVJOcWQ" annotatedElement="_NjfzQGEIEdqmfMQqVJOcWQ">
      <body>A named element represents elements that may have a name. The name is used for identification of the named element within the namespace in which it is defined. A named element also has a qualified name that allows it to be unambiguously identified within a hierarchy of nested namespaces. NamedElement is an abstract metaclass.</body>
    </ownedComment>
    <ownedComment xmi:id="_N3BMRmEIEdqmfMQqVJOcWQ" annotatedElement="_NjfzQGEIEdqmfMQqVJOcWQ">
      <body>NamedElement specializes Kernel::NamedElement and adds a composition association to Expression.</body>
    </ownedComment>
    <ownedRule xmi:id="_NjfzQmEIEdqmfMQqVJOcWQ" name="has_no_qualified_name" constrainedElement="_NjfzQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjfzQ2EIEdqmfMQqVJOcWQ" annotatedElement="_NjfzQmEIEdqmfMQqVJOcWQ">
        <body>If there is no name, or one of the containing namespaces has no name, there is no qualified name.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nk13E2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>(self.name->isEmpty() or self.allNamespaces()->select(ns | ns.name->isEmpty())->notEmpty())

  implies self.qualifiedName->isEmpty()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NjfzRWEIEdqmfMQqVJOcWQ" name="has_qualified_name" constrainedElement="_NjfzQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjfzRmEIEdqmfMQqVJOcWQ" annotatedElement="_NjfzRWEIEdqmfMQqVJOcWQ">
        <body>When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nk13FGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>(self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()) implies
  self.qualifiedName = self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NjfzSGEIEdqmfMQqVJOcWQ" name="visibility_needs_ownership" constrainedElement="_NjfzQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjfzSWEIEdqmfMQqVJOcWQ" annotatedElement="_NjfzSGEIEdqmfMQqVJOcWQ">
        <body>If a NamedElement is not owned by a Namespace, it does not have a visibility.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nk13FWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>namespace->isEmpty() implies visibility->isEmpty()</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NjfzS2EIEdqmfMQqVJOcWQ" general="_NidR0mEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NjfzTGEIEdqmfMQqVJOcWQ" name="name">
      <eAnnotations xmi:id="_NjfzTWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NjfzTmEIEdqmfMQqVJOcWQ" isID="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjfzT2EIEdqmfMQqVJOcWQ" annotatedElement="_NjfzTGEIEdqmfMQqVJOcWQ">
        <body>The name of the NamedElement.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nk13FmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nk13F2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjfzUmEIEdqmfMQqVJOcWQ" name="visibility" type="_NjpkUmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjfzU2EIEdqmfMQqVJOcWQ" annotatedElement="_NjfzUmEIEdqmfMQqVJOcWQ">
        <body>Determines where the NamedElement appears within different Namespaces within the overall model, and its accessibility.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nk13GGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nk13GWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nk13GmEIEdqmfMQqVJOcWQ" name="qualifiedName" isReadOnly="true" isDerived="true">
      <eAnnotations xmi:id="_Nk13G2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_Nk13HGEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nk13HWEIEdqmfMQqVJOcWQ" annotatedElement="_Nk13GmEIEdqmfMQqVJOcWQ">
        <body>A name which allows the NamedElement to be identified within a hierarchy of nested Namespaces. It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the NamedElement itself.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nk13HmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nk13H2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqpkJ2EIEdqmfMQqVJOcWQ" name="clientDependency" type="_NqfzSmEIEdqmfMQqVJOcWQ" association="_NqzVKmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqpkKGEIEdqmfMQqVJOcWQ" annotatedElement="_NqpkJ2EIEdqmfMQqVJOcWQ">
        <body>Indicates the dependencies that reference the client.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqpkKWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqpkKmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjfzVmEIEdqmfMQqVJOcWQ" name="namespace" type="_NimbnWEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" isDerivedUnion="true" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_NkZLImEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NjfzV2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjfzWGEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjfzWWEIEdqmfMQqVJOcWQ" annotatedElement="_NjfzVmEIEdqmfMQqVJOcWQ">
        <body>Specifies the namespace that owns the NamedElement.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqpkK2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqpkLGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3BMR2EIEdqmfMQqVJOcWQ" name="nameExpression" type="_N3BMbWEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_N3wzK2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N3BMSGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N3BMSWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N3BMSmEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMR2EIEdqmfMQqVJOcWQ">
        <body>The string expression used to define the name of this named element.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3BMS2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3BMTGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_Njfzb2EIEdqmfMQqVJOcWQ" name="qualifiedName" isQuery="true" bodyCondition="_Njfzc2EIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NjfzcGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EOperation" xmi:id="_NjfzcWEIEdqmfMQqVJOcWQ" operationName="getQualifiedName"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjfzcmEIEdqmfMQqVJOcWQ" annotatedElement="_Njfzb2EIEdqmfMQqVJOcWQ">
        <body>When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.</body>
      </ownedComment>
      <ownedRule xmi:id="_Njfzc2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_Njfzb2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NjfzdGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()
then 
    self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))
else
    Set{}
endif</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NjfzdWEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NjfzXGEIEdqmfMQqVJOcWQ" name="allNamespaces" type="_NimbnWEIEdqmfMQqVJOcWQ" isOrdered="true" isQuery="true" bodyCondition="_NjfzXmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjfzXWEIEdqmfMQqVJOcWQ" annotatedElement="_NjfzXGEIEdqmfMQqVJOcWQ">
        <body>The query allNamespaces() gives the sequence of namespaces in which the NamedElement is nested, working outwards.</body>
      </ownedComment>
      <ownedRule xmi:id="_NjfzXmEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NjfzXGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nk13ImEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if self.namespace->isEmpty()
then Sequence{}
else self.namespace.allNamespaces()->prepend(self.namespace)
endif</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NjfzYGEIEdqmfMQqVJOcWQ" type="_NimbnWEIEdqmfMQqVJOcWQ" isOrdered="true" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nk13I2EIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nk13JGEIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
    <ownedOperation xmi:id="_NjfzY2EIEdqmfMQqVJOcWQ" name="isDistinguishableFrom" isQuery="true" bodyCondition="_NjfzZWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjfzZGEIEdqmfMQqVJOcWQ" annotatedElement="_NjfzY2EIEdqmfMQqVJOcWQ">
        <body>The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have unrelated types or (b) they have related types but different names.</body>
      </ownedComment>
      <ownedRule xmi:id="_NjfzZWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NjfzY2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nk_BAGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if self.oclIsKindOf(n.oclType) or n.oclIsKindOf(self.oclType)
then ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()
else true
endif</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NjfzZ2EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_NjfzaGEIEdqmfMQqVJOcWQ" name="n" type="_NjfzQGEIEdqmfMQqVJOcWQ"/>
      <ownedParameter xmi:id="_NjfzaWEIEdqmfMQqVJOcWQ" name="ns" type="_NimbnWEIEdqmfMQqVJOcWQ"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NjfzamEIEdqmfMQqVJOcWQ" name="separator" isQuery="true" bodyCondition="_NjfzbGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Njfza2EIEdqmfMQqVJOcWQ" annotatedElement="_NjfzamEIEdqmfMQqVJOcWQ">
        <body>The query separator() gives the string that is used to separate names when constructing a qualified name.</body>
      </ownedComment>
      <ownedRule xmi:id="_NjfzbGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NjfzamEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nk_BAWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = '::'</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NjfzbmEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N3BMTWEIEdqmfMQqVJOcWQ" name="TemplateParameter">
    <ownedComment xmi:id="_N3BMTmEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMTWEIEdqmfMQqVJOcWQ">
      <body>TemplateParameter references a ParameterableElement which is exposed as a formal template parameter in the containing template.</body>
    </ownedComment>
    <ownedRule xmi:id="_N3BMT2EIEdqmfMQqVJOcWQ" name="must_be_compatible" constrainedElement="_N3BMTWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3BMUGEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMT2EIEdqmfMQqVJOcWQ">
        <body>The default must be compatible with the formal template parameter.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N3BMUWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>default->notEmpty() implies default->isCompatibleWith(parameteredElement)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N3BMUmEIEdqmfMQqVJOcWQ" general="_NidR0mEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N3BMU2EIEdqmfMQqVJOcWQ" name="signature" type="_N3BMMGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_N3d4aWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N3BMVGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N3BMVWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N3BMVmEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMU2EIEdqmfMQqVJOcWQ">
        <body>The template signature that owns this template parameter.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3BMV2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3BMWGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3BMWWEIEdqmfMQqVJOcWQ" name="parameteredElement" type="_N3K9TWEIEdqmfMQqVJOcWQ" association="_N3nCHGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3BMWmEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMWWEIEdqmfMQqVJOcWQ">
        <body>The element exposed by this template parameter.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3BMW2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3BMXGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3BMXWEIEdqmfMQqVJOcWQ" name="ownedParameteredElement" type="_N3K9TWEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ _N3BMWWEIEdqmfMQqVJOcWQ" association="_N3nCIWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N3BMXmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N3BMX2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N3BMYGEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMXWEIEdqmfMQqVJOcWQ">
        <body>The element that is owned by this template parameter.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3BMYWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3BMYmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3BMY2EIEdqmfMQqVJOcWQ" name="default" type="_N3K9TWEIEdqmfMQqVJOcWQ" association="_N3wzEGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3BMZGEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMY2EIEdqmfMQqVJOcWQ">
        <body>The element that is the default for this formal template parameter.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3BMZWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3BMZmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3BMZ2EIEdqmfMQqVJOcWQ" name="ownedDefault" type="_N3K9TWEIEdqmfMQqVJOcWQ" subsettedProperty="_N3BMY2EIEdqmfMQqVJOcWQ _NidR2mEIEdqmfMQqVJOcWQ" association="_N3wzEmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N3BMaGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N3BMaWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N3BMamEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMZ2EIEdqmfMQqVJOcWQ">
        <body>The element that is owned by this template parameter for the purpose of providing a default.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3BMa2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3BMbGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N3BMbWEIEdqmfMQqVJOcWQ" name="StringExpression">
    <ownedComment xmi:id="_N3BMbmEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMbWEIEdqmfMQqVJOcWQ">
      <body>StringExpression is a specialization of the general Expression metaclass which adds the ability to contain sub-expressions and whose operands are exclusively LiteralStrings.</body>
    </ownedComment>
    <ownedRule xmi:id="_N3BMb2EIEdqmfMQqVJOcWQ" name="operands" constrainedElement="_N3BMbWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3BMcGEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMb2EIEdqmfMQqVJOcWQ">
        <body>All the operands of a StringExpression must be LiteralStrings</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N3BMcWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>operand->forAll (op | op.oclIsKindOf (LiteralString))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N3BMcmEIEdqmfMQqVJOcWQ" name="subexpressions" constrainedElement="_N3BMbWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3BMc2EIEdqmfMQqVJOcWQ" annotatedElement="_N3BMcmEIEdqmfMQqVJOcWQ">
        <body>If a StringExpression has sub-expressions, it cannot have operands and vice versa (this avoids the problem of having to
define a collating sequence between operands and subexpressions).
</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N3BMdGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty()</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N3BMdWEIEdqmfMQqVJOcWQ" general="_N3K9MmEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N3BMdmEIEdqmfMQqVJOcWQ" general="_NjfzdmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N3BMd2EIEdqmfMQqVJOcWQ" name="subExpression" type="_N3BMbWEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_N3nCHWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N3BMeGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N3BMeWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N3BMemEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMd2EIEdqmfMQqVJOcWQ">
        <body>The StringExpressions that constitute this StringExpression.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3BMe2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3BMfGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3BMfWEIEdqmfMQqVJOcWQ" name="owningExpression" type="_N3BMbWEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_N3nCHWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N3BMfmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N3BMf2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N3BMgGEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMfWEIEdqmfMQqVJOcWQ">
        <body>The string expression of which this expression is a substring.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3BMgWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3BMgmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_N3BMg2EIEdqmfMQqVJOcWQ" name="stringValue" isQuery="true" redefinedOperation="_Ni59Y2EIEdqmfMQqVJOcWQ" bodyCondition="_N3BMhWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3BMhGEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMg2EIEdqmfMQqVJOcWQ">
        <body>The query stringValue() returns the string that concatenates, in order, all the component string literals of all the subexpressions that are part of the StringExpression.

</body>
      </ownedComment>
      <ownedRule xmi:id="_N3BMhWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N3BMg2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N3BMhmEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if subExpression->notEmpty()
then subExpression->iterate(se; stringValue = | stringValue.concat(se.stringValue()))
else operand->iterate()(op; stringValue =  | stringValue.concat(op.value))</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N3BMh2EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N3BMiGEIEdqmfMQqVJOcWQ" name="TemplateBinding">
    <ownedComment xmi:id="_N3BMiWEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMiGEIEdqmfMQqVJOcWQ">
      <body>TemplateBinding is a directed relationship from a bound templateable element to the template signature of the target template. A TemplateBinding owns a set of template parameter substitutions.</body>
    </ownedComment>
    <ownedRule xmi:id="_N3BMimEIEdqmfMQqVJOcWQ" name="parameter_substitution_formal" constrainedElement="_N3BMiGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3BMi2EIEdqmfMQqVJOcWQ" annotatedElement="_N3BMimEIEdqmfMQqVJOcWQ">
        <body>Each parameter substitution must refer to a formal template parameter of the target template signature.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N3BMjGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>parameterSubstitution->forAll(b | template.parameter->includes(b.formal))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N3BMjWEIEdqmfMQqVJOcWQ" name="one_parameter_substitution" constrainedElement="_N3BMiGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3BMjmEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMjWEIEdqmfMQqVJOcWQ">
        <body>A binding contains at most one parameter substitution for each formal template parameter of the target template signature.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N3BMj2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>template.parameter->forAll(p | parameterSubstitution->select(b | b.formal = p)->size() &lt;= 1)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N3BMkGEIEdqmfMQqVJOcWQ" general="_NidRw2EIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N3BMkWEIEdqmfMQqVJOcWQ" name="boundElement" type="_N3K9MmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ _NidRxmEIEdqmfMQqVJOcWQ" association="_N3nCEGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N3BMkmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N3BMk2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N3BMlGEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMkWEIEdqmfMQqVJOcWQ">
        <body>The element that is bound by this binding.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3BMlWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3BMlmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3BMl2EIEdqmfMQqVJOcWQ" name="signature" type="_N3BMMGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidRzGEIEdqmfMQqVJOcWQ" association="_N3nCFWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3BMmGEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMl2EIEdqmfMQqVJOcWQ">
        <body>The template signature for the template that is the target of the binding.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3BMmWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3BMmmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3BMm2EIEdqmfMQqVJOcWQ" name="parameterSubstitution" type="_N3BMoWEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_N3nCGGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N3BMnGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N3BMnWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N3BMnmEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMm2EIEdqmfMQqVJOcWQ">
        <body>The parameter substitutions owned by this template binding.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3BMn2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3BMoGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N3BMoWEIEdqmfMQqVJOcWQ" name="TemplateParameterSubstitution">
    <ownedComment xmi:id="_N3BMomEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMoWEIEdqmfMQqVJOcWQ">
      <body>TemplateParameterSubstitution associates one or more actual parameters with a formal template parameter within the context of a TemplateBinding.</body>
    </ownedComment>
    <ownedRule xmi:id="_N3BMo2EIEdqmfMQqVJOcWQ" name="must_be_compatible" constrainedElement="_N3BMoWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3BMpGEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMo2EIEdqmfMQqVJOcWQ">
        <body>The actual parameter must be compatible with the formal template parameter, e.g. the actual parameter for a class template parameter must be a class.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N3BMpWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>actual->forAll(a | a.isCompatibleWith(formal.parameteredElement))</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N3BMpmEIEdqmfMQqVJOcWQ" general="_NidR0mEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N3BMp2EIEdqmfMQqVJOcWQ" name="formal" type="_N3BMTWEIEdqmfMQqVJOcWQ" association="_N3nCE2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3BMqGEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMp2EIEdqmfMQqVJOcWQ">
        <body>The formal template parameter that is associated with this substitution.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3BMqWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3BMqmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3BMq2EIEdqmfMQqVJOcWQ" name="templateBinding" type="_N3BMiGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_N3nCGGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N3BMrGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N3BMrWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N3BMrmEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMq2EIEdqmfMQqVJOcWQ">
        <body>The optional bindings from this element to templates.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3BMr2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3BMsGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3BMsWEIEdqmfMQqVJOcWQ" name="actual" type="_N3K9TWEIEdqmfMQqVJOcWQ" association="_N3nCGmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3BMsmEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMsWEIEdqmfMQqVJOcWQ">
        <body>The elements that are the actual parameters for this substitution.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3BMs2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3BMtGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3BMtWEIEdqmfMQqVJOcWQ" name="ownedActual" type="_N3K9TWEIEdqmfMQqVJOcWQ" subsettedProperty="_N3BMsWEIEdqmfMQqVJOcWQ _NidR2mEIEdqmfMQqVJOcWQ" association="_N3wzGGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N3BMtmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N3BMt2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N3BMuGEIEdqmfMQqVJOcWQ" annotatedElement="_N3BMtWEIEdqmfMQqVJOcWQ">
        <body>The actual parameters that are owned by this substitution.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3K9MGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3K9MWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N3K9MmEIEdqmfMQqVJOcWQ" name="TemplateableElement" isAbstract="true">
    <ownedComment xmi:id="_N3K9M2EIEdqmfMQqVJOcWQ" annotatedElement="_N3K9MmEIEdqmfMQqVJOcWQ">
      <body>TemplateableElement may contain a template signature which specifies the formal template parameters. A TemplateableElement that contains a template signature is often referred to as a template. TemplateableElement may contain bindings to templates that describe how the templateable element is constructed by replacing the formal template parameters with actual parameters. A TemplateableElement containing bindings is oftenreferred to as a bound element.</body>
    </ownedComment>
    <generalization xmi:id="_N3K9NGEIEdqmfMQqVJOcWQ" general="_NidR0mEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N3K9NWEIEdqmfMQqVJOcWQ" name="templateBinding" type="_N3BMiGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_N3nCEGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N3K9NmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N3K9N2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N3K9OGEIEdqmfMQqVJOcWQ" annotatedElement="_N3K9NWEIEdqmfMQqVJOcWQ">
        <body>The optional bindings from this element to templates.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3K9OWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3K9OmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3K9O2EIEdqmfMQqVJOcWQ" name="ownedTemplateSignature" type="_N3BMMGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_N3nCH2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N3K9PGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N3K9PWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N3K9PmEIEdqmfMQqVJOcWQ" annotatedElement="_N3K9O2EIEdqmfMQqVJOcWQ">
        <body>The optional template signature specifying the formal template parameters.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3K9P2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3K9QGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_N3K9QWEIEdqmfMQqVJOcWQ" name="parameterableElements" type="_N3K9TWEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_N3K9Q2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3K9QmEIEdqmfMQqVJOcWQ" annotatedElement="_N3K9QWEIEdqmfMQqVJOcWQ">
        <body>The query parameterableElements() returns the set of elements that may be used as the parametered elements for a template parameter of this templateable element. By default, this set includes all the owned elements. Subclasses may override this operation if they choose to restrict the set of parameterable elements.</body>
      </ownedComment>
      <ownedRule xmi:id="_N3K9Q2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N3K9QWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N3K9RGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = allOwnedElements->select(oclIsKindOf(ParameterableElement))</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N3K9RWEIEdqmfMQqVJOcWQ" type="_N3K9TWEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3K9RmEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3K9R2EIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
    <ownedOperation xmi:id="_N3K9SGEIEdqmfMQqVJOcWQ" name="isTemplate" isQuery="true" bodyCondition="_N3K9SmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3K9SWEIEdqmfMQqVJOcWQ" annotatedElement="_N3K9SGEIEdqmfMQqVJOcWQ">
        <body>The query isTemplate() returns whether this templateable element is actually a template.</body>
      </ownedComment>
      <ownedRule xmi:id="_N3K9SmEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N3K9SGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N3K9S2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = ownedSignature->notEmpty()</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N3K9TGEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N3K9TWEIEdqmfMQqVJOcWQ" name="ParameterableElement" isAbstract="true">
    <ownedComment xmi:id="_N3K9TmEIEdqmfMQqVJOcWQ" annotatedElement="_N3K9TWEIEdqmfMQqVJOcWQ">
      <body>A ParameterableElement can be referenced by a TemplateParameter when defining a formal template parameter for a template. A ParameterableElement can be referenced by a TemplateParameterSubstitution when used as an actual parameter in a binding of a template.

ParameterableElement is an abstract metaclass.

</body>
    </ownedComment>
    <generalization xmi:id="_N3K9T2EIEdqmfMQqVJOcWQ" general="_NidR0mEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N3K9UGEIEdqmfMQqVJOcWQ" name="templateParameter" type="_N3BMTWEIEdqmfMQqVJOcWQ" association="_N3nCHGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3K9UWEIEdqmfMQqVJOcWQ" annotatedElement="_N3K9UGEIEdqmfMQqVJOcWQ">
        <body>The template parameter that exposes this element as a formal parameter.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3K9UmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3K9U2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3K9VGEIEdqmfMQqVJOcWQ" name="owningTemplateParameter" type="_N3BMTWEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ _N3K9UGEIEdqmfMQqVJOcWQ" association="_N3nCIWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N3K9VWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N3K9VmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N3K9V2EIEdqmfMQqVJOcWQ" annotatedElement="_N3K9VGEIEdqmfMQqVJOcWQ">
        <body>The formal template parameter that owns this element.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3K9WGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3K9WWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_N3K9WmEIEdqmfMQqVJOcWQ" name="isCompatibleWith" isQuery="true" bodyCondition="_N3K9XGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3K9W2EIEdqmfMQqVJOcWQ" annotatedElement="_N3K9WmEIEdqmfMQqVJOcWQ">
        <body>The query isCompatibleWith() determines if this parameterable element is compatible with the specified parameterable element. By default parameterable element P is compatible with parameterable element Q if the kind of P is the same or a subtype as the kind of Q. Subclasses should override this operation to specify different compatibility constraints.</body>
      </ownedComment>
      <ownedRule xmi:id="_N3K9XGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N3K9WmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N3K9XWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = p->oclIsKindOf(self.oclType)</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N3K9XmEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_N3K9X2EIEdqmfMQqVJOcWQ" name="p" type="_N3K9TWEIEdqmfMQqVJOcWQ"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N3K9YGEIEdqmfMQqVJOcWQ" name="isTemplateParameter" isQuery="true" bodyCondition="_N3K9YmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3K9YWEIEdqmfMQqVJOcWQ" annotatedElement="_N3K9YGEIEdqmfMQqVJOcWQ">
        <body>The query isTemplateParameter() determines if this parameterable element is exposed as a formal template parameter.</body>
      </ownedComment>
      <ownedRule xmi:id="_N3K9YmEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N3K9YGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N3K9Y2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = templateParameter->notEmpty()</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N3K9ZGEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Ni59sGEIEdqmfMQqVJOcWQ" name="Property">
    <ownedComment xmi:id="_Ni59sWEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59sGEIEdqmfMQqVJOcWQ">
      <body>Property represents a declared state of one or more instances in terms of a named relationship to a value or values. When a property is an attribute of a classifier, the value or values are related to the instance of the classifier by being held in slots of the instance. When a property is an association end, the value or values are related to the instance or instances at the other end(s) of the association.



Property is indirectly a subclass of Constructs::TypedElement. The range of valid values represented by the property can be controlled by setting the property's type.</body>
    </ownedComment>
    <ownedComment xmi:id="_Nmxwz2EIEdqmfMQqVJOcWQ" annotatedElement="_Ni59sGEIEdqmfMQqVJOcWQ">
      <body>A property is a structural feature.

A property related to a classifier by ownedAttribute represents an attribute, and it may also represent an association end. It relates an instance of the class to a value or collection of values of the type of the attribute.

A property related to an Association by memberEnd or its specializations represents an end of the association. The type of property is the type of the end of the association.

</body>
    </ownedComment>
    <ownedComment xmi:id="_NrGQKmEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59sGEIEdqmfMQqVJOcWQ">
      <body>A property represents a set of instances that are owned by a containing classifier instance.</body>
    </ownedComment>
    <ownedComment xmi:id="_N1YNkGEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59sGEIEdqmfMQqVJOcWQ">
      <body>In the metamodel, Property is a specialization of DeploymentTarget.</body>
    </ownedComment>
    <ownedComment xmi:id="_N23bR2EIEdqmfMQqVJOcWQ" annotatedElement="_Ni59sGEIEdqmfMQqVJOcWQ">
      <body>Property represents a declared state of one or more instances in terms of a named relationship to a value or values. When a property is an attribute of a classifier, the value or values are related to the instance of the classifier by being held in slots of the instance. When a property is an association end, the value or values are related to the instance or instances at the other end(s) of the association. Property is indirectly a subclass of Constructs::TypedElement. The range of valid values represented by the property can be controlled by setting the property's type.

</body>
    </ownedComment>
    <ownedComment xmi:id="_N3K9ZWEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59sGEIEdqmfMQqVJOcWQ">
      <body>Property specializes ParameterableElement to specify that a property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.</body>
    </ownedComment>
    <ownedRule xmi:id="_Ni59smEIEdqmfMQqVJOcWQ" name="multiplicity_of_composite" constrainedElement="_Ni59sGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni59s2EIEdqmfMQqVJOcWQ" annotatedElement="_Ni59smEIEdqmfMQqVJOcWQ">
        <body>A multiplicity of a composite aggregation must not have an upper bound greater than 1.</body>
      </ownedComment>
      <ownedComment xmi:id="_Nmxw0GEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59smEIEdqmfMQqVJOcWQ">
        <body>A multiplicity on an aggregate end of a composite aggregation must not have an upper bound greater than 1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nmxw0WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>isComposite implies (upperBound()->isEmpty() or upperBound() &lt;= 1)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Ni59tWEIEdqmfMQqVJOcWQ" name="subsetting_context_conforms" constrainedElement="_Ni59sGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni59tmEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59tWEIEdqmfMQqVJOcWQ">
        <body>Subsetting may only occur when the context of the subsetting property conforms to the context of the subsetted property.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nmxw0mEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.subsettedProperty->notEmpty() implies
  (self.subsettingContext()->notEmpty() and self.subsettingContext()->forAll (sc |
    self.subsettedProperty->forAll(sp |
      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Ni59uGEIEdqmfMQqVJOcWQ" name="navigable_property_redefinition" constrainedElement="_Ni59sGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni59uWEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59uGEIEdqmfMQqVJOcWQ">
        <body>A navigable property can only be redefined or subsetted by a navigable property.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nmxw02EIEdqmfMQqVJOcWQ" language="OCL">
        <body>(self.subsettedProperty->exists(sp | sp.isNavigable()) implies self.isNavigable())
  and (self.redefinedProperty->exists(rp | rp.isNavigable()) implies self.isNavigable())</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Ni59u2EIEdqmfMQqVJOcWQ" name="subsetting_rules" constrainedElement="_Ni59sGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni59vGEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59u2EIEdqmfMQqVJOcWQ">
        <body>A subsetting property may strengthen the type of the subsetted property, and its upper bound may be less.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nmxw1GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.subsettedProperty->forAll(sp |
  self.type.conformsTo(sp.type) and
    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies
      self.upperBound()&lt;=sp.upperBound() ))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Ni59vmEIEdqmfMQqVJOcWQ" name="navigable_readonly" constrainedElement="_Ni59sGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni59v2EIEdqmfMQqVJOcWQ" annotatedElement="_Ni59vmEIEdqmfMQqVJOcWQ">
        <body>Only a navigable property can be marked as readOnly.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nmxw1WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>isReadOnly implies isNavigable()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Ni59wWEIEdqmfMQqVJOcWQ" name="derived_union_is_derived" constrainedElement="_Ni59sGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni59wmEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59wWEIEdqmfMQqVJOcWQ">
        <body>A derived union is derived.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nmxw1mEIEdqmfMQqVJOcWQ" language="OCL">
        <body>isDerivedUnion implies isDerived</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nmxw12EIEdqmfMQqVJOcWQ" name="derived_union_is_read_only" constrainedElement="_Ni59sGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nmxw2GEIEdqmfMQqVJOcWQ" annotatedElement="_Nmxw12EIEdqmfMQqVJOcWQ">
        <body>A derived union is read only.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nmxw2WEIEdqmfMQqVJOcWQ" language="OCL">
        <body>isDerivedUnion implies isReadOnly</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N1YNkWEIEdqmfMQqVJOcWQ" name="deployment_target" constrainedElement="_Ni59sGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N1YNkmEIEdqmfMQqVJOcWQ" annotatedElement="_N1YNkWEIEdqmfMQqVJOcWQ">
        <body>A Property can be a DeploymentTarget if it is a kind of Node and functions as a part in the internal structure of an encompassing Node.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N1YNk2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N3K9ZmEIEdqmfMQqVJOcWQ" name="binding_to_attribute" constrainedElement="_Ni59sGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3K9Z2EIEdqmfMQqVJOcWQ" annotatedElement="_N3K9ZmEIEdqmfMQqVJOcWQ">
        <body>A binding of a property template parameter representing an attribute must be to an attribute.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N3K9aGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>(isAttribute(self) and (templateParameterSubstitution->notEmpty())

  implies (templateParameterSubstitution->forAll(ts | isAttribute(ts.formal)))</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NrGQK2EIEdqmfMQqVJOcWQ" general="_NrGQSmEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N1YNlGEIEdqmfMQqVJOcWQ" general="_N1YNcGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_Ni59xGEIEdqmfMQqVJOcWQ" general="_NiwMimEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N3K9amEIEdqmfMQqVJOcWQ" general="_N3K9MmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Ni59z2EIEdqmfMQqVJOcWQ" name="isDerived">
      <ownedComment xmi:id="_Ni590GEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59z2EIEdqmfMQqVJOcWQ">
        <body>If isDerived is true, the value of the attribute is derived from information elsewhere.</body>
      </ownedComment>
      <ownedComment xmi:id="_Nmxw2mEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59z2EIEdqmfMQqVJOcWQ">
        <body>Specifies whether the Property is derived, i.e., whether its value or values can be computed from other information.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_Nmxw22EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ni59xWEIEdqmfMQqVJOcWQ" name="isReadOnly" redefinedProperty="_Nme10GEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni59xmEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59xWEIEdqmfMQqVJOcWQ">
        <body>This redefines the corresponding attribute in Basic::Property and Abstractions::StructuralFeature.</body>
      </ownedComment>
      <ownedComment xmi:id="_Nmxw3GEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59xWEIEdqmfMQqVJOcWQ">
        <body>If true, the attribute may only be read, and not written.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_Nmxw3WEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ni590mEIEdqmfMQqVJOcWQ" name="isDerivedUnion">
      <ownedComment xmi:id="_Ni5902EIEdqmfMQqVJOcWQ" annotatedElement="_Ni590mEIEdqmfMQqVJOcWQ">
        <body>Specifies whether the property is derived as the union of all of the properties that are constrained to subset it.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_Nmxw3mEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ni59yGEIEdqmfMQqVJOcWQ" name="default" isDerived="true">
      <eAnnotations xmi:id="_Nmxw32EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_Nmxw4GEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ni59yWEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59yGEIEdqmfMQqVJOcWQ">
        <body>Specifies a String that represents a value to be used when no argument is supplied for the Property.</body>
      </ownedComment>
      <ownedComment xmi:id="_Nmxw4WEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59yGEIEdqmfMQqVJOcWQ">
        <body>A String that is evaluated to give a default value for the Property when an object of the owning Classifier is instantiated.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nmxw4mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nmxw42EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nmxw5GEIEdqmfMQqVJOcWQ" name="aggregation" type="_NnrIsmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nmxw5WEIEdqmfMQqVJOcWQ" annotatedElement="_Nmxw5GEIEdqmfMQqVJOcWQ">
        <body>Specifies the kind of aggregation that applies to the Property.</body>
      </ownedComment>
      <defaultValue xmi:type="uml:InstanceValue" xmi:id="_Nmxw5mEIEdqmfMQqVJOcWQ" instance="_NnrItGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ni59zGEIEdqmfMQqVJOcWQ" name="isComposite" isDerived="true">
      <eAnnotations xmi:id="_Nmxw52EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_Nmxw6GEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ni59zWEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59zGEIEdqmfMQqVJOcWQ">
        <body>If isComposite is true, the object containing the attribute is a container for the object or value contained in the attribute.</body>
      </ownedComment>
      <ownedComment xmi:id="_Nmxw6WEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59zGEIEdqmfMQqVJOcWQ">
        <body>This is a derived value, indicating whether the aggregation of the Property is composite or not.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_Ni59zmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ni591WEIEdqmfMQqVJOcWQ" name="class" type="_Ni59kGEIEdqmfMQqVJOcWQ" subsettedProperty="_NjyuQGEIEdqmfMQqVJOcWQ _NjfzVmEIEdqmfMQqVJOcWQ _NidR-2EIEdqmfMQqVJOcWQ" association="_NjyuMmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_Ni591mEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Ni5912EIEdqmfMQqVJOcWQ" referenceName="class_" isResolveProxies="false"/>
      </eAnnotations>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nmxw6mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nmxw62EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ni594GEIEdqmfMQqVJOcWQ" name="redefinedProperty" type="_Ni59sGEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMb2EIEdqmfMQqVJOcWQ" association="_NjyuQ2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni594WEIEdqmfMQqVJOcWQ" annotatedElement="_Ni594GEIEdqmfMQqVJOcWQ">
        <body>References the properties that are redefined by this property.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nmxw7GEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nmxw7WEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ni592mEIEdqmfMQqVJOcWQ" name="owningAssociation" type="_Ni59cmEIEdqmfMQqVJOcWQ" subsettedProperty="_Ni599GEIEdqmfMQqVJOcWQ _NjfzVmEIEdqmfMQqVJOcWQ _NidR-2EIEdqmfMQqVJOcWQ" association="_NjyuOWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_Ni5922EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Ni593GEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ni593WEIEdqmfMQqVJOcWQ" annotatedElement="_Ni592mEIEdqmfMQqVJOcWQ">
        <body>References the owning association of this property, if any.</body>
      </ownedComment>
      <ownedComment xmi:id="_Nmxw7mEIEdqmfMQqVJOcWQ" annotatedElement="_Ni592mEIEdqmfMQqVJOcWQ">
        <body>References the owning association of this property.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nmxw72EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nmxw8GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ni597mEIEdqmfMQqVJOcWQ" name="datatype" type="_NjDHUGEIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ _NidR-2EIEdqmfMQqVJOcWQ _NjyuQGEIEdqmfMQqVJOcWQ" association="_Nj8fOmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_Ni5972EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Ni598GEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ni598WEIEdqmfMQqVJOcWQ" annotatedElement="_Ni597mEIEdqmfMQqVJOcWQ">
        <body>The DataType that owns this Operation.</body>
      </ownedComment>
      <ownedComment xmi:id="_Nmxw8WEIEdqmfMQqVJOcWQ" annotatedElement="_Ni597mEIEdqmfMQqVJOcWQ">
        <body>The DataType that owns this Property.

</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nmxw8mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nmxw82EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nm66sGEIEdqmfMQqVJOcWQ" name="defaultValue" type="_NiwMlmEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_Noj5emEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nm66sWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nm66smEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nm66s2EIEdqmfMQqVJOcWQ" annotatedElement="_Nm66sGEIEdqmfMQqVJOcWQ">
        <body>A ValueSpecification that is evaluated to give a default value for the Property when an object of the owning Classifier is instantiated.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nm66tGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nm66tWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ni596GEIEdqmfMQqVJOcWQ" name="opposite" type="_Ni59sGEIEdqmfMQqVJOcWQ" isDerived="true" association="_Nj8fMGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_Ni596WEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Ni596mEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ni5962EIEdqmfMQqVJOcWQ" annotatedElement="_Ni596GEIEdqmfMQqVJOcWQ">
        <body>In the case where the property is one navigable end of a binary association with both ends navigable, this gives the other end.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nm66tmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nm66t2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ni595GEIEdqmfMQqVJOcWQ" name="subsettedProperty" type="_Ni59sGEIEdqmfMQqVJOcWQ" association="_NjyuRmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni595WEIEdqmfMQqVJOcWQ" annotatedElement="_Ni595GEIEdqmfMQqVJOcWQ">
        <body>References the properties of which this property is constrained to be a subset.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nm66uGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nm66uWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ni599GEIEdqmfMQqVJOcWQ" name="association" type="_Ni59cmEIEdqmfMQqVJOcWQ" association="_NkGQQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni599WEIEdqmfMQqVJOcWQ" annotatedElement="_Ni599GEIEdqmfMQqVJOcWQ">
        <body>References the association of which this property is a member, if any.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nm66umEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nm66u2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N23bSGEIEdqmfMQqVJOcWQ" name="qualifier" type="_Ni59sGEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_N23bVGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N23bSWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N23bSmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N23bS2EIEdqmfMQqVJOcWQ" annotatedElement="_N23bSGEIEdqmfMQqVJOcWQ">
        <body>An optional list of ordered qualifier attributes for the end. If the list is empty, then the Association is not qualified.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N23bTGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N23bTWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N23bTmEIEdqmfMQqVJOcWQ" name="associationEnd" type="_Ni59sGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR4GEIEdqmfMQqVJOcWQ" association="_N23bVGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N23bT2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N23bUGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N23bUWEIEdqmfMQqVJOcWQ" annotatedElement="_N23bTmEIEdqmfMQqVJOcWQ">
        <body>Designates the optional association end that owns a qualifier attribute.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N23bUmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N23bU2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_Ni5-E2EIEdqmfMQqVJOcWQ" name="isAttribute" isQuery="true" bodyCondition="_Ni5-FWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni5-FGEIEdqmfMQqVJOcWQ" annotatedElement="_Ni5-E2EIEdqmfMQqVJOcWQ">
        <body>The query isAttribute() is true if the Property is defined as an attribute of some classifier.</body>
      </ownedComment>
      <ownedRule xmi:id="_Ni5-FWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_Ni5-E2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nm66vGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = Classifier.allInstances->exists(c | c.attribute->includes(p))</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_Ni5-F2EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_Ni5-GGEIEdqmfMQqVJOcWQ" name="p" type="_Ni59sGEIEdqmfMQqVJOcWQ" effect="read"/>
    </ownedOperation>
    <ownedOperation xmi:id="_Ni59-GEIEdqmfMQqVJOcWQ" name="opposite" type="_Ni59sGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_Ni59_GEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_Ni59-WEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EOperation" xmi:id="_Ni59-mEIEdqmfMQqVJOcWQ" operationName="getOpposite"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ni59-2EIEdqmfMQqVJOcWQ" annotatedElement="_Ni59-GEIEdqmfMQqVJOcWQ">
        <body>If this property is owned by a class, associated with a binary association, and the other end of the association is also owned by a class, then opposite gives the other end.</body>
      </ownedComment>
      <ownedRule xmi:id="_Ni59_GEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_Ni59-GEIEdqmfMQqVJOcWQ _Ni596GEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nm66vWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if owningAssociation->isEmpty() and association.memberEnd->size() = 2
  then
    let otherEnd = (association.memberEnd - self)->any() in
      if otherEnd.owningAssociation->isEmpty() then otherEnd else Set{} endif
    else Set {}
    endif</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_Ni59_mEIEdqmfMQqVJOcWQ" type="_Ni59sGEIEdqmfMQqVJOcWQ" direction="return"/>
    </ownedOperation>
    <ownedOperation xmi:id="_Nm66vmEIEdqmfMQqVJOcWQ" name="isComposite" isQuery="true" bodyCondition="_Nm66wGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nm66v2EIEdqmfMQqVJOcWQ" annotatedElement="_Nm66vmEIEdqmfMQqVJOcWQ">
        <body>The value of isComposite is true only if aggregation is composite.</body>
      </ownedComment>
      <ownedRule xmi:id="_Nm66wGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_Nm66vmEIEdqmfMQqVJOcWQ _Ni59zGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nm66wWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = (self.aggregation = #composite)</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_Nm66wmEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_Ni59_2EIEdqmfMQqVJOcWQ" name="isConsistentWith" isQuery="true" precondition="_Ni5-AWEIEdqmfMQqVJOcWQ" redefinedOperation="_NiwMdWEIEdqmfMQqVJOcWQ" bodyCondition="_Ni5-A2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni5-AGEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59_2EIEdqmfMQqVJOcWQ">
        <body>The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent with a redefined property if the type of the redefining property conforms to the type of the redefined property, the multiplicity of the redefining property (if specified) is contained in the multiplicity of the redefined property, and the redefining property is derived if the redefined property is derived.</body>
      </ownedComment>
      <ownedComment xmi:id="_Nm66w2EIEdqmfMQqVJOcWQ" annotatedElement="_Ni59_2EIEdqmfMQqVJOcWQ">
        <body>The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent with a redefined property if the type of the redefining property conforms to the type of the redefined property, the multiplicity of the redefining property (if specified) is contained in the multiplicity of the redefined property, and the redefining property is derived if the redefined attribute is property.</body>
      </ownedComment>
      <ownedRule xmi:id="_Ni5-AWEIEdqmfMQqVJOcWQ" constrainedElement="_Ni59_2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nm66xGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>redefinee.isRedefinitionContextValid(self)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_Ni5-A2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_Ni59_2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nm66xWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = redefinee.oclIsKindOf(Property) and 
  let prop : Property = redefinee.oclAsType(Property) in 
  (prop.type.conformsTo(self.type) and 
  ((prop.lowerBound()->notEmpty() and self.lowerBound()->notEmpty()) implies prop.lowerBound() >= self.lowerBound()) and 
  ((prop.upperBound()->notEmpty() and self.upperBound()->notEmpty()) implies prop.lowerBound() &lt;= self.lowerBound()) and 
  (self.isDerived implies prop.isDerived) and
  (self.isComposite implies prop.isComposite))</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_Ni5-BWEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_Ni5-BmEIEdqmfMQqVJOcWQ" name="redefinee" type="_NiwMYGEIEdqmfMQqVJOcWQ"/>
    </ownedOperation>
    <ownedOperation xmi:id="_Ni5-B2EIEdqmfMQqVJOcWQ" name="subsettingContext" type="_NjWCumEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_Ni5-CWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni5-CGEIEdqmfMQqVJOcWQ" annotatedElement="_Ni5-B2EIEdqmfMQqVJOcWQ">
        <body>The query subsettingContext() gives the context for subsetting a property. It consists, in the case of an attribute, of the corresponding classifier, and in the case of an association end, all of the classifiers at the other ends.</body>
      </ownedComment>
      <ownedRule xmi:id="_Ni5-CWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_Ni5-B2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nm66xmEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if association->notEmpty()
then association.endType-type
else if classifier->notEmpty() then Set{classifier} else Set{} endif
endif</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_Ni5-C2EIEdqmfMQqVJOcWQ" type="_NjWCumEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nm66x2EIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nm66yGEIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
    <ownedOperation xmi:id="_Ni5-DmEIEdqmfMQqVJOcWQ" name="isNavigable" isQuery="true" bodyCondition="_Ni5-EGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni5-D2EIEdqmfMQqVJOcWQ" annotatedElement="_Ni5-DmEIEdqmfMQqVJOcWQ">
        <body>The query isNavigable indicates whether it is possible to navigate across the property.</body>
      </ownedComment>
      <ownedComment xmi:id="_Nm66yWEIEdqmfMQqVJOcWQ" annotatedElement="_Ni5-DmEIEdqmfMQqVJOcWQ">
        <body>The query isNavigable() indicates whether it is possible to navigate across the property.</body>
      </ownedComment>
      <ownedRule xmi:id="_Ni5-EGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_Ni5-DmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nm66ymEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = not classifier->isEmpty() or association.owningAssociation.navigableOwnedEnd->includes(self)</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_Ni5-EmEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_Nm66y2EIEdqmfMQqVJOcWQ" name="getDefault" visibility="protected">
      <returnResult xmi:id="_Nm66zGEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nm66zWEIEdqmfMQqVJOcWQ" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nm66zmEIEdqmfMQqVJOcWQ"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
    </ownedOperation>
    <ownedOperation xmi:id="_Nm66z2EIEdqmfMQqVJOcWQ" name="setDefault" visibility="protected">
      <ownedParameter xmi:id="_Nm660GEIEdqmfMQqVJOcWQ" name="newDefault" effect="read">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="_Nm660WEIEdqmfMQqVJOcWQ" name="setIsComposite" visibility="protected">
      <ownedParameter xmi:id="_Nm660mEIEdqmfMQqVJOcWQ" name="newIsComposite" effect="read">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="_Nm6602EIEdqmfMQqVJOcWQ" name="setOpposite" visibility="protected">
      <ownedParameter xmi:id="_Nm661GEIEdqmfMQqVJOcWQ" name="newOpposite" type="_Ni59sGEIEdqmfMQqVJOcWQ" effect="read"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NiwMlmEIEdqmfMQqVJOcWQ" name="ValueSpecification" isAbstract="true">
    <ownedComment xmi:id="_NiwMl2EIEdqmfMQqVJOcWQ" annotatedElement="_NiwMlmEIEdqmfMQqVJOcWQ">
      <body>ValueSpecification is an abstract metaclass used to identify a value or values in a model. It may reference an instance or it may be an expression denoting an instance or instances when evaluated. It adds a specialization to Constructs::TypedElement.</body>
    </ownedComment>
    <ownedComment xmi:id="_NnhXtGEIEdqmfMQqVJOcWQ" annotatedElement="_NiwMlmEIEdqmfMQqVJOcWQ">
      <body>ValueSpecification is an abstract metaclass used to identify a value or values in a model. It may reference an instance or it may be an expression denoting an instance or instances when evaluated.</body>
    </ownedComment>
    <ownedComment xmi:id="_N3K9a2EIEdqmfMQqVJOcWQ" annotatedElement="_NiwMlmEIEdqmfMQqVJOcWQ">
      <body>ValueSpecification specializes ParameterableElement to specify that a value specification can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.</body>
    </ownedComment>
    <generalization xmi:id="_NiwMmGEIEdqmfMQqVJOcWQ" general="_NiwMj2EIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NiwMmWEIEdqmfMQqVJOcWQ" general="_Nimb8GEIEdqmfMQqVJOcWQ"/>
    <ownedOperation xmi:id="_NiwMmmEIEdqmfMQqVJOcWQ" name="isComputable" isQuery="true" bodyCondition="_NiwMnGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NiwMm2EIEdqmfMQqVJOcWQ" annotatedElement="_NiwMmmEIEdqmfMQqVJOcWQ">
        <body>The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all value specifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute the value of all literals.</body>
      </ownedComment>
      <ownedRule xmi:id="_NiwMnGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NiwMmmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnhXtWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = false</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NiwMnmEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NiwMn2EIEdqmfMQqVJOcWQ" name="integerValue" isQuery="true" bodyCondition="_NiwMoWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NiwMoGEIEdqmfMQqVJOcWQ" annotatedElement="_NiwMn2EIEdqmfMQqVJOcWQ">
        <body>The query integerValue() gives a single Integer value when one can be computed.</body>
      </ownedComment>
      <ownedRule xmi:id="_NiwMoWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NiwMn2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnhXtmEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = Set{}</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NiwMo2EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NiwMpGEIEdqmfMQqVJOcWQ" name="booleanValue" isQuery="true" bodyCondition="_Ni59YGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NiwMpWEIEdqmfMQqVJOcWQ" annotatedElement="_NiwMpGEIEdqmfMQqVJOcWQ">
        <body>The query booleanValue() gives a single Boolean value when one can be computed.</body>
      </ownedComment>
      <ownedRule xmi:id="_Ni59YGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NiwMpGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnrIoGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = Set{}</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_Ni59YmEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_Ni59Y2EIEdqmfMQqVJOcWQ" name="stringValue" isQuery="true" bodyCondition="_Ni59ZWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni59ZGEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59Y2EIEdqmfMQqVJOcWQ">
        <body>The query stringValue() gives a single String value when one can be computed.</body>
      </ownedComment>
      <ownedRule xmi:id="_Ni59ZWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_Ni59Y2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnrIoWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = Set{}</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_Ni59Z2EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010B103C3"/>
    </ownedOperation>
    <ownedOperation xmi:id="_Ni59aGEIEdqmfMQqVJOcWQ" name="unlimitedValue" isQuery="true" bodyCondition="_Ni59amEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni59aWEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59aGEIEdqmfMQqVJOcWQ">
        <body>The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.</body>
      </ownedComment>
      <ownedRule xmi:id="_Ni59amEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_Ni59aGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnrIomEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = Set{}</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_Ni59bGEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3DE6A93C0003"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3DE6A93C0003"/>
    </ownedOperation>
    <ownedOperation xmi:id="_Ni59bWEIEdqmfMQqVJOcWQ" name="isNull" isQuery="true" bodyCondition="_Ni59b2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni59bmEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59bWEIEdqmfMQqVJOcWQ">
        <body>The query isNull() returns true when it can be computed that the value is null.</body>
      </ownedComment>
      <ownedRule xmi:id="_Ni59b2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_Ni59bWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnrIo2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = false</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_Ni59cWEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N3K9bWEIEdqmfMQqVJOcWQ" name="isCompatibleWith" isQuery="true" redefinedOperation="_N3K9WmEIEdqmfMQqVJOcWQ" bodyCondition="_N3K9b2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3K9bmEIEdqmfMQqVJOcWQ" annotatedElement="_N3K9bWEIEdqmfMQqVJOcWQ">
        <body>The query isCompatibleWith() determines if this parameterable element is compatible with the specified parameterable element. By default parameterable element P is compatible with parameterable element Q if the kind of P is the same or a subtype as the kind of Q. In addition, for ValueSpecification, the type must be conformant with the type of the specified parameterable element.

</body>
      </ownedComment>
      <ownedRule xmi:id="_N3K9b2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N3K9bWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N3K9cGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = p->oclIsKindOf(self.oclType) and self.type.conformsTo(p.oclAsType(TypedElement).type)</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N3K9cWEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_N3K9cmEIEdqmfMQqVJOcWQ" name="p" type="_N3K9TWEIEdqmfMQqVJOcWQ"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NjM4UGEIEdqmfMQqVJOcWQ" name="Operation">
    <ownedComment xmi:id="_NjM4UWEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4UGEIEdqmfMQqVJOcWQ">
      <body>An operation is owned by a class and may be invoked in the context of objects that are instances of that class. It is a typed element and a multiplicity element.</body>
    </ownedComment>
    <ownedComment xmi:id="_NnErsGEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4UGEIEdqmfMQqVJOcWQ">
      <body>An expression contains language-specific text strings used to describe a value or values, and an optional specification of the languages.

One predefined language for specifying expressions is OCL. Natural language or programming languages may also be used.

</body>
    </ownedComment>
    <ownedComment xmi:id="_NqzVXWEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4UGEIEdqmfMQqVJOcWQ">
      <body>An operation is a behavioral feature of a classifier that specifies the name, type, parameters, and constraints for invoking an associated behavior.</body>
    </ownedComment>
    <ownedComment xmi:id="_Ns4YzGEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4UGEIEdqmfMQqVJOcWQ">
      <body>An operation may invoke both the execution of method behaviors as well as other behavioral responses.</body>
    </ownedComment>
    <ownedComment xmi:id="_N3K9c2EIEdqmfMQqVJOcWQ" annotatedElement="_NjM4UGEIEdqmfMQqVJOcWQ">
      <body>Operation specializes TemplateableElement in order to support specification of template operations and bound operations.</body>
    </ownedComment>
    <ownedRule xmi:id="_NjM4VWEIEdqmfMQqVJOcWQ" name="at_most_one_return" constrainedElement="_NjM4UGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjM4VmEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4VWEIEdqmfMQqVJOcWQ">
        <body>An operation can have at most one return parameter; i.e., an owned parameter with the direction set to 'return'</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnErsWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.ownedParameter->select(par | par.direction = #return)->size() &lt;= 1</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NjM4UmEIEdqmfMQqVJOcWQ" name="only_body_for_query" constrainedElement="_NjM4UGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjM4U2EIEdqmfMQqVJOcWQ" annotatedElement="_NjM4UmEIEdqmfMQqVJOcWQ">
        <body>A bodyCondition can only be specified for a query operation.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnErsmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>bodyCondition->notEmpty() implies isQuery</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NjM4WGEIEdqmfMQqVJOcWQ" general="_NjM44WEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N3K9dGEIEdqmfMQqVJOcWQ" general="_N3K9TWEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N3K9dWEIEdqmfMQqVJOcWQ" general="_N3K9MmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NjM4WWEIEdqmfMQqVJOcWQ" name="isQuery">
      <ownedComment xmi:id="_NjM4WmEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4WWEIEdqmfMQqVJOcWQ">
        <body>Specifies whether an execution of the BehavioralFeature leaves the state of the system unchanged (isQuery=true) or whether side effects may occur (isQuery=false).</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NnErs2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjM4XGEIEdqmfMQqVJOcWQ" name="isOrdered" isDerived="true">
      <eAnnotations xmi:id="_NjM4XWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NjM4XmEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjM4X2EIEdqmfMQqVJOcWQ" annotatedElement="_NjM4XGEIEdqmfMQqVJOcWQ">
        <body>Redefines the corresponding property from Basic to derive this information from the return result for this Operation.</body>
      </ownedComment>
      <ownedComment xmi:id="_NnErtGEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4XGEIEdqmfMQqVJOcWQ">
        <body>Specifies whether the return parameter is ordered or not, if present.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NnErtWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjM4YWEIEdqmfMQqVJOcWQ" name="isUnique" isDerived="true">
      <eAnnotations xmi:id="_NjM4YmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NjM4Y2EIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjM4ZGEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4YWEIEdqmfMQqVJOcWQ">
        <body>Redefines the corresponding property from Basic to derive this information from the return result for this Operation.</body>
      </ownedComment>
      <ownedComment xmi:id="_NnErtmEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4YWEIEdqmfMQqVJOcWQ">
        <body>Specifies whether the return parameter is unique or not, if present.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_NnErt2EIEdqmfMQqVJOcWQ" value="true"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjM4ZmEIEdqmfMQqVJOcWQ" name="lower" isDerived="true">
      <eAnnotations xmi:id="_NjM4Z2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NjM4aGEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjM4aWEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4ZmEIEdqmfMQqVJOcWQ">
        <body>Redefines the corresponding property from Basic to derive this information from the return result for this Operation.</body>
      </ownedComment>
      <ownedComment xmi:id="_NnEruGEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4ZmEIEdqmfMQqVJOcWQ">
        <body>Specifies the lower multiplicity of the return parameter, if present.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnEruWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnErumEIEdqmfMQqVJOcWQ"/>
      <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_NnEru2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjM4bWEIEdqmfMQqVJOcWQ" name="upper" isDerived="true">
      <eAnnotations xmi:id="_NjM4bmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NjM4b2EIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjM4cGEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4bWEIEdqmfMQqVJOcWQ">
        <body>Redefines the corresponding property from Basic to derive this information from the return result for this Operation.</body>
      </ownedComment>
      <ownedComment xmi:id="_NnErvGEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4bWEIEdqmfMQqVJOcWQ">
        <body>Specifies the upper multiplicity of the return parameter, if present.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3DE6A93C0003"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnErvWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnErvmEIEdqmfMQqVJOcWQ"/>
      <defaultValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnErv2EIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjM4dGEIEdqmfMQqVJOcWQ" name="class" type="_Ni59kGEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMaWEIEdqmfMQqVJOcWQ _NjfzVmEIEdqmfMQqVJOcWQ _NidR-2EIEdqmfMQqVJOcWQ" association="_NjyuNWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NjM4dWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjM4dmEIEdqmfMQqVJOcWQ" referenceName="class_" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjM4d2EIEdqmfMQqVJOcWQ" annotatedElement="_NjM4dGEIEdqmfMQqVJOcWQ">
        <body>The class that owns the operation.</body>
      </ownedComment>
      <ownedComment xmi:id="_NnErwGEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4dGEIEdqmfMQqVJOcWQ">
        <body>The class that owns this operation.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnErwWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnErwmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjM4lGEIEdqmfMQqVJOcWQ" name="precondition" type="_NjDHfmEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbwWEIEdqmfMQqVJOcWQ" association="_NkZLPWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NjM4lWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjM4lmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NnErw2EIEdqmfMQqVJOcWQ" annotatedElement="_NjM4lGEIEdqmfMQqVJOcWQ">
        <body>An optional set of Constraints on the state of the system when the Operation is invoked.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnErxGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnErxWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjM4mWEIEdqmfMQqVJOcWQ" name="postcondition" type="_NjDHfmEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbwWEIEdqmfMQqVJOcWQ" association="_NkiVEGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NjM4mmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjM4m2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NnErxmEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4mWEIEdqmfMQqVJOcWQ">
        <body>An optional set of Constraints specifying the state of the system when the Operation is completed.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnErx2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnEryGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjM4hGEIEdqmfMQqVJOcWQ" name="redefinedOperation" type="_NjM4UGEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMb2EIEdqmfMQqVJOcWQ" association="_Nj8fRGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjM4hWEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4hGEIEdqmfMQqVJOcWQ">
        <body>References the Operations that are redefined by this Operation.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnEryWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnErymEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjM4emEIEdqmfMQqVJOcWQ" name="datatype" type="_NjDHUGEIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ _NiwMaWEIEdqmfMQqVJOcWQ _NidR-2EIEdqmfMQqVJOcWQ" association="_Nj8fPWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NjM4e2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjM4fGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjM4fWEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4emEIEdqmfMQqVJOcWQ">
        <body>The DataType that owns this Operation.</body>
      </ownedComment>
      <ownedComment xmi:id="_NnEry2EIEdqmfMQqVJOcWQ" annotatedElement="_NjM4emEIEdqmfMQqVJOcWQ">
        <body>The DataType that owns this Property.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnErzGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnErzWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjM4nmEIEdqmfMQqVJOcWQ" name="bodyCondition" type="_NjDHfmEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbwWEIEdqmfMQqVJOcWQ" association="_NkiVFWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NjM4n2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjM4oGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NnErzmEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4nmEIEdqmfMQqVJOcWQ">
        <body>An optional Constraint on the result values of an invocation of this Operation.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnErz2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnEr0GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjM4iGEIEdqmfMQqVJOcWQ" name="type" type="_NjWCumEIEdqmfMQqVJOcWQ" isDerived="true" association="_NkGQRGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NjM4iWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjM4imEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjM4i2EIEdqmfMQqVJOcWQ" annotatedElement="_NjM4iGEIEdqmfMQqVJOcWQ">
        <body>Redefines the corresponding property from Basic to derive this information from the return result for this Operation.</body>
      </ownedComment>
      <ownedComment xmi:id="_NnEr0WEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4iGEIEdqmfMQqVJOcWQ">
        <body>Specifies the return result of the operation, if present.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnEr0mEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnEr02EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjM4jmEIEdqmfMQqVJOcWQ" name="ownedParameter" type="_NjM40GEIEdqmfMQqVJOcWQ" redefinedProperty="_NjM45WEIEdqmfMQqVJOcWQ" association="_NkZLL2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NjM4j2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjM4kGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjM4kWEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4jmEIEdqmfMQqVJOcWQ">
        <body>Specifies the ordered set of formal parameters of this BehavioralFeature.</body>
      </ownedComment>
      <ownedComment xmi:id="_NnEr1GEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4jmEIEdqmfMQqVJOcWQ">
        <body>Specifies the parameters owned by this Operation.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnEr1WEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnEr1mEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjM4gGEIEdqmfMQqVJOcWQ" name="raisedException" type="_NjWCumEIEdqmfMQqVJOcWQ" redefinedProperty="_NjM462EIEdqmfMQqVJOcWQ" association="_Nj8fQWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjM4gWEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4gGEIEdqmfMQqVJOcWQ">
        <body>References the Types representing exceptions that may be raised during an invocation of this operation.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnEr12EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnEr2GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqzVXmEIEdqmfMQqVJOcWQ" name="interface" type="_NqzVLGEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMaWEIEdqmfMQqVJOcWQ" association="_Nq8fFmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NqzVX2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqzVYGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqzVYWEIEdqmfMQqVJOcWQ" annotatedElement="_NqzVXmEIEdqmfMQqVJOcWQ">
        <body>The Interface that owns this Operation.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqzVYmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqzVY2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3K9dmEIEdqmfMQqVJOcWQ" name="templateParameter" type="_N3UHIGEIEdqmfMQqVJOcWQ" redefinedProperty="_N3K9UGEIEdqmfMQqVJOcWQ" association="_N3wzMGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3K9d2EIEdqmfMQqVJOcWQ" annotatedElement="_N3K9dmEIEdqmfMQqVJOcWQ">
        <body>The template parameter that exposes this element as a formal parameter.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3K9eGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3K9eWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NjM4o2EIEdqmfMQqVJOcWQ" name="isOrdered" isQuery="true" bodyCondition="_NjM4pWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjM4pGEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4o2EIEdqmfMQqVJOcWQ">
        <body>If this operation has a return parameter, isOrdered equals the value of isOrdered for that parameter. Otherwise isOrdered is false.</body>
      </ownedComment>
      <ownedRule xmi:id="_NjM4pWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NjM4o2EIEdqmfMQqVJOcWQ _NjM4XGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnEr2WEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if returnResult()->notEmpty() then returnResult()->any().isOrdered else false endif</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NjM4p2EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NjM4qGEIEdqmfMQqVJOcWQ" name="isUnique" isQuery="true" bodyCondition="_NjM4qmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjM4qWEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4qGEIEdqmfMQqVJOcWQ">
        <body>If this operation has a return parameter, isUnique equals the value of isUnique for that parameter. Otherwise isUnique is true.</body>
      </ownedComment>
      <ownedComment xmi:id="_NnEr2mEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4qGEIEdqmfMQqVJOcWQ">
        <body>If this operation has a return parameter, isUnique equals the value of isUnique for that parameter. Otherwise isUnique is true.

</body>
      </ownedComment>
      <ownedRule xmi:id="_NjM4qmEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NjM4qGEIEdqmfMQqVJOcWQ _NjM4YWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnEr22EIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if returnResult()->notEmpty() then returnResult()->any().isUnique else true endif</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NjM4rGEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NjM4rWEIEdqmfMQqVJOcWQ" name="lower" isQuery="true" bodyCondition="_NjM4sWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NjM4rmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EOperation" xmi:id="_NjM4r2EIEdqmfMQqVJOcWQ" operationName="lowerBound"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjM4sGEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4rWEIEdqmfMQqVJOcWQ">
        <body>If this operation has a return parameter, lower equals the value of lower for that parameter. Otherwise lower is not defined.</body>
      </ownedComment>
      <ownedComment xmi:id="_NnEr3GEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4rWEIEdqmfMQqVJOcWQ">
        <body>If this operation has a return parameter, lower equals the value of lower for that parameter. Otherwise lower is not defined.

</body>
      </ownedComment>
      <ownedRule xmi:id="_NjM4sWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NjM4rWEIEdqmfMQqVJOcWQ _NjM4ZmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnEr3WEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if returnResult()->notEmpty() then returnResult()->any().lower else Set{} endif</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NjM4s2EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NjM4tGEIEdqmfMQqVJOcWQ" name="upper" isQuery="true" bodyCondition="_NjM4uGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NjM4tWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EOperation" xmi:id="_NjM4tmEIEdqmfMQqVJOcWQ" operationName="upperBound"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjM4t2EIEdqmfMQqVJOcWQ" annotatedElement="_NjM4tGEIEdqmfMQqVJOcWQ">
        <body>If this operation has a return parameter, upper equals the value of upper for that parameter. Otherwise upper is not defined.</body>
      </ownedComment>
      <ownedComment xmi:id="_NnEr3mEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4tGEIEdqmfMQqVJOcWQ">
        <body>If this operation has a return parameter, upper equals the value of upper for that parameter. Otherwise upper is not defined.

</body>
      </ownedComment>
      <ownedRule xmi:id="_NjM4uGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NjM4tGEIEdqmfMQqVJOcWQ _NjM4bWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnEr32EIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if returnResult()->notEmpty() then returnResult()->any().upper else Set{} endif</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NjM4umEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3DE6A93C0003"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3DE6A93C0003"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NjM4u2EIEdqmfMQqVJOcWQ" name="type" type="_NjWCumEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_NjM4v2EIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NjM4vGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EOperation" xmi:id="_NjM4vWEIEdqmfMQqVJOcWQ" operationName="getType"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjM4vmEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4u2EIEdqmfMQqVJOcWQ">
        <body>If this operation has a return parameter, type equals the value of type for that parameter. Otherwise type is not defined.</body>
      </ownedComment>
      <ownedRule xmi:id="_NjM4v2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NjM4u2EIEdqmfMQqVJOcWQ _NjM4iGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnEr4GEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if returnResult()->notEmpty() then returnResult()->any().type else Set{} endif</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NjM4wWEIEdqmfMQqVJOcWQ" type="_NjWCumEIEdqmfMQqVJOcWQ" direction="return"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NjM4wmEIEdqmfMQqVJOcWQ" name="isConsistentWith" isQuery="true" precondition="_NjM4xGEIEdqmfMQqVJOcWQ" redefinedOperation="_NiwMdWEIEdqmfMQqVJOcWQ" bodyCondition="_NjM4xmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjM4w2EIEdqmfMQqVJOcWQ" annotatedElement="_NjM4wmEIEdqmfMQqVJOcWQ">
        <body>The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent in the sense of maintaining type covariance. Other senses of consistency may be required, for example to determine consistency in the sense of contravariance. Users may define alternative queries under names different from 'isConsistentWith()', as for example, users may define a query named 'isContravariantWith()'.</body>
      </ownedComment>
      <ownedComment xmi:id="_NnEr4WEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4wmEIEdqmfMQqVJOcWQ">
        <body>The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining operation is consistent with a redefined operation if it has the same number of owned parameters, and the type of each owned parameter conforms to the type of the corresponding redefined parameter. </body>
      </ownedComment>
      <ownedRule xmi:id="_NjM4xGEIEdqmfMQqVJOcWQ" constrainedElement="_NjM4wmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnEr4mEIEdqmfMQqVJOcWQ" language="OCL">
          <body>redefinee.isRedefinitionContextValid(self)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_NjM4xmEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NjM4wmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnEr42EIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = (redefinee.oclIsKindOf(Operation) and
let op: Operation = redefinee.oclAsType(Operation) in
self.ownedParameter.size() = op.ownedParameter.size() and
forAll(i | op.ownedParameter[i].type.conformsTo(self.ownedParameter[i].type))
)</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NjM4yGEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_NjM4yWEIEdqmfMQqVJOcWQ" name="redefinee" type="_NiwMYGEIEdqmfMQqVJOcWQ"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NjM4ymEIEdqmfMQqVJOcWQ" name="returnResult" type="_NjM40GEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_NjM4y2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NnEr5GEIEdqmfMQqVJOcWQ" annotatedElement="_NjM4ymEIEdqmfMQqVJOcWQ">
        <body>The query returnResult() returns the set containing the return parameter of the Operation if one exists, otherwise, it returns an empty set</body>
      </ownedComment>
      <ownedRule xmi:id="_NjM4y2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NjM4ymEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NnEr5WEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = ownedParameter->select (par | par.direction = #return)</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NjM4zWEIEdqmfMQqVJOcWQ" type="_NjM40GEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NnEr5mEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NnEr52EIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
    <ownedOperation xmi:id="_NnOcsGEIEdqmfMQqVJOcWQ" name="getLower" visibility="protected">
      <returnResult xmi:id="_NnOcsWEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NnOcsmEIEdqmfMQqVJOcWQ" name="getUpper" visibility="protected">
      <returnResult xmi:id="_NnOcs2EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3DE6A93C0003"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3DE6A93C0003"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NnOctGEIEdqmfMQqVJOcWQ" name="setIsOrdered" visibility="protected">
      <ownedParameter xmi:id="_NnOctWEIEdqmfMQqVJOcWQ" name="newIsOrdered" effect="read">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="_NnOctmEIEdqmfMQqVJOcWQ" name="setIsUnique" visibility="protected">
      <ownedParameter xmi:id="_NnOct2EIEdqmfMQqVJOcWQ" name="newIsUnique" effect="read">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="_NnOcuGEIEdqmfMQqVJOcWQ" name="setLower" visibility="protected">
      <ownedParameter xmi:id="_NnOcuWEIEdqmfMQqVJOcWQ" name="newLower" effect="read">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="_NnOcumEIEdqmfMQqVJOcWQ" name="setUpper" visibility="protected">
      <ownedParameter xmi:id="_NnOcu2EIEdqmfMQqVJOcWQ" name="newUpper" effect="read">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3DE6A93C0003"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="_NnOcvGEIEdqmfMQqVJOcWQ" name="setType" visibility="protected">
      <ownedParameter xmi:id="_NnOcvWEIEdqmfMQqVJOcWQ" name="newType" type="_NjWCumEIEdqmfMQqVJOcWQ" effect="read"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N3UHIGEIEdqmfMQqVJOcWQ" name="OperationTemplateParameter">
    <ownedComment xmi:id="_N3UHIWEIEdqmfMQqVJOcWQ" annotatedElement="_N3UHIGEIEdqmfMQqVJOcWQ">
      <body>OperationTemplateParameter is a template parameter where the parametered element is an Operation.</body>
    </ownedComment>
    <generalization xmi:id="_N3UHImEIEdqmfMQqVJOcWQ" general="_N3BMTWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N3UHI2EIEdqmfMQqVJOcWQ" name="parameteredElement" type="_NjM4UGEIEdqmfMQqVJOcWQ" redefinedProperty="_N3BMWWEIEdqmfMQqVJOcWQ" association="_N3wzMGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3UHJGEIEdqmfMQqVJOcWQ" annotatedElement="_N3UHI2EIEdqmfMQqVJOcWQ">
        <body>The operation for this template parameter.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3UHJWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3UHJmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Nimb8GEIEdqmfMQqVJOcWQ" name="PackageableElement" isAbstract="true">
    <ownedComment xmi:id="_Nimb8WEIEdqmfMQqVJOcWQ" annotatedElement="_Nimb8GEIEdqmfMQqVJOcWQ">
      <body>A packageable element indicates a named element that may be owned directly by a package.</body>
    </ownedComment>
    <ownedComment xmi:id="_N3UHJ2EIEdqmfMQqVJOcWQ" annotatedElement="_Nimb8GEIEdqmfMQqVJOcWQ">
      <body>PackageableElements are extended to enable any such element to serve as a template parameter.</body>
    </ownedComment>
    <generalization xmi:id="_Nimb8mEIEdqmfMQqVJOcWQ" general="_NjfzQGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N3UHKGEIEdqmfMQqVJOcWQ" general="_N3K9TWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NlIyAGEIEdqmfMQqVJOcWQ" name="visibility" type="_NjpkUmEIEdqmfMQqVJOcWQ" redefinedProperty="_NjfzUmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NlIyAWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NlIyAmEIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NlIyA2EIEdqmfMQqVJOcWQ" annotatedElement="_NlIyAGEIEdqmfMQqVJOcWQ">
        <body>Indicates that packageable elements must always have a visibility, i.e., visibility is not optional.</body>
      </ownedComment>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NiTgcGEIEdqmfMQqVJOcWQ" name="Classifier" isAbstract="true">
    <ownedComment xmi:id="_NiTgcWEIEdqmfMQqVJOcWQ" annotatedElement="_NiTgcGEIEdqmfMQqVJOcWQ">
      <body>A classifier is a type. It can specify a generalization hierarchy by referencing its general classifiers.  A classifier is also a namespace whose members can include features. Classifier is an abstract metaclass.</body>
    </ownedComment>
    <ownedComment xmi:id="_NqWpdmEIEdqmfMQqVJOcWQ" annotatedElement="_NiTgcGEIEdqmfMQqVJOcWQ">
      <body>Extends a classifier with the capability to own use cases. Although the owning classifier typically represents the subject to which the owned use cases apply, this is not necessarily the case. In principle, the same use case can be applied to multiple subjects, as identified by the subject association role of a UseCase.</body>
    </ownedComment>
    <ownedComment xmi:id="_NrGQUWEIEdqmfMQqVJOcWQ" annotatedElement="_NiTgcGEIEdqmfMQqVJOcWQ">
      <body>Classifier is extended with the capability to own collaboration uses. These collaboration uses link a collaboration with the classifier to give a description of the workings of the classifier.</body>
    </ownedComment>
    <ownedComment xmi:id="_Nlun4GEIEdqmfMQqVJOcWQ" annotatedElement="_NiTgcGEIEdqmfMQqVJOcWQ">
      <body>A classifier is a namespace whose members can include features. Classifier is an abstract metaclass.

A classifier is a type and can own generalizations, thereby making it possible to define generalization relationships to other classifiers. A classifier can specify a generalization hierarchy by referencing its general classifiers.

A classifier is a redefinable element, meaning that it is possible to redefine nested classifiers.

</body>
    </ownedComment>
    <ownedComment xmi:id="_N3UHKWEIEdqmfMQqVJOcWQ" annotatedElement="_NiTgcGEIEdqmfMQqVJOcWQ">
      <body>A classifier can be parameterized, exposed as a formal template parameter, and specified as an actual parameter in a binding of a template.</body>
    </ownedComment>
    <ownedRule xmi:id="_NiTgcmEIEdqmfMQqVJOcWQ" name="no_cycles_in_generalization" constrainedElement="_NiTgcGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NiTgc2EIEdqmfMQqVJOcWQ" annotatedElement="_NiTgcmEIEdqmfMQqVJOcWQ">
        <body>Generalization hierarchies must be directed and acyclical. A classifier can not be both a transitively general and transitively specific classifier of the same classifier.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NiTgdGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>not self.allParents()->includes(self)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_Nlun4WEIEdqmfMQqVJOcWQ" name="generalization_hierarchies" constrainedElement="_NiTgcGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nlun4mEIEdqmfMQqVJOcWQ" annotatedElement="_Nlun4WEIEdqmfMQqVJOcWQ">
        <body>Generalization hierarchies must be directed and acyclical. A classifier can not be both a transitively general and transitively specific classifier of the same classifier.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nlun42EIEdqmfMQqVJOcWQ" language="OCL">
        <body>not self.allParents()->includes(self)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NiTgdWEIEdqmfMQqVJOcWQ" name="specialize_type" constrainedElement="_NiTgcGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NiTgdmEIEdqmfMQqVJOcWQ" annotatedElement="_NiTgdWEIEdqmfMQqVJOcWQ">
        <body>A classifier may only specialize classifiers of a valid type.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nlun5GEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.parents()->forAll(c | self.maySpecializeType(c))</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NvavjWEIEdqmfMQqVJOcWQ" name="maps_to_generalization_set" constrainedElement="_NiTgcGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NvavjmEIEdqmfMQqVJOcWQ" annotatedElement="_NvavjWEIEdqmfMQqVJOcWQ">
        <body>The Classifier that maps to a GeneralizationSet may neither be a specific nor a general Classifier in any of the Generalization relationships defined for that GeneralizationSet. In other words, a power type may not be an instance of itself nor may its instances also be its subclasses.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nvavj2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_Nlun5WEIEdqmfMQqVJOcWQ" general="_NiwMYGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NiTgeWEIEdqmfMQqVJOcWQ" general="_NjWCumEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N3UHKmEIEdqmfMQqVJOcWQ" general="_N3K9MmEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NiTgeGEIEdqmfMQqVJOcWQ" general="_NimbnWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Nlun5mEIEdqmfMQqVJOcWQ" name="isAbstract">
      <ownedComment xmi:id="_Nlun52EIEdqmfMQqVJOcWQ" annotatedElement="_Nlun5mEIEdqmfMQqVJOcWQ">
        <body>If true, the Classifier does not provide a complete declaration and can typically not be instantiated. An abstract classifier is intended to be used by other classifiers e.g. as the target of general metarelationships or generalization relationships.

</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_Nlun6GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nlun6WEIEdqmfMQqVJOcWQ" name="generalization" type="_NmLT3WEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_Nn-DkGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nlun6mEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nlun62EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nlun7GEIEdqmfMQqVJOcWQ" annotatedElement="_Nlun6WEIEdqmfMQqVJOcWQ">
        <body>Specifies the Generalization relationships for this Classifier. These Generalizations navigaten to more general classifiers in the generalization hierarchy.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nlun7WEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nlun7mEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NiTggGEIEdqmfMQqVJOcWQ" name="feature" type="_NidR-GEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" isDerivedUnion="true" subsettedProperty="_Nimbu2EIEdqmfMQqVJOcWQ" association="_NkPaLmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NiTggWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NiTggmEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NiTgg2EIEdqmfMQqVJOcWQ" annotatedElement="_NiTggGEIEdqmfMQqVJOcWQ">
        <body>Redefines the corresponding association in Abstractions.  Note that there may be members of the Classifier that are of the type Feature but are not included in this association, e.g. inherited features.</body>
      </ownedComment>
      <ownedComment xmi:id="_Nlun72EIEdqmfMQqVJOcWQ" annotatedElement="_NiTggGEIEdqmfMQqVJOcWQ">
        <body>Specifies each feature defined in the classifier.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nlun8GEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nlun8WEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NidRcGEIEdqmfMQqVJOcWQ" name="inheritedMember" type="_NjfzQGEIEdqmfMQqVJOcWQ" isDerived="true" subsettedProperty="_Nimbu2EIEdqmfMQqVJOcWQ" association="_NkZLOmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_Nlun8mEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nlun82EIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NidRcWEIEdqmfMQqVJOcWQ" annotatedElement="_NidRcGEIEdqmfMQqVJOcWQ">
        <body>Specifies all elements inherited by this classifier from the general classifiers.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nlun9GEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nlun9WEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nlun-GEIEdqmfMQqVJOcWQ" name="redefinedClassifier" type="_NiTgcGEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMb2EIEdqmfMQqVJOcWQ" association="_Noj5cGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Nlun-WEIEdqmfMQqVJOcWQ" annotatedElement="_Nlun-GEIEdqmfMQqVJOcWQ">
        <body>References the Classifiers that are redefined by this Classifier.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nlun-mEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nlun-2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NiTghmEIEdqmfMQqVJOcWQ" name="general" type="_NiTgcGEIEdqmfMQqVJOcWQ" isDerived="true" association="_NkZLIGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_Nlun_GEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nlun_WEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NiTgh2EIEdqmfMQqVJOcWQ" annotatedElement="_NiTghmEIEdqmfMQqVJOcWQ">
        <body>References the general classifier in the Generalization relationship.</body>
      </ownedComment>
      <ownedComment xmi:id="_Nlun_mEIEdqmfMQqVJOcWQ" annotatedElement="_NiTghmEIEdqmfMQqVJOcWQ">
        <body>Specifies the general Classifiers for this Classifier.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nlun_2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NluoAGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqWpd2EIEdqmfMQqVJOcWQ" name="ownedUseCase" type="_NqWpPmEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_NqfzOGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NqWpeGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqWpeWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqWpemEIEdqmfMQqVJOcWQ" annotatedElement="_NqWpd2EIEdqmfMQqVJOcWQ">
        <body>References the use cases owned by this classifier.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqWpe2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqWpfGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqWpfWEIEdqmfMQqVJOcWQ" name="useCase" type="_NqWpPmEIEdqmfMQqVJOcWQ" association="_NqfzPWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NqWpfmEIEdqmfMQqVJOcWQ" annotatedElement="_NqWpfWEIEdqmfMQqVJOcWQ">
        <body>The set of use cases for which this Classifier is the subject.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqWpf2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqWpgGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NqpkIWEIEdqmfMQqVJOcWQ" name="substitution" type="_NqfzWWEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ _NqpkJ2EIEdqmfMQqVJOcWQ" association="_NqzVIGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NqpkImEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NqpkI2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NqpkJGEIEdqmfMQqVJOcWQ" annotatedElement="_NqpkIWEIEdqmfMQqVJOcWQ">
        <body>References the substitutions that are owned by this Classifier.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NqpkJWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NqpkJmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NiTgemEIEdqmfMQqVJOcWQ" name="attribute" type="_Ni59sGEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" isDerivedUnion="true" subsettedProperty="_NiTggGEIEdqmfMQqVJOcWQ" association="_NjyuPWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NiTge2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NiTgfGEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NiTgfWEIEdqmfMQqVJOcWQ" annotatedElement="_NiTgemEIEdqmfMQqVJOcWQ">
        <body>Refers to all of the Properties that are direct (i.e. not inherited or imported) attributes of the classifier.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrGQUmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrGQU2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NtVE02EIEdqmfMQqVJOcWQ" name="representation" type="_NtVEtGEIEdqmfMQqVJOcWQ" subsettedProperty="_NtVE12EIEdqmfMQqVJOcWQ" association="_Nte1vmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NtVE1GEIEdqmfMQqVJOcWQ" annotatedElement="_NtVE02EIEdqmfMQqVJOcWQ">
        <body>References a collaboration use which indicates the collaboration that represents this classifier.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtVE1WEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtVE1mEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NtVE12EIEdqmfMQqVJOcWQ" name="collaborationUse" type="_NtVEtGEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_Nte1w2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NtVE2GEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NtVE2WEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NtVE2mEIEdqmfMQqVJOcWQ" annotatedElement="_NtVE12EIEdqmfMQqVJOcWQ">
        <body>References the collaboration uses owned by the classifier.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NtVE22EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NtVE3GEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NvavkGEIEdqmfMQqVJOcWQ" name="powertypeExtent" type="_NvavdGEIEdqmfMQqVJOcWQ" association="_NvkgZ2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NvavkWEIEdqmfMQqVJOcWQ" annotatedElement="_NvavkGEIEdqmfMQqVJOcWQ">
        <body>Designates the GeneralizationSet of which the associated Classifier is a power type.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NvavkmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nvavk2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3UHLGEIEdqmfMQqVJOcWQ" name="ownedSignature" type="_N3d4NWEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_N3wzHmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N3UHLWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N3UHLmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N3UHL2EIEdqmfMQqVJOcWQ" annotatedElement="_N3UHLGEIEdqmfMQqVJOcWQ">
        <body>The optional template signature specifying the formal template parameters.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3UHMGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3UHMWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3UHMmEIEdqmfMQqVJOcWQ" name="templateParameter" type="_N3d4IGEIEdqmfMQqVJOcWQ" redefinedProperty="_N3K9UGEIEdqmfMQqVJOcWQ" association="_N3wzKWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3UHM2EIEdqmfMQqVJOcWQ" annotatedElement="_N3UHMmEIEdqmfMQqVJOcWQ">
        <body>The template parameter that exposes this element as a formal parameter.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3UHNGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3UHNWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NidRgWEIEdqmfMQqVJOcWQ" name="general" type="_NiTgcGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_NidRhWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NidRgmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EOperation" xmi:id="_NidRg2EIEdqmfMQqVJOcWQ" operationName="getGenerals"/>
      </eAnnotations>
      <ownedComment xmi:id="_NidRhGEIEdqmfMQqVJOcWQ" annotatedElement="_NidRgWEIEdqmfMQqVJOcWQ">
        <body>The general classifiers are the classifiers referenced by the generalization relationships.</body>
      </ownedComment>
      <ownedRule xmi:id="_NidRhWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NidRgWEIEdqmfMQqVJOcWQ _NiTghmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NluoAWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = self.parents()</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NidRh2EIEdqmfMQqVJOcWQ" type="_NiTgcGEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NluoAmEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NluoA2EIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
    <ownedOperation xmi:id="_NidRkWEIEdqmfMQqVJOcWQ" name="inheritedMember" type="_NjfzQGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_NidRlWEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NidRkmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EOperation" xmi:id="_NidRk2EIEdqmfMQqVJOcWQ" operationName="getInheritedMembers"/>
      </eAnnotations>
      <ownedComment xmi:id="_NidRlGEIEdqmfMQqVJOcWQ" annotatedElement="_NidRkWEIEdqmfMQqVJOcWQ">
        <body>The inheritedMember association is derived by inheriting the inheritable members of the parents.</body>
      </ownedComment>
      <ownedRule xmi:id="_NidRlWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NidRkWEIEdqmfMQqVJOcWQ _NidRcGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NluoBGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = self.inherit(self.parents()->collect(p | p.inheritableMembers(self))</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NidRl2EIEdqmfMQqVJOcWQ" type="_NjfzQGEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NluoBWEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NluoBmEIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
    <ownedOperation xmi:id="_NidRemEIEdqmfMQqVJOcWQ" name="allFeatures" type="_NidR-GEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_NidRfGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NidRe2EIEdqmfMQqVJOcWQ" annotatedElement="_NidRemEIEdqmfMQqVJOcWQ">
        <body>The query allFeatures() gives all of the features in the namespace of the classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature.</body>
      </ownedComment>
      <ownedRule xmi:id="_NidRfGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NidRemEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NluoB2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = member->select(oclIsKindOf(Feature))</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NidRfmEIEdqmfMQqVJOcWQ" type="_NidR-GEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NluoCGEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NluoCWEIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
    <ownedOperation xmi:id="_NidRimEIEdqmfMQqVJOcWQ" name="parents" type="_NiTgcGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_NidRjGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NidRi2EIEdqmfMQqVJOcWQ" annotatedElement="_NidRimEIEdqmfMQqVJOcWQ">
        <body>The query parents() gives all of the immediate ancestors of a generalized Classifier.</body>
      </ownedComment>
      <ownedRule xmi:id="_NidRjGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NidRimEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NluoCmEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = generalization.general</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NidRjmEIEdqmfMQqVJOcWQ" type="_NiTgcGEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NluoC2EIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NluoDGEIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
    <ownedOperation xmi:id="_NidRoWEIEdqmfMQqVJOcWQ" name="inheritableMembers" type="_NjfzQGEIEdqmfMQqVJOcWQ" isQuery="true" precondition="_NidRo2EIEdqmfMQqVJOcWQ" postcondition="_NidRo2EIEdqmfMQqVJOcWQ" bodyCondition="_NidRpWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NidRomEIEdqmfMQqVJOcWQ" annotatedElement="_NidRoWEIEdqmfMQqVJOcWQ">
        <body>The query inheritableMembers() gives all of the members of a classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.</body>
      </ownedComment>
      <ownedRule xmi:id="_NidRo2EIEdqmfMQqVJOcWQ" constrainedElement="_NidRoWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nl4Y4WEIEdqmfMQqVJOcWQ" language="OCL">
          <body>c.allParents()->includes(self)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_NidRpWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NidRoWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nl4Y4mEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = member->select(m | c.hasVisibilityOf(m))</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NidRp2EIEdqmfMQqVJOcWQ" type="_NjfzQGEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nl4Y42EIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nl4Y5GEIEdqmfMQqVJOcWQ"/>
      </returnResult>
      <ownedParameter xmi:id="_NidRqmEIEdqmfMQqVJOcWQ" name="c" type="_NiTgcGEIEdqmfMQqVJOcWQ" effect="read"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NidRq2EIEdqmfMQqVJOcWQ" name="hasVisibilityOf" isQuery="true" precondition="_NidRrWEIEdqmfMQqVJOcWQ" bodyCondition="_NidRr2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NidRrGEIEdqmfMQqVJOcWQ" annotatedElement="_NidRq2EIEdqmfMQqVJOcWQ">
        <body>The query hasVisibilityOf() determines whether a named element is visible in the classifier. By default all are visible. It is only called when the argument is something owned by a parent.</body>
      </ownedComment>
      <ownedRule xmi:id="_NidRrWEIEdqmfMQqVJOcWQ" constrainedElement="_NidRq2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nl4Y5WEIEdqmfMQqVJOcWQ" language="OCL">
          <body>self.allParents()->collect(c | c.member)->includes(n)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_NidRr2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NidRq2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nl4Y5mEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = if (self.inheritedMember->includes(n)) then (n.visibility &lt;> #private) else true</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NidRsWEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_NidRsmEIEdqmfMQqVJOcWQ" name="n" type="_NjfzQGEIEdqmfMQqVJOcWQ"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NidRdGEIEdqmfMQqVJOcWQ" name="conformsTo" isQuery="true" redefinedOperation="_NjWCxGEIEdqmfMQqVJOcWQ" bodyCondition="_NidRdmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NidRdWEIEdqmfMQqVJOcWQ" annotatedElement="_NidRdGEIEdqmfMQqVJOcWQ">
        <body>The query conformsTo() gives true for a classifier that defines a type that conforms to another. This is used, for example, in the specification of signature conformance for operations.</body>
      </ownedComment>
      <ownedRule xmi:id="_NidRdmEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NidRdGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NmCJ4GEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = (self=other) or (self.allParents()->includes(other))</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NidReGEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_NidReWEIEdqmfMQqVJOcWQ" name="other" type="_NiTgcGEIEdqmfMQqVJOcWQ"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NidRs2EIEdqmfMQqVJOcWQ" name="inherit" type="_NjfzQGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_NidRtWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NidRtGEIEdqmfMQqVJOcWQ" annotatedElement="_NidRs2EIEdqmfMQqVJOcWQ">
        <body>The inherit operation is overridden to exclude redefined properties.</body>
      </ownedComment>
      <ownedComment xmi:id="_NmCJ4WEIEdqmfMQqVJOcWQ" annotatedElement="_NidRs2EIEdqmfMQqVJOcWQ">
        <body>The query inherit() defines how to inherit a set of elements. Here the operation is defined to inherit them all. It is intended to be redefined in circumstances where inheritance is affected by redefinition.</body>
      </ownedComment>
      <ownedRule xmi:id="_NidRtWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NidRs2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NmCJ4mEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = inhs</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NidRt2EIEdqmfMQqVJOcWQ" type="_NjfzQGEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NmCJ5WEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NmCJ5mEIEdqmfMQqVJOcWQ"/>
      </returnResult>
      <ownedParameter xmi:id="_NidRumEIEdqmfMQqVJOcWQ" name="inhs" type="_NjfzQGEIEdqmfMQqVJOcWQ">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NmCJ52EIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NmCJ6GEIEdqmfMQqVJOcWQ"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="_NidRvWEIEdqmfMQqVJOcWQ" name="maySpecializeType" isQuery="true" bodyCondition="_NidRv2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NidRvmEIEdqmfMQqVJOcWQ" annotatedElement="_NidRvWEIEdqmfMQqVJOcWQ">
        <body>The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints.</body>
      </ownedComment>
      <ownedRule xmi:id="_NidRv2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NidRvWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NmCJ6WEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = self.oclIsKindOf(c.oclType)</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NidRwWEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_NidRwmEIEdqmfMQqVJOcWQ" name="c" type="_NiTgcGEIEdqmfMQqVJOcWQ" effect="read"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NidRmmEIEdqmfMQqVJOcWQ" name="allParents" type="_NiTgcGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_NidRnGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NidRm2EIEdqmfMQqVJOcWQ" annotatedElement="_NidRmmEIEdqmfMQqVJOcWQ">
        <body>The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier.</body>
      </ownedComment>
      <ownedRule xmi:id="_NidRnGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NidRmmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NmCJ6mEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = self.parents()->union(self.parents()->collect(p | p.allParents())</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NidRnmEIEdqmfMQqVJOcWQ" type="_NiTgcGEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NmCJ62EIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NmCJ7GEIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
    <ownedOperation xmi:id="_N3UHNmEIEdqmfMQqVJOcWQ" name="isTemplate" isQuery="true" redefinedOperation="_N3K9SGEIEdqmfMQqVJOcWQ" bodyCondition="_N3UHOGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3UHN2EIEdqmfMQqVJOcWQ" annotatedElement="_N3UHNmEIEdqmfMQqVJOcWQ">
        <body>The query isTemplate() returns whether this templateable element is actually a template.</body>
      </ownedComment>
      <ownedRule xmi:id="_N3UHOGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N3UHNmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N3UHOWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = oclAsType(TemplatableElement).isTemplate() or general->exists(g | g.isTemplate())</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N3UHOmEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N3d4IGEIEdqmfMQqVJOcWQ" name="ClassifierTemplateParameter">
    <ownedComment xmi:id="_N3d4IWEIEdqmfMQqVJOcWQ" annotatedElement="_N3d4IGEIEdqmfMQqVJOcWQ">
      <body>ClassifierTemplateParameter is a template parameter where the parametered element is a Classifier in its capacity of being a kind of ParameterableElement.</body>
    </ownedComment>
    <ownedRule xmi:id="_N3d4ImEIEdqmfMQqVJOcWQ" name="has_constraining_classifier" constrainedElement="_N3d4IGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3d4I2EIEdqmfMQqVJOcWQ" annotatedElement="_N3d4ImEIEdqmfMQqVJOcWQ">
        <body>If &quot;allowSubstitutable&quot; is true, then there must be a constrainingClassifier.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N3d4JGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>allowSubstitutable implies constrainingClassifier->notEmpty()</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N3d4JWEIEdqmfMQqVJOcWQ" general="_N3BMTWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N3d4JmEIEdqmfMQqVJOcWQ" name="allowSubstitutable">
      <ownedComment xmi:id="_N3d4J2EIEdqmfMQqVJOcWQ" annotatedElement="_N3d4JmEIEdqmfMQqVJOcWQ">
        <body>Constrains the required relationship between an actual parameter and the parameteredElement for this formal parameter.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_N3d4KGEIEdqmfMQqVJOcWQ" value="true"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3d4KWEIEdqmfMQqVJOcWQ" name="parameteredElement" type="_NiTgcGEIEdqmfMQqVJOcWQ" redefinedProperty="_N3BMWWEIEdqmfMQqVJOcWQ" association="_N3wzKWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3d4KmEIEdqmfMQqVJOcWQ" annotatedElement="_N3d4KWEIEdqmfMQqVJOcWQ">
        <body>The parameterable classifier for this template parameter.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3d4K2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3d4LGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3d4LWEIEdqmfMQqVJOcWQ" name="defaultClassifier" type="_NiTgcGEIEdqmfMQqVJOcWQ" association="_N36kEmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3d4LmEIEdqmfMQqVJOcWQ" annotatedElement="_N3d4LWEIEdqmfMQqVJOcWQ">
        <body>The classifier that is used by default if no argument is provided during template binding. If this property is empty, then there is no default.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3d4L2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3d4MGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3d4MWEIEdqmfMQqVJOcWQ" name="constrainingClassifier" type="_NiTgcGEIEdqmfMQqVJOcWQ" association="_N36kFGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3d4MmEIEdqmfMQqVJOcWQ" annotatedElement="_N3d4MWEIEdqmfMQqVJOcWQ">
        <body>The classifier that constrains the argument that can be used for the parameter. If the allowSubstitutable attribute is true, then any classifier that is compatible with this constraining classifier can be substituted, otherwise it must be either this classifier or one of its subclasses. If this property is empty, there are no constraints on the classifier that can be used as an argument.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3d4M2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3d4NGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N3d4NWEIEdqmfMQqVJOcWQ" name="RedefinableTemplateSignature">
    <ownedComment xmi:id="_N3d4NmEIEdqmfMQqVJOcWQ" annotatedElement="_N3d4NWEIEdqmfMQqVJOcWQ">
      <body>RedefinableTemplateSignature specializes both TemplateSignature and RedefinableElement in order to allow the addition of new formal template parameters in the context of a specializing template Classifier.</body>
    </ownedComment>
    <ownedRule xmi:id="_N3d4N2EIEdqmfMQqVJOcWQ" name="inherited_parameters" constrainedElement="_N3d4NWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3d4OGEIEdqmfMQqVJOcWQ" annotatedElement="_N3d4N2EIEdqmfMQqVJOcWQ">
        <body>The inherited parameters are the parameters of the extended template signature.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N3d4OWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>if extendedSignature->isEmpty() then Set{} else extendedSignature.parameter endif</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N3d4OmEIEdqmfMQqVJOcWQ" general="_NiwMYGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N3d4O2EIEdqmfMQqVJOcWQ" general="_N3BMMGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N3d4PGEIEdqmfMQqVJOcWQ" name="classifier" type="_NiTgcGEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMaWEIEdqmfMQqVJOcWQ" association="_N3wzHmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N3d4PWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N3d4PmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N3d4P2EIEdqmfMQqVJOcWQ" annotatedElement="_N3d4PGEIEdqmfMQqVJOcWQ">
        <body>The classifier that owns this template signature.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3d4QGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3d4QWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3d4QmEIEdqmfMQqVJOcWQ" name="extendedSignature" type="_N3d4NWEIEdqmfMQqVJOcWQ" subsettedProperty="_NiwMb2EIEdqmfMQqVJOcWQ" association="_N3wzIWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3d4Q2EIEdqmfMQqVJOcWQ" annotatedElement="_N3d4QmEIEdqmfMQqVJOcWQ">
        <body>The template signature that is extended by this template signature.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3d4RGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3d4RWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3d4RmEIEdqmfMQqVJOcWQ" name="inheritedParameter" type="_N3BMTWEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" subsettedProperty="_N3BMNmEIEdqmfMQqVJOcWQ" association="_N3wzJmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N3d4R2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N3d4SGEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_N3d4SWEIEdqmfMQqVJOcWQ" annotatedElement="_N3d4RmEIEdqmfMQqVJOcWQ">
        <body>The formal template parameters of the extendedSignature.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3d4SmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3d4S2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_N3d4TGEIEdqmfMQqVJOcWQ" name="isConsistentWith" isQuery="true" precondition="_N3d4TmEIEdqmfMQqVJOcWQ" redefinedOperation="_NiwMdWEIEdqmfMQqVJOcWQ" bodyCondition="_N3d4UGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3d4TWEIEdqmfMQqVJOcWQ" annotatedElement="_N3d4TGEIEdqmfMQqVJOcWQ">
        <body>The query isConsistentWith() specifies, for any two RedefinableTemplateSignatures in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining template signature is always consistent with a redefined template signature, since redefinition only adds new formal parameters.</body>
      </ownedComment>
      <ownedRule xmi:id="_N3d4TmEIEdqmfMQqVJOcWQ" constrainedElement="_N3d4TGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N3d4T2EIEdqmfMQqVJOcWQ" language="OCL">
          <body>redefinee.isRedefinitionContextValid(self)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_N3d4UGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N3d4TGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N3d4UWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = redefinee.oclIsKindOf(RedefineableTemplateSignature)</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N3d4UmEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_N3d4U2EIEdqmfMQqVJOcWQ" name="redefinee" type="_NiwMYGEIEdqmfMQqVJOcWQ"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N3d4VGEIEdqmfMQqVJOcWQ" name="getInheritedParameters" visibility="protected" type="_N3BMTWEIEdqmfMQqVJOcWQ">
      <returnResult xmi:id="_N3d4VWEIEdqmfMQqVJOcWQ" type="_N3BMTWEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3d4VmEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3d4V2EIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NrGQSmEIEdqmfMQqVJOcWQ" name="ConnectableElement" isAbstract="true">
    <ownedComment xmi:id="_NrGQS2EIEdqmfMQqVJOcWQ" annotatedElement="_NrGQSmEIEdqmfMQqVJOcWQ">
      <body>A ConnectableElement is an abstract metaclass representing a set of instances that play roles of a classifier. Connectable elements may be joined by attached connectors and specify configurations of linked instances to be created within an instance of the containing classifier.</body>
    </ownedComment>
    <ownedComment xmi:id="_N3d4WGEIEdqmfMQqVJOcWQ" annotatedElement="_NrGQSmEIEdqmfMQqVJOcWQ">
      <body>ConnectableElement is the connectable element of a ConnectableElementTemplateParameter.

The ConnectableElements attached as role to each ConnectorEnd owned by a Connector must be roles of the classifier that owned the Connector, or they must be ports of such roles. 

</body>
    </ownedComment>
    <generalization xmi:id="_NrGQTGEIEdqmfMQqVJOcWQ" general="_NiwMj2EIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N3d4WWEIEdqmfMQqVJOcWQ" general="_N3K9TWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NrGQTWEIEdqmfMQqVJOcWQ" name="end" type="_Nq8fL2EIEdqmfMQqVJOcWQ" isOrdered="true" association="_NrQBOWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NrGQTmEIEdqmfMQqVJOcWQ" annotatedElement="_NrGQTWEIEdqmfMQqVJOcWQ">
        <body>Denotes a connector that attaches to this connectable element.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NrGQT2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NrGQUGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N3d4WmEIEdqmfMQqVJOcWQ" name="templateParameter" type="_N3d4XmEIEdqmfMQqVJOcWQ" redefinedProperty="_N3K9UGEIEdqmfMQqVJOcWQ" association="_N36kEGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3d4W2EIEdqmfMQqVJOcWQ" annotatedElement="_N3d4WmEIEdqmfMQqVJOcWQ">
        <body>The ConnectableElementTemplateParameter for this ConnectableElement parameter.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3d4XGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3d4XWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N3d4XmEIEdqmfMQqVJOcWQ" name="ConnectableElementTemplateParameter">
    <ownedComment xmi:id="_N3d4X2EIEdqmfMQqVJOcWQ" annotatedElement="_N3d4XmEIEdqmfMQqVJOcWQ">
      <body>ConnectableElementTemplateParameter is a template parameter where the parametered element is a ConnectableElement.</body>
    </ownedComment>
    <generalization xmi:id="_N3d4YGEIEdqmfMQqVJOcWQ" general="_N3BMTWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N3d4YWEIEdqmfMQqVJOcWQ" name="parameteredElement" type="_NrGQSmEIEdqmfMQqVJOcWQ" redefinedProperty="_N3BMWWEIEdqmfMQqVJOcWQ" association="_N36kEGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N3d4YmEIEdqmfMQqVJOcWQ" annotatedElement="_N3d4YWEIEdqmfMQqVJOcWQ">
        <body>The ConnectableElement for this template parameter.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3d4Y2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3d4ZGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N3d4Z2EIEdqmfMQqVJOcWQ" name="A_parameter_templateSignature" memberEnd="_N3BMNmEIEdqmfMQqVJOcWQ _N3d4aGEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N3d4aGEIEdqmfMQqVJOcWQ" type="_N3BMMGEIEdqmfMQqVJOcWQ" association="_N3d4Z2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N3d4aWEIEdqmfMQqVJOcWQ" name="A_ownedParameter_signature" memberEnd="_N3BMOmEIEdqmfMQqVJOcWQ _N3BMU2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N3d4amEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N3d4a2EIEdqmfMQqVJOcWQ" general="_N3d4Z2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N3nCEGEIEdqmfMQqVJOcWQ" name="A_boundElement_templateBinding" memberEnd="_N3BMkWEIEdqmfMQqVJOcWQ _N3K9NWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N3nCEWEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N3nCEmEIEdqmfMQqVJOcWQ" general="_NkPaJGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N3nCE2EIEdqmfMQqVJOcWQ" name="A_formal_templateParameterSubstitution" memberEnd="_N3nCFGEIEdqmfMQqVJOcWQ _N3BMp2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N3nCFGEIEdqmfMQqVJOcWQ" type="_N3BMoWEIEdqmfMQqVJOcWQ" association="_N3nCE2EIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N3nCFWEIEdqmfMQqVJOcWQ" name="A_signature_templateBinding" memberEnd="_N3nCF2EIEdqmfMQqVJOcWQ _N3BMl2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N3nCFmEIEdqmfMQqVJOcWQ" general="_NkPaJ2EIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N3nCF2EIEdqmfMQqVJOcWQ" type="_N3BMiGEIEdqmfMQqVJOcWQ" redefinedProperty="_NkPaKWEIEdqmfMQqVJOcWQ" association="_N3nCFWEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N3nCGGEIEdqmfMQqVJOcWQ" name="A_parameterSubstitution_templateBinding" memberEnd="_N3BMm2EIEdqmfMQqVJOcWQ _N3BMq2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N3nCGWEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N3nCGmEIEdqmfMQqVJOcWQ" name="A_actual_templateParameterSubstitution" memberEnd="_N3nCG2EIEdqmfMQqVJOcWQ _N3BMsWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N3nCG2EIEdqmfMQqVJOcWQ" type="_N3BMoWEIEdqmfMQqVJOcWQ" association="_N3nCGmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N3nCHGEIEdqmfMQqVJOcWQ" name="A_parameteredElement_templateParameter" memberEnd="_N3K9UGEIEdqmfMQqVJOcWQ _N3BMWWEIEdqmfMQqVJOcWQ"/>
  <ownedMember xmi:type="uml:Association" xmi:id="_N3nCHWEIEdqmfMQqVJOcWQ" name="A_subExpression_owningExpression" memberEnd="_N3BMd2EIEdqmfMQqVJOcWQ _N3BMfWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N3nCHmEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N3nCH2EIEdqmfMQqVJOcWQ" name="A_ownedTemplateSignature_template" memberEnd="_N3K9O2EIEdqmfMQqVJOcWQ _N3BMQGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N3nCIGEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N3nCIWEIEdqmfMQqVJOcWQ" name="A_ownedParameteredElement_owningTemplateParameter" memberEnd="_N3BMXWEIEdqmfMQqVJOcWQ _N3K9VGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N3nCImEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N3nCI2EIEdqmfMQqVJOcWQ" general="_N3nCHGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N3wzEGEIEdqmfMQqVJOcWQ" name="A_default_templateParameter" memberEnd="_N3wzEWEIEdqmfMQqVJOcWQ _N3BMY2EIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N3wzEWEIEdqmfMQqVJOcWQ" type="_N3BMTWEIEdqmfMQqVJOcWQ" association="_N3wzEGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N3wzEmEIEdqmfMQqVJOcWQ" name="A_ownedDefault_templateParameter" memberEnd="_N3BMZ2EIEdqmfMQqVJOcWQ _N3wzFWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N3wzE2EIEdqmfMQqVJOcWQ" general="_N3wzEGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N3wzFGEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N3wzFWEIEdqmfMQqVJOcWQ" type="_N3BMTWEIEdqmfMQqVJOcWQ" association="_N3wzEmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3wzFmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3wzF2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N3wzGGEIEdqmfMQqVJOcWQ" name="A_ownedActual_templateParameterSubstitution" memberEnd="_N3wzG2EIEdqmfMQqVJOcWQ _N3BMtWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N3wzGWEIEdqmfMQqVJOcWQ" general="_N3nCGmEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N3wzGmEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N3wzG2EIEdqmfMQqVJOcWQ" type="_N3BMoWEIEdqmfMQqVJOcWQ" association="_N3wzGGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3wzHGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3wzHWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N3wzHmEIEdqmfMQqVJOcWQ" name="A_ownedSignature_classifier" memberEnd="_N3UHLGEIEdqmfMQqVJOcWQ _N3d4PGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N3wzH2EIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N3wzIGEIEdqmfMQqVJOcWQ" general="_NkPaKmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N3wzIWEIEdqmfMQqVJOcWQ" name="A_extendedSignature_redefinableTemplateSignature" memberEnd="_N3d4QmEIEdqmfMQqVJOcWQ _N3wzI2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N3wzImEIEdqmfMQqVJOcWQ" general="_NkPaLGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N3wzI2EIEdqmfMQqVJOcWQ" type="_N3d4NWEIEdqmfMQqVJOcWQ" association="_N3wzIWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3wzJGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3wzJWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N3wzJmEIEdqmfMQqVJOcWQ" name="A_inheritedParameter_redefinableTemplateSignature" memberEnd="_N3wzKGEIEdqmfMQqVJOcWQ _N3d4RmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N3wzJ2EIEdqmfMQqVJOcWQ" general="_N3d4Z2EIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N3wzKGEIEdqmfMQqVJOcWQ" type="_N3d4NWEIEdqmfMQqVJOcWQ" redefinedProperty="_N3d4aGEIEdqmfMQqVJOcWQ" association="_N3wzJmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N3wzKWEIEdqmfMQqVJOcWQ" name="A_templateParameter_parameteredElement" memberEnd="_N3UHMmEIEdqmfMQqVJOcWQ _N3d4KWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N3wzKmEIEdqmfMQqVJOcWQ" general="_N3nCHGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N3wzK2EIEdqmfMQqVJOcWQ" name="A_nameExpression_namedElement" memberEnd="_N3wzLWEIEdqmfMQqVJOcWQ _N3BMR2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N3wzLGEIEdqmfMQqVJOcWQ" general="_NkGQTGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N3wzLWEIEdqmfMQqVJOcWQ" type="_NjfzQGEIEdqmfMQqVJOcWQ" association="_N3wzK2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3wzLmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3wzL2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N3wzMGEIEdqmfMQqVJOcWQ" name="A_templateParameter_parameteredElement" memberEnd="_N3K9dmEIEdqmfMQqVJOcWQ _N3UHI2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N3wzMWEIEdqmfMQqVJOcWQ" general="_N3nCHGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N36kEGEIEdqmfMQqVJOcWQ" name="A_templateParameter_parameteredElement" memberEnd="_N3d4YWEIEdqmfMQqVJOcWQ _N3d4WmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N36kEWEIEdqmfMQqVJOcWQ" general="_N3nCHGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N36kEmEIEdqmfMQqVJOcWQ" name="A_defaultClassifier_classifierTemplateParameter" memberEnd="_N36kE2EIEdqmfMQqVJOcWQ _N3d4LWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N36kE2EIEdqmfMQqVJOcWQ" type="_N3d4IGEIEdqmfMQqVJOcWQ" association="_N36kEmEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N36kFGEIEdqmfMQqVJOcWQ" name="A_constrainingClassifier_classifierTemplateParameter" memberEnd="_N36kFWEIEdqmfMQqVJOcWQ _N3d4MWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N36kFWEIEdqmfMQqVJOcWQ" type="_N3d4IGEIEdqmfMQqVJOcWQ" association="_N36kFGEIEdqmfMQqVJOcWQ"/>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N36kFmEIEdqmfMQqVJOcWQ" name="Stereotype">
    <ownedComment xmi:id="_N36kF2EIEdqmfMQqVJOcWQ" annotatedElement="_N36kFmEIEdqmfMQqVJOcWQ">
      <body>Stereotype is a kind of Class that extends Classes through Extensions. Just like a class, a stereotype may have properties, which may be referred to as tag definitions. When a stereotype is applied to a model element, the values of the properties may be referred to as tagged values. Also, stereotype names should not clash with keyword names for the extended model element.</body>
    </ownedComment>
    <ownedRule xmi:id="_N36kGGEIEdqmfMQqVJOcWQ" name="name_not_clash" constrainedElement="_N36kFmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N36kGWEIEdqmfMQqVJOcWQ" annotatedElement="_N36kGGEIEdqmfMQqVJOcWQ">
        <body>Stereotype names should not clash with keyword names for the extended model element.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N36kGmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>true</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N36kG2EIEdqmfMQqVJOcWQ" name="generalize" constrainedElement="_N36kFmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N36kHGEIEdqmfMQqVJOcWQ" annotatedElement="_N36kG2EIEdqmfMQqVJOcWQ">
        <body>A Stereotype may only generalize or specialize another Stereotype.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N36kHWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>generalization.general->forAll(e |e.oclIsKindOf(Stereotype)) and generalization.specific->forAll(e | e.oclIsKindOf(Stereotype)) </body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N36kHmEIEdqmfMQqVJOcWQ" general="_Ni59kGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N36kH2EIEdqmfMQqVJOcWQ" name="icon" type="_N4DuV2EIEdqmfMQqVJOcWQ" association="_N4XQAGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N36kIGEIEdqmfMQqVJOcWQ" annotatedElement="_N36kH2EIEdqmfMQqVJOcWQ">
        <body>Stereotype can change the graphical appearance of the extended model element by using attached icons. When this association is not null, it references the location of the icon content to be displayed within diagrams presenting the extended model elements.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N36kIWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N36kImEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N36kI2EIEdqmfMQqVJOcWQ" name="Profile">
    <ownedComment xmi:id="_N36kJGEIEdqmfMQqVJOcWQ" annotatedElement="_N36kI2EIEdqmfMQqVJOcWQ">
      <body>A Profile is a kind of Package that extends a reference metamodel. The primary extension construct is the Stereotype, which are defined as part of Profiles.



A profile introduces several constraints, or restrictions, on ordinary metamodeling through the use of the metaclasses defined in this package.



A profile is a restricted form of a metamodel that must always be related to a reference metamodel, such as UML, as described below. A profile cannot be used without its reference metamodel, and defines a limited capability to extendmetaclasses of the reference metamodel. The extensions are defined as stereotypes that apply to existing metaclasses.</body>
    </ownedComment>
    <ownedRule xmi:id="_N36kJWEIEdqmfMQqVJOcWQ" name="metaclass_reference_not_specialized" constrainedElement="_N36kI2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N36kJmEIEdqmfMQqVJOcWQ" annotatedElement="_N36kJWEIEdqmfMQqVJOcWQ">
        <body>An element imported as a metaclassReference is not specialized or generalized in a Profile.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N36kJ2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.metaclassReference.importedElement->

  select(c | c.oclIsKindOf(Classifier) and

    (c.generalization.namespace = self or

      (c.specialization.namespace = self) )->isEmpty()</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N36kKGEIEdqmfMQqVJOcWQ" name="references_same_metamodel" constrainedElement="_N36kI2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N36kKWEIEdqmfMQqVJOcWQ" annotatedElement="_N36kKGEIEdqmfMQqVJOcWQ">
        <body>All elements imported either as metaclassReferences or through metamodelReferences are members of the same base reference metamodel.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N36kKmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages())->

  union(self.metaclassReference.importedElement.allOwningPackages() )->notEmpty()</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N36kK2EIEdqmfMQqVJOcWQ" general="_NjWCYGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N36kLGEIEdqmfMQqVJOcWQ" name="ownedStereotype" type="_N36kFmEIEdqmfMQqVJOcWQ" subsettedProperty="_NjWCZ2EIEdqmfMQqVJOcWQ" association="_N4NfBWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N36kLWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N36kLmEIEdqmfMQqVJOcWQ"/>
      </eAnnotations>
      <ownedComment xmi:id="_N36kL2EIEdqmfMQqVJOcWQ" annotatedElement="_N36kLGEIEdqmfMQqVJOcWQ">
        <body>References the Stereotypes that are owned by the Profile.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N36kMGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N36kMWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N36kMmEIEdqmfMQqVJOcWQ" name="metaclassReference" type="_NjWCQGEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbqWEIEdqmfMQqVJOcWQ" association="_N4NfGmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N36kM2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N36kNGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N36kNWEIEdqmfMQqVJOcWQ" annotatedElement="_N36kMmEIEdqmfMQqVJOcWQ">
        <body>References a metaclass that may be extended.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N36kNmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N36kN2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N36kOGEIEdqmfMQqVJOcWQ" name="metamodelReference" type="_NjWCmWEIEdqmfMQqVJOcWQ" subsettedProperty="_Nimbr2EIEdqmfMQqVJOcWQ" association="_N4NfH2EIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N36kOWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N36kOmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N36kO2EIEdqmfMQqVJOcWQ" annotatedElement="_N36kOGEIEdqmfMQqVJOcWQ">
        <body>References a package containing (directly or indirectly) metaclasses that may be extended.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N36kPGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N36kPWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_N36kPmEIEdqmfMQqVJOcWQ" name="allOwningPackages" type="_NjWCYGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_N36kQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N36kP2EIEdqmfMQqVJOcWQ" annotatedElement="_N36kPmEIEdqmfMQqVJOcWQ">
        <body>The query allOwningPackages() returns all the directly or indirectly owning packages.</body>
      </ownedComment>
      <ownedRule xmi:id="_N36kQGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N36kPmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N36kQWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = self.namespace->select(p | p.oclIsKindOf(Package))->union(p.allOwningPackages())</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N36kQmEIEdqmfMQqVJOcWQ" type="_NjWCYGEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N36kQ2EIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N36kRGEIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NjWCYGEIEdqmfMQqVJOcWQ" name="Package">
    <ownedComment xmi:id="_NjWCYWEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCYGEIEdqmfMQqVJOcWQ">
      <body>A package is a namespace for its members, and may contain other packages. Only packageable elements can be owned members of a package. By virtue of being a namespace, a package can import either individual members of other packages, or all the members of other packages. In addition a package can be merged with other packages.</body>
    </ownedComment>
    <ownedComment xmi:id="_Nme1_2EIEdqmfMQqVJOcWQ" annotatedElement="_NjWCYGEIEdqmfMQqVJOcWQ">
      <body>A package is a namespace for its members, and may contain other packages. Only packageable elements can be owned members of a package. By virtue of being a namespace, a package can import either individual members of other packages, or all the members of other packages.

In addition a package can be merged with other packages.

</body>
    </ownedComment>
    <ownedComment xmi:id="_N3d4ZWEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCYGEIEdqmfMQqVJOcWQ">
      <body>Package specializes TemplateableElement and PackageableElement specializes ParameterableElement to specify that a package can be used as a template and a PackageableElement as a template parameter.</body>
    </ownedComment>
    <ownedComment xmi:id="_N36kRWEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCYGEIEdqmfMQqVJOcWQ">
      <body>A Package can have one or more ProfileApplications to indicate which profiles have been applied. Because a profile is a package, it is possible to apply a profile not only to packages, but also to profiles.</body>
    </ownedComment>
    <ownedRule xmi:id="_NjWCYmEIEdqmfMQqVJOcWQ" name="elements_public_or_private" constrainedElement="_NjWCYGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjWCY2EIEdqmfMQqVJOcWQ" annotatedElement="_NjWCYmEIEdqmfMQqVJOcWQ">
        <body>If an element that is owned by a package has visibility, it is public or private.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nme2AGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.ownedElements->forAll(e | e.visibility->notEmpty() implies e.visbility = #public or e.visibility = #private)</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NjWCZWEIEdqmfMQqVJOcWQ" general="_Nimb8GEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_N3d4ZmEIEdqmfMQqVJOcWQ" general="_N3K9MmEIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NjWCZmEIEdqmfMQqVJOcWQ" general="_NimbnWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_NjWCf2EIEdqmfMQqVJOcWQ" name="packageMerge" type="_NjWCrWEIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NkGQRmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NjWCgGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjWCgWEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjWCgmEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCf2EIEdqmfMQqVJOcWQ">
        <body>References the PackageMerges that are owned by this Package.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nme2AWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nme2AmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjWCZ2EIEdqmfMQqVJOcWQ" name="packagedElement" type="_Nimb8GEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_NkGQOWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NjWCaGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjWCaWEIEdqmfMQqVJOcWQ"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjWCamEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCZ2EIEdqmfMQqVJOcWQ">
        <body>Specifies the packageable elements that are owned by this Package.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nme2A2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nme2BGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjWCbWEIEdqmfMQqVJOcWQ" name="ownedType" type="_NjWCumEIEdqmfMQqVJOcWQ" isDerived="true" subsettedProperty="_NjWCZ2EIEdqmfMQqVJOcWQ" association="_NkGQPmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NjWCbmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjWCb2EIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjWCcGEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCbWEIEdqmfMQqVJOcWQ">
        <body>References the packaged elements that are Types.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nme2BWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nme2BmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjWCc2EIEdqmfMQqVJOcWQ" name="nestedPackage" type="_NjWCYGEIEdqmfMQqVJOcWQ" isDerived="true" subsettedProperty="_NjWCZ2EIEdqmfMQqVJOcWQ" association="_NkGQQmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NjWCdGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjWCdWEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjWCdmEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCc2EIEdqmfMQqVJOcWQ">
        <body>References the packaged elements that are Packages.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nme2B2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nme2CGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NjWCeWEIEdqmfMQqVJOcWQ" name="nestingPackage" type="_NjWCYGEIEdqmfMQqVJOcWQ" subsettedProperty="_NjfzVmEIEdqmfMQqVJOcWQ" association="_NkGQQmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NjWCemEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NjWCe2EIEdqmfMQqVJOcWQ"/>
      </eAnnotations>
      <ownedComment xmi:id="_NjWCfGEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCeWEIEdqmfMQqVJOcWQ">
        <body>References the owning package of a package.</body>
      </ownedComment>
      <ownedComment xmi:id="_Nme2CWEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCeWEIEdqmfMQqVJOcWQ">
        <body>References the Package that owns this Package.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nme2CmEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nme2C2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N36kRmEIEdqmfMQqVJOcWQ" name="appliedProfile" type="_N4DuC2EIEdqmfMQqVJOcWQ" subsettedProperty="_Nimbr2EIEdqmfMQqVJOcWQ" association="_N4NfAGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N36kR2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N36kSGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N36kSWEIEdqmfMQqVJOcWQ" annotatedElement="_N36kRmEIEdqmfMQqVJOcWQ">
        <body>References the ProfileApplications that indicate which profiles have been applied to the Package.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N36kSmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N36kS2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NjWChWEIEdqmfMQqVJOcWQ" name="mustBeOwned" isQuery="true" redefinedOperation="_NidR82EIEdqmfMQqVJOcWQ" bodyCondition="_NjWCh2EIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjWChmEIEdqmfMQqVJOcWQ" annotatedElement="_NjWChWEIEdqmfMQqVJOcWQ">
        <body>The query mustBeOwned() indicates whether elements of this type must have an owner.</body>
      </ownedComment>
      <ownedRule xmi:id="_NjWCh2EIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NjWChWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nme2DGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = false</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NjWCiWEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
    <ownedOperation xmi:id="_NjWCimEIEdqmfMQqVJOcWQ" name="visibleMembers" type="_Nimb8GEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_NjWCjGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjWCi2EIEdqmfMQqVJOcWQ" annotatedElement="_NjWCimEIEdqmfMQqVJOcWQ">
        <body>The query visibleMembers() defines which members of a Package can be accessed outside it.</body>
      </ownedComment>
      <ownedRule xmi:id="_NjWCjGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NjWCimEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nme2DWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = member->select( m | self.makesVisible(m))</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NjWCjmEIEdqmfMQqVJOcWQ" type="_Nimb8GEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nme2DmEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nmn_wGEIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
    <ownedOperation xmi:id="_NjWCkWEIEdqmfMQqVJOcWQ" name="makesVisible" isQuery="true" precondition="_NjWCk2EIEdqmfMQqVJOcWQ" bodyCondition="_NjWClWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NjWCkmEIEdqmfMQqVJOcWQ" annotatedElement="_NjWCkWEIEdqmfMQqVJOcWQ">
        <body>The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.</body>
      </ownedComment>
      <ownedRule xmi:id="_NjWCk2EIEdqmfMQqVJOcWQ" constrainedElement="_NjWCkWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nmn_wWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>self.member->includes(el)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_NjWClWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NjWCkWEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_Nmn_wmEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = (ownedMember->includes(el)) or
(elementImport->select(ei|ei.importedElement = #public)->collect(ei|ei.importedElement)->includes(el)) or
(packageImport->select(pi|pi.visibility = #public)->collect(pi|pi.importedPackage.member->includes(el))->notEmpty())</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NjWCl2EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <ownedParameter xmi:id="_NjWCmGEIEdqmfMQqVJOcWQ" name="el" type="_NjfzQGEIEdqmfMQqVJOcWQ"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_Ni59kGEIEdqmfMQqVJOcWQ" name="Class">
    <ownedComment xmi:id="_Ni59kWEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59kGEIEdqmfMQqVJOcWQ">
      <body>Class is a kind of classifier whose features are attributes and operations. Attributes of a class are represented by instances of Property that are owned by the class. Some of these attributes may represent the navigable ends of binary associations.</body>
    </ownedComment>
    <ownedComment xmi:id="_NsleCmEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59kGEIEdqmfMQqVJOcWQ">
      <body>A class may be designated as active, i.e., each of its instances having its own thread of control, or passive, i.e., each of its instance executing within the context of some other object. A class may also specify which signals the instances of this class handle.</body>
    </ownedComment>
    <ownedComment xmi:id="_NtVEsmEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59kGEIEdqmfMQqVJOcWQ">
      <body>Extends the metaclass Class with the capability to have an internal structure and ports.</body>
    </ownedComment>
    <ownedComment xmi:id="_N4DuAGEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59kGEIEdqmfMQqVJOcWQ">
      <body>Class has derived association that indicates how it may be extended through one or more stereotypes.</body>
    </ownedComment>
    <ownedRule xmi:id="_NsleC2EIEdqmfMQqVJOcWQ" name="passive_class" constrainedElement="_Ni59kGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NsleDGEIEdqmfMQqVJOcWQ" annotatedElement="_NsleC2EIEdqmfMQqVJOcWQ">
        <body>A passive class may not own receptions.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NsleDWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>not self.isActive implies self.ownedReception.isEmpty()</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_NsvO0GEIEdqmfMQqVJOcWQ" general="_NqDua2EIEdqmfMQqVJOcWQ"/>
    <generalization xmi:id="_NtVEs2EIEdqmfMQqVJOcWQ" general="_NtL69GEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_Ni59k2EIEdqmfMQqVJOcWQ" name="isAbstract" redefinedProperty="_Nlun5mEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni59lGEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59k2EIEdqmfMQqVJOcWQ">
        <body>True when a class is abstract.</body>
      </ownedComment>
      <ownedComment xmi:id="_Nmn_yGEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59k2EIEdqmfMQqVJOcWQ">
        <body>If true, the Classifier does not provide a complete declaration and can typically not be instantiated. An abstract classifier is intended to be used by other classifiers e.g. as the target of general metarelationships or generalization relationships.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_Nmn_yWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Nmn_ymEIEdqmfMQqVJOcWQ" name="nestedClassifier" type="_NiTgcGEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ" association="_NoHNgmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Nmn_y2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Nmn_zGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Nmn_zWEIEdqmfMQqVJOcWQ" annotatedElement="_Nmn_ymEIEdqmfMQqVJOcWQ">
        <body>References all the Classifiers that are defined (nested) within the Class.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nmn_zmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nmn_z2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ni59lmEIEdqmfMQqVJOcWQ" name="ownedAttribute" type="_Ni59sGEIEdqmfMQqVJOcWQ" isOrdered="true" redefinedProperty="_NrGQMmEIEdqmfMQqVJOcWQ" subsettedProperty="_NiTgemEIEdqmfMQqVJOcWQ _NimbtWEIEdqmfMQqVJOcWQ" association="_NjyuMmEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Ni59l2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Ni59mGEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ni59mWEIEdqmfMQqVJOcWQ" annotatedElement="_Ni59lmEIEdqmfMQqVJOcWQ">
        <body>The attributes (i.e. the properties) owned by the class.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NmxwwGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NmxwwWEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ni59nGEIEdqmfMQqVJOcWQ" name="ownedOperation" type="_NjM4UGEIEdqmfMQqVJOcWQ" isOrdered="true" subsettedProperty="_NiTggGEIEdqmfMQqVJOcWQ _NimbtWEIEdqmfMQqVJOcWQ" association="_NjyuNWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_Ni59nWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_Ni59nmEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ni59n2EIEdqmfMQqVJOcWQ" annotatedElement="_Ni59nGEIEdqmfMQqVJOcWQ">
        <body>The operations owned by the class.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NmxwwmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nmxww2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_Ni59omEIEdqmfMQqVJOcWQ" name="superClass" type="_Ni59kGEIEdqmfMQqVJOcWQ" isDerived="true" redefinedProperty="_NiTghmEIEdqmfMQqVJOcWQ" association="_Nj8fMmEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NmxwxGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NmxwxWEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_Ni59o2EIEdqmfMQqVJOcWQ" annotatedElement="_Ni59omEIEdqmfMQqVJOcWQ">
        <body>This gives the superclasses of a class.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NmxwxmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Nmxwx2EIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NsvO0WEIEdqmfMQqVJOcWQ" name="isActive">
      <eAnnotations xmi:id="_NsvO0mEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_NsvO02EIEdqmfMQqVJOcWQ" isUnsettable="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_NsvO1GEIEdqmfMQqVJOcWQ" annotatedElement="_NsvO0WEIEdqmfMQqVJOcWQ">
        <body>Determines whether an object specified by this class is active or not. If true, then the owning class is referred to as an active class. If false, then such a class is referred to as a passive class.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NsvO1WEIEdqmfMQqVJOcWQ" name="ownedReception" type="_NsvO6WEIEdqmfMQqVJOcWQ" subsettedProperty="_NimbtWEIEdqmfMQqVJOcWQ _NiTggGEIEdqmfMQqVJOcWQ" association="_NtCJ0mEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NsvO1mEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NsvO12EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NsvO2GEIEdqmfMQqVJOcWQ" annotatedElement="_NsvO1WEIEdqmfMQqVJOcWQ">
        <body>Receptions that objects of this class are willing to accept.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NsvO2WEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NsvO2mEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N4DuAWEIEdqmfMQqVJOcWQ" name="extension" type="_N4DuFWEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" association="_N4NfD2EIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N4DuAmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N4DuA2EIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_N4DuBGEIEdqmfMQqVJOcWQ" annotatedElement="_N4DuAWEIEdqmfMQqVJOcWQ">
        <body>References the Extensions that specify additional properties of the metaclass. The property is derived from the extensions whose memberEnds are typed by the Class.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N4DuBWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N4DuBmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_Ni59pmEIEdqmfMQqVJOcWQ" name="inherit" type="_NjfzQGEIEdqmfMQqVJOcWQ" isQuery="true" redefinedOperation="_NidRs2EIEdqmfMQqVJOcWQ" bodyCondition="_Ni59qGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_Ni59p2EIEdqmfMQqVJOcWQ" annotatedElement="_Ni59pmEIEdqmfMQqVJOcWQ">
        <body>The inherit operation is overridden to exclude redefined properties.</body>
      </ownedComment>
      <ownedRule xmi:id="_Ni59qGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_Ni59pmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NmxwyGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = inhs->excluding(inh | ownedMember->select(oclIsKindOf(RedefinableElement))->select(redefinedElement->includes(inh)))</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_Ni59qmEIEdqmfMQqVJOcWQ" type="_NjfzQGEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Nmxwy2EIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NmxwzGEIEdqmfMQqVJOcWQ"/>
      </returnResult>
      <ownedParameter xmi:id="_Ni59rWEIEdqmfMQqVJOcWQ" name="inhs" type="_NjfzQGEIEdqmfMQqVJOcWQ">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NmxwzWEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NmxwzmEIEdqmfMQqVJOcWQ"/>
      </ownedParameter>
    </ownedOperation>
    <ownedOperation xmi:id="_N4DuB2EIEdqmfMQqVJOcWQ" name="getExtensions" visibility="protected" type="_N4DuFWEIEdqmfMQqVJOcWQ">
      <returnResult xmi:id="_N4DuCGEIEdqmfMQqVJOcWQ" type="_N4DuFWEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N4DuCWEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N4DuCmEIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N4DuC2EIEdqmfMQqVJOcWQ" name="ProfileApplication">
    <ownedComment xmi:id="_N4DuDGEIEdqmfMQqVJOcWQ" annotatedElement="_N4DuC2EIEdqmfMQqVJOcWQ">
      <body>ProfileApplication is a kind of PackageImport that adds the capability to state that a Profile is applied to a Package.</body>
    </ownedComment>
    <generalization xmi:id="_N4DuDWEIEdqmfMQqVJOcWQ" general="_NjWCmWEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N4DuDmEIEdqmfMQqVJOcWQ" name="importedProfile" type="_N36kI2EIEdqmfMQqVJOcWQ" subsettedProperty="_NjWCo2EIEdqmfMQqVJOcWQ" association="_N4NfCmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N4DuD2EIEdqmfMQqVJOcWQ" annotatedElement="_N4DuDmEIEdqmfMQqVJOcWQ">
        <body>References the Profiles that are applied to a Package through this ProfileApplication.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N4DuEGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N4DuEWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N4DuEmEIEdqmfMQqVJOcWQ" name="isStrict">
      <ownedComment xmi:id="_N4DuE2EIEdqmfMQqVJOcWQ" annotatedElement="_N4DuEmEIEdqmfMQqVJOcWQ">
        <body>Specifies that the Profile filtering rules for the metaclasses of the referenced metamodel shall be strictly applied.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_N4DuFGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N4DuFWEIEdqmfMQqVJOcWQ" name="Extension">
    <ownedComment xmi:id="_N4DuFmEIEdqmfMQqVJOcWQ" annotatedElement="_N4DuFWEIEdqmfMQqVJOcWQ">
      <body>Extension is a kind of Association. One end of the Extension is an ordinary Property and the other end is an ExtensionEnd. The former ties the Extension to a Class, while the latter ties the Extension to a Stereotype that extends the Class.</body>
    </ownedComment>
    <ownedRule xmi:id="_N4DuF2EIEdqmfMQqVJOcWQ" name="non_owned_end" constrainedElement="_N4DuFWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N4DuGGEIEdqmfMQqVJOcWQ" annotatedElement="_N4DuF2EIEdqmfMQqVJOcWQ">
        <body>The non-owned end of an Extension is typed by a Class.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N4DuGWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>metaclassEnd()->notEmpty() and metaclass()->oclIsKindOf(Class)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N4DuGmEIEdqmfMQqVJOcWQ" name="is_binary" constrainedElement="_N4DuFWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N4DuG2EIEdqmfMQqVJOcWQ" annotatedElement="_N4DuGmEIEdqmfMQqVJOcWQ">
        <body>An Extension is binary, i.e., it has only two memberEnds.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N4DuHGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>memberEnd->size() = 2</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N4DuHWEIEdqmfMQqVJOcWQ" general="_Ni59cmEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N4DuHmEIEdqmfMQqVJOcWQ" name="isRequired" isReadOnly="true" isDerived="true">
      <eAnnotations xmi:id="_N4DuH2EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EAttribute" xmi:id="_N4DuIGEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_N4DuIWEIEdqmfMQqVJOcWQ" annotatedElement="_N4DuHmEIEdqmfMQqVJOcWQ">
        <body>Indicates whether an instance of the extending stereotype must be created when an instance of the extended class is created. The attribute value is derived from the multiplicity of the Property referenced by Extension::ownedEnd; a multiplicity of 1 means that isRequired is true, but otherwise it is false. Since the default multiplicity of an ExtensionEnd is 0..1, the default value of isRequired is false.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_N4DuImEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N4DuI2EIEdqmfMQqVJOcWQ" name="metaclass" type="_Ni59kGEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" association="_N4NfD2EIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N4DuJGEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N4DuJWEIEdqmfMQqVJOcWQ" isTransient="true"/>
      </eAnnotations>
      <ownedComment xmi:id="_N4DuJmEIEdqmfMQqVJOcWQ" annotatedElement="_N4DuI2EIEdqmfMQqVJOcWQ">
        <body>References the Class that is extended through an Extension. The property is derived from the type of the memberEnd that is not the ownedEnd.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N4DuJ2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N4DuKGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N4DuKWEIEdqmfMQqVJOcWQ" name="ownedEnd" type="_N4DuQGEIEdqmfMQqVJOcWQ" redefinedProperty="_Ni59fGEIEdqmfMQqVJOcWQ" subsettedProperty="_Ni59fGEIEdqmfMQqVJOcWQ" association="_N4NfEGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_N4DuKmEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_N4DuK2EIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_N4DuLGEIEdqmfMQqVJOcWQ" annotatedElement="_N4DuKWEIEdqmfMQqVJOcWQ">
        <body>References the end of the extension that is typed by a Stereotype.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N4DuLWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N4DuLmEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_N4DuL2EIEdqmfMQqVJOcWQ" name="metaclassEnd" type="_Ni59sGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_N4DuMWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N4DuMGEIEdqmfMQqVJOcWQ" annotatedElement="_N4DuL2EIEdqmfMQqVJOcWQ">
        <body>The query metaclassEnd() returns the Property that is typed by a metaclass (as opposed to a stereotype).</body>
      </ownedComment>
      <ownedRule xmi:id="_N4DuMWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N4DuL2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N4DuMmEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = memberEnd->reject(ownedEnd)</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N4DuM2EIEdqmfMQqVJOcWQ" type="_Ni59sGEIEdqmfMQqVJOcWQ" direction="return"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N4DuNGEIEdqmfMQqVJOcWQ" name="metaclass" type="_Ni59kGEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_N4DuOGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_N4DuNWEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EOperation" xmi:id="_N4DuNmEIEdqmfMQqVJOcWQ" operationName="getMetaclass"/>
      </eAnnotations>
      <ownedComment xmi:id="_N4DuN2EIEdqmfMQqVJOcWQ" annotatedElement="_N4DuNGEIEdqmfMQqVJOcWQ">
        <body>The query metaclass() returns the metaclass that is being extended (as opposed to the extending stereotype).</body>
      </ownedComment>
      <ownedRule xmi:id="_N4DuOGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N4DuNGEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N4DuOWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = metaclassEnd().type</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N4DuOmEIEdqmfMQqVJOcWQ" type="_Ni59kGEIEdqmfMQqVJOcWQ" direction="return"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N4DuO2EIEdqmfMQqVJOcWQ" name="isRequired" isQuery="true" bodyCondition="_N4DuPWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N4DuPGEIEdqmfMQqVJOcWQ" annotatedElement="_N4DuO2EIEdqmfMQqVJOcWQ">
        <body>The query isRequired() is true if the owned end has a multiplicity with the lower bound of 1.</body>
      </ownedComment>
      <ownedRule xmi:id="_N4DuPWEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N4DuO2EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N4DuPmEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = (ownedEnd->lowerBound() = 1)</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N4DuP2EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N4DuV2EIEdqmfMQqVJOcWQ" name="Image" isAbstract="true">
    <ownedComment xmi:id="_N4DuWGEIEdqmfMQqVJOcWQ" annotatedElement="_N4DuV2EIEdqmfMQqVJOcWQ">
      <body>The Image class provides the necessary information to display an Image in a diagram. Icons are typically handled through the Image class.</body>
    </ownedComment>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_NidR0mEIEdqmfMQqVJOcWQ" name="Element" isAbstract="true">
    <ownedComment xmi:id="_NidR02EIEdqmfMQqVJOcWQ" annotatedElement="_NidR0mEIEdqmfMQqVJOcWQ">
      <body>An element can own comments.</body>
    </ownedComment>
    <ownedComment xmi:id="_NkiVHGEIEdqmfMQqVJOcWQ" annotatedElement="_NidR0mEIEdqmfMQqVJOcWQ">
      <body>Element is an abstract metaclass with no superclass. It is used as the common superclass for all metaclasses in the infrastructure library. Element has a derived composition association to itself to support the general capability for elements to own other elements.</body>
    </ownedComment>
    <ownedComment xmi:id="_N4DuWWEIEdqmfMQqVJOcWQ" annotatedElement="_NidR0mEIEdqmfMQqVJOcWQ">
      <body> An element is a constituent of a model. An element can own comments.</body>
    </ownedComment>
    <ownedRule xmi:id="_NidR1GEIEdqmfMQqVJOcWQ" name="not_own_self" constrainedElement="_NidR0mEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NidR1WEIEdqmfMQqVJOcWQ" annotatedElement="_NidR1GEIEdqmfMQqVJOcWQ">
        <body>An element may not directly or indirectly own itself.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NkiVHWEIEdqmfMQqVJOcWQ" language="OCL">
        <body>not self.allOwnedElements()->includes(self)</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_NidR12EIEdqmfMQqVJOcWQ" name="has_owner" constrainedElement="_NidR0mEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NidR2GEIEdqmfMQqVJOcWQ" annotatedElement="_NidR12EIEdqmfMQqVJOcWQ">
        <body>Elements that must be owned must have an owner.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_NkiVHmEIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.mustBeOwned() implies owner->notEmpty()</body>
      </specification>
    </ownedRule>
    <ownedAttribute xmi:id="_NidR2mEIEdqmfMQqVJOcWQ" name="ownedElement" type="_NidR0mEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="_NkGQTGEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NidR22EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NidR3GEIEdqmfMQqVJOcWQ" isTransient="true" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NidR3WEIEdqmfMQqVJOcWQ" annotatedElement="_NidR2mEIEdqmfMQqVJOcWQ">
        <body>The Elements owned by this element.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NkiVH2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NkiVIGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NidR4GEIEdqmfMQqVJOcWQ" name="owner" type="_NidR0mEIEdqmfMQqVJOcWQ" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="_NkGQTGEIEdqmfMQqVJOcWQ">
      <eAnnotations xmi:id="_NidR4WEIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NidR4mEIEdqmfMQqVJOcWQ" isTransient="true" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NidR42EIEdqmfMQqVJOcWQ" annotatedElement="_NidR4GEIEdqmfMQqVJOcWQ">
        <body>The Element that owns this element.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NkiVIWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NkiVImEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_NidR5mEIEdqmfMQqVJOcWQ" name="ownedComment" type="_NjpkR2EIEdqmfMQqVJOcWQ" subsettedProperty="_NidR2mEIEdqmfMQqVJOcWQ" association="_NkZLMWEIEdqmfMQqVJOcWQ" aggregation="composite">
      <eAnnotations xmi:id="_NidR52EIEdqmfMQqVJOcWQ" source="appliedStereotypes">
        <contents xmi:type="Ecore_2:Ecore__EReference" xmi:id="_NidR6GEIEdqmfMQqVJOcWQ" isResolveProxies="false"/>
      </eAnnotations>
      <ownedComment xmi:id="_NidR6WEIEdqmfMQqVJOcWQ" annotatedElement="_NidR5mEIEdqmfMQqVJOcWQ">
        <body>The Comments owned by this element.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NkiVI2EIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NkiVJGEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_NidR7GEIEdqmfMQqVJOcWQ" name="allOwnedElements" type="_NidR0mEIEdqmfMQqVJOcWQ" isQuery="true" bodyCondition="_NidR7mEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NidR7WEIEdqmfMQqVJOcWQ" annotatedElement="_NidR7GEIEdqmfMQqVJOcWQ">
        <body>The query allOwnedElements() gives all of the direct and indirect owned elements of an element.</body>
      </ownedComment>
      <ownedRule xmi:id="_NidR7mEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NidR7GEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NkiVJWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NidR8GEIEdqmfMQqVJOcWQ" type="_NidR0mEIEdqmfMQqVJOcWQ" direction="return">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_NkiVJmEIEdqmfMQqVJOcWQ" value="-1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_NkiVJ2EIEdqmfMQqVJOcWQ"/>
      </returnResult>
    </ownedOperation>
    <ownedOperation xmi:id="_NidR82EIEdqmfMQqVJOcWQ" name="mustBeOwned" isQuery="true" bodyCondition="_NidR9WEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_NidR9GEIEdqmfMQqVJOcWQ" annotatedElement="_NidR82EIEdqmfMQqVJOcWQ">
        <body>The query mustBeOwned() indicates whether elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.</body>
      </ownedComment>
      <ownedRule xmi:id="_NidR9WEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_NidR82EIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_NkiVKGEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = true</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_NidR92EIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010AC0090"/>
    </ownedOperation>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N4NfAGEIEdqmfMQqVJOcWQ" name="A_appliedProfile_package" memberEnd="_N36kRmEIEdqmfMQqVJOcWQ _N4NfAmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N4NfAWEIEdqmfMQqVJOcWQ" general="_NkGQNmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N4NfAmEIEdqmfMQqVJOcWQ" type="_NjWCYGEIEdqmfMQqVJOcWQ" association="_N4NfAGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N4NfA2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N4NfBGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N4NfBWEIEdqmfMQqVJOcWQ" name="A_ownedStereotype_profile" memberEnd="_N4NfB2EIEdqmfMQqVJOcWQ _N36kLGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N4NfBmEIEdqmfMQqVJOcWQ" general="_NkGQOWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N4NfB2EIEdqmfMQqVJOcWQ" type="_N36kI2EIEdqmfMQqVJOcWQ" redefinedProperty="_NkZLJmEIEdqmfMQqVJOcWQ" association="_N4NfBWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N4NfCGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N4NfCWEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N4NfCmEIEdqmfMQqVJOcWQ" name="A_importedProfile_profileApplication" memberEnd="_N4NfDGEIEdqmfMQqVJOcWQ _N4DuDmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N4NfC2EIEdqmfMQqVJOcWQ" general="_Nj8fUWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N4NfDGEIEdqmfMQqVJOcWQ" type="_N4DuC2EIEdqmfMQqVJOcWQ" association="_N4NfCmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N4NfDWEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N4NfDmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N4NfD2EIEdqmfMQqVJOcWQ" name="A_extension_metaclass" isDerived="true" memberEnd="_N4DuAWEIEdqmfMQqVJOcWQ _N4DuI2EIEdqmfMQqVJOcWQ"/>
  <ownedMember xmi:type="uml:Association" xmi:id="_N4NfEGEIEdqmfMQqVJOcWQ" name="A_ownedEnd_extension" memberEnd="_N4DuKWEIEdqmfMQqVJOcWQ _N4NfEmEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N4NfEWEIEdqmfMQqVJOcWQ" general="_NjyuOWEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N4NfEmEIEdqmfMQqVJOcWQ" type="_N4DuFWEIEdqmfMQqVJOcWQ" redefinedProperty="_NkZLJmEIEdqmfMQqVJOcWQ" association="_N4NfEGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N4NfE2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N4NfFGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N4NfFWEIEdqmfMQqVJOcWQ" name="A_type_extensionEnd" memberEnd="_N4DuSWEIEdqmfMQqVJOcWQ _N4NfF2EIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N4NfFmEIEdqmfMQqVJOcWQ" general="_NjyuMGEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N4NfF2EIEdqmfMQqVJOcWQ" type="_N4DuQGEIEdqmfMQqVJOcWQ" association="_N4NfFWEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N4NfGGEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N4NfGWEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N4NfGmEIEdqmfMQqVJOcWQ" name="A_metaclassReference_profile" memberEnd="_N36kMmEIEdqmfMQqVJOcWQ _N4NfHGEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N4NfG2EIEdqmfMQqVJOcWQ" general="_NkGQM2EIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N4NfHGEIEdqmfMQqVJOcWQ" type="_N36kI2EIEdqmfMQqVJOcWQ" association="_N4NfGmEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N4NfHWEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N4NfHmEIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N4NfH2EIEdqmfMQqVJOcWQ" name="A_metamodelReference_profile" memberEnd="_N36kOGEIEdqmfMQqVJOcWQ _N4NfIWEIEdqmfMQqVJOcWQ">
    <generalization xmi:id="_N4NfIGEIEdqmfMQqVJOcWQ" general="_NkGQNmEIEdqmfMQqVJOcWQ"/>
    <ownedEnd xmi:id="_N4NfIWEIEdqmfMQqVJOcWQ" type="_N36kI2EIEdqmfMQqVJOcWQ" association="_N4NfH2EIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N4NfImEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N4NfI2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Association" xmi:id="_N4XQAGEIEdqmfMQqVJOcWQ" name="A_icon_stereotype" memberEnd="_N36kH2EIEdqmfMQqVJOcWQ _N4XQAWEIEdqmfMQqVJOcWQ">
    <ownedEnd xmi:id="_N4XQAWEIEdqmfMQqVJOcWQ" type="_N36kFmEIEdqmfMQqVJOcWQ" association="_N4XQAGEIEdqmfMQqVJOcWQ">
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N4XQAmEIEdqmfMQqVJOcWQ" value="-1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N4XQA2EIEdqmfMQqVJOcWQ"/>
    </ownedEnd>
  </ownedMember>
  <ownedMember xmi:type="uml:Class" xmi:id="_N4DuQGEIEdqmfMQqVJOcWQ" name="ExtensionEnd">
    <ownedComment xmi:id="_N4DuQWEIEdqmfMQqVJOcWQ" annotatedElement="_N4DuQGEIEdqmfMQqVJOcWQ">
      <body>ExtensionEnd is a kind of Property that is always typed by a Stereotype. An ExtensionEnd is never navigable. If it was navigable, it would be a property of the extended classifier. Since a profile is not allowed to change the referenced metamodel, it is not possible to add properties to the extended classifier. As a consequence, an ExtensionEnd can only be owned by an Extension. The aggregation of an ExtensionEnd is always composite. The default multiplicity of an ExtensionEnd is 0..1.</body>
    </ownedComment>
    <ownedRule xmi:id="_N4DuQmEIEdqmfMQqVJOcWQ" name="multiplicity" constrainedElement="_N4DuQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N4DuQ2EIEdqmfMQqVJOcWQ" annotatedElement="_N4DuQmEIEdqmfMQqVJOcWQ">
        <body>The multiplicity of ExtensionEnd is 0..1 or 1.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N4DuRGEIEdqmfMQqVJOcWQ" language="OCL">
        <body>(self->lowerBound() = 0 or self->lowerBound() = 1) and self->upperBound() = 1</body>
      </specification>
    </ownedRule>
    <ownedRule xmi:id="_N4DuRWEIEdqmfMQqVJOcWQ" name="aggregation" constrainedElement="_N4DuQGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N4DuRmEIEdqmfMQqVJOcWQ" annotatedElement="_N4DuRWEIEdqmfMQqVJOcWQ">
        <body>The aggregation of an ExtensionEnd is composite.</body>
      </ownedComment>
      <specification xmi:type="uml:OpaqueExpression" xmi:id="_N4DuR2EIEdqmfMQqVJOcWQ" language="OCL">
        <body>self.aggregation = #composite</body>
      </specification>
    </ownedRule>
    <generalization xmi:id="_N4DuSGEIEdqmfMQqVJOcWQ" general="_Ni59sGEIEdqmfMQqVJOcWQ"/>
    <ownedAttribute xmi:id="_N4DuSWEIEdqmfMQqVJOcWQ" name="type" type="_N36kFmEIEdqmfMQqVJOcWQ" redefinedProperty="_NiwMkmEIEdqmfMQqVJOcWQ" association="_N4NfFWEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N4DuSmEIEdqmfMQqVJOcWQ" annotatedElement="_N4DuSWEIEdqmfMQqVJOcWQ">
        <body>References the type of the ExtensionEnd. Note that this association restricts the possible types of an ExtensionEnd to only be Stereotypes.</body>
      </ownedComment>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N4DuS2EIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N4DuTGEIEdqmfMQqVJOcWQ" value="1"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_N4DuTWEIEdqmfMQqVJOcWQ" name="lower" isDerived="true" redefinedProperty="_NimbcmEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N4DuTmEIEdqmfMQqVJOcWQ" annotatedElement="_N4DuTWEIEdqmfMQqVJOcWQ">
        <body>This redefinition changes the default multiplicity of association ends, since model elements are usually extended by 0 or 1 instance of the extension stereotype.</body>
      </ownedComment>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N4XQBGEIEdqmfMQqVJOcWQ" value="1"/>
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N4XQBWEIEdqmfMQqVJOcWQ"/>
      <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_N4XQBmEIEdqmfMQqVJOcWQ"/>
    </ownedAttribute>
    <ownedOperation xmi:id="_N4DuUmEIEdqmfMQqVJOcWQ" name="lowerBound" isQuery="true" redefinedOperation="_Nimbk2EIEdqmfMQqVJOcWQ" bodyCondition="_N4DuVGEIEdqmfMQqVJOcWQ">
      <ownedComment xmi:id="_N4DuU2EIEdqmfMQqVJOcWQ" annotatedElement="_N4DuUmEIEdqmfMQqVJOcWQ">
        <body>The query lowerBound() returns the lower bound of the multiplicity as an Integer. This is a redefinition of the default

lower bound, which normally, for MultiplicityElements, evaluates to 1 if empty.</body>
      </ownedComment>
      <ownedRule xmi:id="_N4DuVGEIEdqmfMQqVJOcWQ" name="spec" constrainedElement="_N4DuUmEIEdqmfMQqVJOcWQ">
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_N4DuVWEIEdqmfMQqVJOcWQ" language="OCL">
          <body>result = lowerBound = if lowerValue->isEmpty() then 0 else lowerValue->IntegerValue() endif</body>
        </specification>
      </ownedRule>
      <returnResult xmi:id="_N4DuVmEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N4XQB2EIEdqmfMQqVJOcWQ" name="getLower" visibility="protected">
      <returnResult xmi:id="_N4XQCGEIEdqmfMQqVJOcWQ" direction="return">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
      </returnResult>
      <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
    </ownedOperation>
    <ownedOperation xmi:id="_N4XQCWEIEdqmfMQqVJOcWQ" name="setLower" visibility="protected" redefinedOperation="_NlleH2EIEdqmfMQqVJOcWQ">
      <ownedParameter xmi:id="_N4XQCmEIEdqmfMQqVJOcWQ" name="newLower" effect="read">
        <type xmi:type="uml:PrimitiveType" href="InfrastructureLibrary.uml2#_3ADC7B74022D3CA010A4007B"/>
      </ownedParameter>
    </ownedOperation>
  </ownedMember>
</uml:Model>
